<?xml version='1.0' encoding='UTF-8'?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearch/1.1/' xmlns:gd='http://schemas.google.com/g/2005' xmlns:issues='http://schemas.google.com/projecthosting/issues/2009'><id>http://code.google.com/feeds/issues/p/sympy/issues/full</id><updated>2012-11-09T05:18:30.233Z</updated><title>Issues - sympy</title><subtitle>Issues - sympy</subtitle><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/list'/><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full'/><link rel='http://schemas.google.com/g/2005#post' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full?updated-min=2012-09-15T00:00:00.000&amp;max-results=288&amp;can=all'/><generator version='1.0' uri='http://code.google.com/feeds/issues'>ProjectHosting</generator><openSearch:totalResults>288</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>288</openSearch:itemsPerPage><entry gd:etag='W/&quot;DEIMSX47eCl7ImA9WhJbEEw.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3053</id><published>2012-02-11T18:21:35.000Z</published><updated>2012-09-19T01:03:08.000Z</updated><title>setup.py egg-info fails on Python3</title><content type='html'>Tox log attached.

I guess that the trick is to make sure that setup.py only contains code valid in all Python versions. </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3053/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3053'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3053'/><author><name>Ronan.L...@gmail.com</name><uri>/u/101272611947379421629/</uri></author><issues:cc><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:cc><issues:id>3053</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Critical</issues:label><issues:label>Milestone-Release0.7.2</issues:label><issues:label>Python3</issues:label><issues:stars>4</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CkAAQX47eCl7ImA9WhJbFUU.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2371</id><published>2011-05-14T03:19:43.000Z</published><updated>2012-09-25T13:45:40.000Z</updated><title>Completely untested modules in sympy.polys</title><content type='html'>The modules densepolys, sparsearith, sparsebasic, sparsepolys and sparsetools have 0% coverage by the test suite, which means that they aren't even imported. They don't have any doctest either.

Quite unsurprisingly, they don't seem to work correctly:

In [1]: from sympy.polys.densepolys import DensePoly

In [2]: DensePoly(x, x)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)

/media/sda2/Boulot/Projets/sympy-git/&amp;lt;ipython console&amp;gt; in &amp;lt;module&amp;gt;()

/media/sda2/Boulot/Projets/sympy-git/sympy/polys/densepolys.pyc in __init__(self, rep, dom, lev)
     10     def __init__(self, rep, dom, lev=None):
     11         if lev is None:
---&amp;gt; 12             rep, lev = dmp_validate(rep)
     13 
     14         self.rep = rep

NameError: global name 'dmp_validate' is not defined

In [3]: from sympy.polys.sparsepolys import SparsePoly

In [4]: SparsePoly(x, x)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)

/media/sda2/Boulot/Projets/sympy-git/&amp;lt;ipython console&amp;gt; in &amp;lt;module&amp;gt;()

TypeError: __init__() takes at least 4 arguments (3 given)
 

So they should either be fixed, documented and tested before the release, or be removed entirely (since they aren't used at all, they're probably not that useful).</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2371/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2371'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2371'/><author><name>Ronan.L...@gmail.com</name><uri>/u/101272611947379421629/</uri></author><issues:blocking><issues:id>1456</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1456</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2859</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:closedDate>2012-05-10T03:32:44.000Z</issues:closedDate><issues:id>2371</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-High</issues:label><issues:label>Polynomial</issues:label><issues:label>Milestone-Release0.7.2</issues:label><issues:label>NeedsReview</issues:label><issues:owner><issues:uri>/u/101069955704897915480/</issues:uri><issues:username>matt...@gmail.com</issues:username></issues:owner><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;DEACQX47eCl7ImA9WhJbEEw.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2142</id><published>2011-01-07T02:34:53.000Z</published><updated>2012-09-19T01:06:00.000Z</updated><title>Improve SymPyDeprecationWarning to show expected version for feature removal</title><content type='html'>Python 2.7 ignores DeprecationWarning by default (see http://docs.python.org/library/warnings.html#warning-categories).  The idea I think is that users don't want to be bombarded with deprecation warnings just because they are using a module or script where someone is using something deprecated.  

But I think we want to have it on in isympy so that people see it when they use deprecated sympy functionality.  The solution is in the -W flag to Python (see http://docs.python.org/library/warnings.html#the-warnings-filter).  Also, maybe we should create a SymPyDeprecationWarning and only turn those on.

And we should probably run the tests will all warnings turned on and turned into exceptions so that we avoid using warned behavior in the tests.  </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2142/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2142'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2142'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:closedDate>2012-09-19T01:06:00.000Z</issues:closedDate><issues:id>2142</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Milestone-Release0.7.2</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>3</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CEENSH47eCl7ImA9WhNTE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3043</id><published>2012-02-05T23:53:08.000Z</published><updated>2012-10-15T23:11:39.000Z</updated><title>NoSuchDisplayException in test_args</title><content type='html'>See the failure at http://reviews.sympy.org/report/agZzeW1weTNyDAsSBFRhc2sY_6wLDA.

I think the solution is to use import_module in the plotting module for pyglet, and possibly except this exception.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3043/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3043'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3043'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:closedDate>2012-10-15T23:11:39.000Z</issues:closedDate><issues:id>3043</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Critical</issues:label><issues:label>Plotting</issues:label><issues:label>Testing</issues:label><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>WontFix</issues:status></entry><entry gd:etag='W/&quot;DkMNRH47eCl7ImA9WhJbFEk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3404</id><published>2012-09-23T18:50:53.000Z</published><updated>2012-09-23T23:54:55.000Z</updated><title>Inkscape images for LaTeX Sphinx docs do not work</title><content type='html'>When I do make latex in the doc directory, I get

rm -rf sphinx
inkscape --file=src/modules/physics/mechanics/ex_rd.svg --export-area-drawing --without-gui --export-pdf=src/modules/physics/mechanics/ex_rd.pdf

(inkscape:62560): libgnomevfs-CRITICAL **: gboolean gnome_vfs_uri_is_local(const GnomeVFSURI *): assertion `uri != NULL' failed

** (inkscape:62560): WARNING **: Invalid URI

** (inkscape:62560): WARNING **: Error:  Could not open file 'src/modules/physics/mechanics/ex_rd.svg' with VFS


(inkscape:62560): libgnomevfs-CRITICAL **: gboolean gnome_vfs_uri_is_local(const GnomeVFSURI *): assertion `uri != NULL' failed

** (inkscape:62560): WARNING **: Invalid URI

** (inkscape:62560): WARNING **: Error:  Could not open file 'src/modules/physics/mechanics/ex_rd.svg' with VFS


** (inkscape:62560): WARNING **: Specified document src/modules/physics/mechanics/ex_rd.svg cannot be opened (does not exist or not a valid SVG file)
inkscape --file=src/modules/physics/mechanics/kin_1.svg --export-area-drawing --without-gui --export-pdf=src/modules/physics/mechanics/kin_1.pdf

(inkscape:62563): libgnomevfs-CRITICAL **: gboolean gnome_vfs_uri_is_local(const GnomeVFSURI *): assertion `uri != NULL' failed

** (inkscape:62563): WARNING **: Invalid URI

** (inkscape:62563): WARNING **: Error:  Could not open file 'src/modules/physics/mechanics/kin_1.svg' with VFS


and the same for all the mechanics svg files.  And indeed, they are not there when I do make all in the latex directory.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3404/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3404'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3404'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:cc><issues:uri>/u/102137482174297837682/</issues:uri><issues:username>julien.r...@gmail.com</issues:username></issues:cc><issues:closedDate>2012-09-23T23:54:55.000Z</issues:closedDate><issues:id>3404</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Critical</issues:label><issues:label>Documentation</issues:label><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>Invalid</issues:status></entry><entry gd:etag='W/&quot;CEAEQH47eCl7ImA9WhNTEUQ.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3437</id><published>2012-10-12T21:13:41.000Z</published><updated>2012-10-14T05:31:41.000Z</updated><title>Fails to install via pip - It appears 2to3 has been run on the codebase....</title><content type='html'>Hi,

I'm attempting to install sympy on 2.7.3 on OSX using pip.

I get the following error (see attached pip.log for full trace):

Victors-MacBook-Pro:~ victorhooi$ pip install sympy
Downloading/unpacking sympy
  Running setup.py egg_info for package sympy
    Traceback (most recent call last):
      File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 16, in &amp;lt;module&amp;gt;
      File &amp;quot;/var/folders/kf/wxn_svp54gsbs0ryy7k_6wdc0000gn/T/pip-build/sympy/setup.py&amp;quot;, line 36, in &amp;lt;module&amp;gt;
        import sympy
      File &amp;quot;sympy/__init__.py&amp;quot;, line 27, in &amp;lt;module&amp;gt;
        raise ImportError(&amp;quot;It appears 2to3 has been run on the codebase. Use &amp;quot;
    ImportError: It appears 2to3 has been run on the codebase. Use Python 3 or get the original source code.
    Complete output from command python setup.py egg_info:
    Traceback (most recent call last):

  File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 16, in &amp;lt;module&amp;gt;

  File &amp;quot;/var/folders/kf/wxn_svp54gsbs0ryy7k_6wdc0000gn/T/pip-build/sympy/setup.py&amp;quot;, line 36, in &amp;lt;module&amp;gt;

    import sympy

  File &amp;quot;sympy/__init__.py&amp;quot;, line 27, in &amp;lt;module&amp;gt;

    raise ImportError(&amp;quot;It appears 2to3 has been run on the codebase. Use &amp;quot;

ImportError: It appears 2to3 has been run on the codebase. Use Python 3 or get the original source code.

----------------------------------------
Command python setup.py egg_info failed with error code 1 in /var/folders/kf/wxn_svp54gsbs0ryy7k_6wdc0000gn/T/pip-build/sympy
Storing complete log in /Users/victorhooi/.pip/pip.log

Is sympy meant to be installed via Pip?

Cheers,
Victor</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3437/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3437'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3437'/><author><name>victorh...@gmail.com</name><uri>/u/115142101575949904886/</uri></author><issues:id>3437</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Critical</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A0MHRn47eCl7ImA9WhNTF0U.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3445</id><published>2012-10-21T03:17:17.000Z</published><updated>2012-10-21T03:17:17.000Z</updated><title>Automate the release process</title><content type='html'>As discussed in this mailing list thread (https://groups.google.com/d/topic/sympy/UfNhyFv-oMg/discussion) we need to automate our release process.  

I personally will not do any more releases until this is at least started, because it's just too much work for me.  Hence, I'm putting a blocker here on the next release.  If someone else wants to do the release without this, feel free however.

I encourage you to read that thread, because I wrote a lot of stuff there (and was also in a much more ranty mood about it than I am now), but in a nutshell, everything at http://github.com/sympy/sympy/wiki/new-release should be either automated, or removed.  All testing related things should be done constantly on all PRs, so that we avoid regressions in the first place.  And I literally mean everything. Unless it requires human thought (like writing the release notes), it should be in that script (and whatever does require human thought should be aided by that script however possible, e.g., something like http://stackoverflow.com/q/6502018/161801 would be useful).  This includes uploading tarballs to websites, posting announcements, and so on.  The whole release process should take no more than a day from beginning to end (and I only say &amp;quot;a day&amp;quot; instead of &amp;quot;an hour&amp;quot; because some operations might take some time to finish, like running the tests or something).

Also, whatever I said about the notebooks (i.e., issue 2940) is not actually a big issue at the moment, because we don't include the notebooks in the releases.  So we will need to worry about them only when we do.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3445/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3445'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3445'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3445</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Critical</issues:label><issues:label>Milestone-Release0.7.3</issues:label><issues:label>Testing</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;Ck4MQn47eCl7ImA9WhJbFU0.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3393</id><published>2012-09-02T17:36:57.000Z</published><updated>2012-09-24T15:36:23.000Z</updated><title>Equals passing None to Evalf / Evalf errors</title><content type='html'>There are issues with the expr.equals -&amp;gt; evalf -&amp;gt; mpf_cmp
   chain when using the failing_expression=True flag.

&amp;gt;&amp;gt;&amp;gt; from sympy import sympify
&amp;gt;&amp;gt;&amp;gt; e = sympify('-pi*Abs(1/log(n!)) + 1')
&amp;gt;&amp;gt;&amp;gt; e.equals(0)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;sympy/core/expr.py&amp;quot;, line 560, in equals
    constant = diff.is_constant(simplify=False, failing_number=True)
  File &amp;quot;sympy/core/expr.py&amp;quot;, line 491, in is_constant
    b = self._random(None, -1, 0, 1, 0)
  File &amp;quot;sympy/core/expr.py&amp;quot;, line 331, in _random
    nmag = abs(self.evalf(2, subs=reps))
  File &amp;quot;sympy/core/evalf.py&amp;quot;, line 1192, in evalf
    result = evalf(self, prec+4, options)
  File &amp;quot;sympy/core/evalf.py&amp;quot;, line 1100, in evalf
    r = rf(x, prec, options)
  File &amp;quot;sympy/core/evalf.py&amp;quot;, line 419, in evalf_add
    terms = [evalf(arg, prec + 10, options) for arg in v.args]
  File &amp;quot;sympy/core/evalf.py&amp;quot;, line 1100, in evalf
    r = rf(x, prec, options)
  File &amp;quot;sympy/core/evalf.py&amp;quot;, line 478, in evalf_mul
    re, im, re_acc, im_acc = evalf(arg, working_prec, options)
  File &amp;quot;sympy/core/evalf.py&amp;quot;, line 1100, in evalf
    r = rf(x, prec, options)
  File &amp;quot;sympy/core/evalf.py&amp;quot;, line 213, in evalf_abs
    return get_abs(expr.args[0], prec, options)
  File &amp;quot;sympy/core/evalf.py&amp;quot;, line 189, in get_abs
    re, im, re_acc, im_acc = evalf(expr, prec+2, options)
  File &amp;quot;sympy/core/evalf.py&amp;quot;, line 1100, in evalf
    r = rf(x, prec, options)
  File &amp;quot;sympy/core/evalf.py&amp;quot;, line 556, in evalf_pow
    re, im, re_acc, im_acc = evalf(base, prec+5, options)
  File &amp;quot;sympy/core/evalf.py&amp;quot;, line 1100, in evalf
    r = rf(x, prec, options)
  File &amp;quot;sympy/core/evalf.py&amp;quot;, line 712, in evalf_log
    imaginary_term = (mpf_cmp(xre, fzero) &amp;lt; 0)
  File &amp;quot;sympy/mpmath/libmp/libmpf.py&amp;quot;, line 555, in mpf_cmp
    ssign, sman, sexp, sbc = s
TypeError: 'NoneType' object is not iterable

  I originally ran into this issue trying to add functionality to the Relational class.  I tried adding a None clause to mpf_cmp, but the failing_expression=True flag still broke down with a similar error...  Someone familiar with the evalf/mpf_cmp functions should fix this.

~ David Rogers
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3393/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3393'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3393'/><author><name>predicti...@gmail.com</name><uri>/u/115457834069677517123/</uri></author><issues:cc><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:cc><issues:closedDate>2012-09-24T15:36:23.000Z</issues:closedDate><issues:id>3393</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Critical</issues:label><issues:label>NeedsReview</issues:label><issues:label>smichr</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;DEACQ347eCl7ImA9WhNSFk8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3434</id><published>2012-10-11T19:41:50.000Z</published><updated>2012-10-30T19:52:42.000Z</updated><title>warning when starting isympy</title><content type='html'>This is with 0.7.2.rc1. Can't we avoid a warning here?

$ ./bin/isympy 
/usr/lib64/python2.7/site-packages/matplotlib/__init__.py:908: UserWarning:  This call to matplotlib.use() has no effect
because the the backend has already been chosen;
matplotlib.use() must be called *before* pylab, matplotlib.pyplot,
or matplotlib.backends is imported for the first time.

  if warn: warnings.warn(_use_error_msg)

Welcome to pylab, a matplotlib-based Python environment [backend: TkAgg].
For more information, type 'help(pylab)'.
IPython console for SymPy 0.7.2.rc1 (Python 2.7.2-64-bit) (ground types: python)

These commands were executed:
&amp;gt;&amp;gt;&amp;gt; from __future__ import division
&amp;gt;&amp;gt;&amp;gt; from sympy import *
&amp;gt;&amp;gt;&amp;gt; x, y, z, t = symbols('x y z t')
&amp;gt;&amp;gt;&amp;gt; k, m, n = symbols('k m n', integer=True)
&amp;gt;&amp;gt;&amp;gt; f, g, h = symbols('f g h', cls=Function)

Documentation can be found at http://www.sympy.org

In [1]:</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3434/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3434'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3434'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:blockedOn><issues:id>3427</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:id>3434</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Critical</issues:label><issues:label>Plotting</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A0YDR347eCl7ImA9WhNTFEQ.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3440</id><published>2012-10-17T11:38:34.000Z</published><updated>2012-10-17T18:39:36.000Z</updated><title>sympy-0.7.2.win32.exe  is defect.</title><content type='html'>The file sympy-0.7.2.win32.exe is defect. It can not be executed. 
It seems that the size of 60 KB of the file is  extraordinary small for an executable install file.

Kind regards

Klaus</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3440/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3440'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3440'/><author><name>klaus-r...@t-online.de</name><uri>/u/103960211338966534209/</uri></author><issues:closedDate>2012-10-17T18:39:36.000Z</issues:closedDate><issues:id>3440</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Critical</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CkQFRX47eCl7ImA9WhNREko.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2626</id><published>2011-08-05T23:23:04.000Z</published><updated>2012-11-07T06:38:34.000Z</updated><title>Piecewise should use a different syntax for "otherwise"</title><content type='html'>This is something that's been bothering me for a while.  Piecewise has the following syntax (I quote the docstring):

Usage
=====
  Piecewise( (expr,cond), (expr,cond), ... )
    - Each argument is a 2-tuple defining a expression and condition
    - The conds are evaluated in turn returning the first that is True.
      If any of the evaluated conds are not determined explicitly False,
      e.g. x &amp;lt; 1, the function is returned in symbolic form.
    - If the function is evaluated at a place where all conditions are False,
      a ValueError exception will be raised.
    - Pairs where the cond is explicitly False, will be removed.

Examples
========
  &amp;gt;&amp;gt;&amp;gt; from sympy import Piecewise, log
  &amp;gt;&amp;gt;&amp;gt; from sympy.abc import x
  &amp;gt;&amp;gt;&amp;gt; f = x**2
  &amp;gt;&amp;gt;&amp;gt; g = log(x)
  &amp;gt;&amp;gt;&amp;gt; p = Piecewise( (0, x&amp;lt;-1), (f, x&amp;lt;=1), (g, True))
  &amp;gt;&amp;gt;&amp;gt; p.subs(x,1)
  1
  &amp;gt;&amp;gt;&amp;gt; p.subs(x,5)
  log(5)

The problem is the use of (g, True) for the &amp;quot;otherwise&amp;quot; condition.  The problem is that if a conditional reduces to True, then this will be interpreted as an &amp;quot;otherwise&amp;quot; condition rather than returning it.  

In [7]: Piecewise((f(x), x &amp;lt; 0), (x, 1 &amp;gt; 0))
Out[7]: 
⎧f(x)  for x &amp;lt; 0
⎨               
⎩ x    otherwise

This is also inconsistant in that it treats it correctly if only one condition is given:

In [6]: Piecewise((x, 1 &amp;gt; 0))
Out[6]: x

But this is just because it looks like an &amp;quot;otherwise&amp;quot; condition with no other conditions.  

By the way, slightly related is issue 2567.  

Unfortunately, this means breaking the syntax of Piecewise, but I think it should be done, as I'm quite convinced that the current way is wrong.

What's a better syntax?  Here's what Maple does:

piecewise(cond_1, f_1, cond_2, f_2, ..., cond_n, f_n, f_otherwise)

Although their conditions and functions are backwards (I like very much our (expr, cond) syntax), I think that making the last term the otherwise condition might work.

Or another option would be to make the otherwise condition a single element tuple.  This would have the advantage of potentially allowing Piecewise to return a Tuple without syntactical confusion.  

Indeed, I like this second option better.  So let's:

- Allow Piecewise((expr, cond), ..., (otherwise_expr,)) syntax
- Make Piecewise use the above syntax internally (i.e., for .args)
- Deprecate Piecewise(expr, cond), ..., (otherwise_expr, True)) syntax

This should be done before the next release, so we can start a deprecation cycle.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2626/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2626'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2626'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blocking><issues:id>2710</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2710</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:cc><issues:uri>/u/106486100774697058597/</issues:uri><issues:username>andy.ter...@gmail.com</issues:username></issues:cc><issues:cc><issues:uri>/u/104531927090589914088/</issues:uri><issues:username>ness...@gmail.com</issues:username></issues:cc><issues:cc><issues:uri>/u/104039945248245758823/</issues:uri><issues:username>ondrej.c...@gmail.com</issues:username></issues:cc><issues:id>2626</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-High</issues:label><issues:label>Milestone-Release0.7.3</issues:label><issues:stars>5</issues:stars><issues:state>open</issues:state><issues:status>Started</issues:status></entry><entry gd:etag='W/&quot;D0IDQ347eCl7ImA9WhJbF0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1887</id><published>2010-04-07T04:27:26.000Z</published><updated>2012-09-27T14:19:32.000Z</updated><title>Separate boolean and symbolic relationals</title><content type='html'>Well, it seems obvious that a Relational is a Boolean. The problem is that
there are a few places where Expr methods are called on them. </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1887/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1887'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1887'/><author><name>Ronan.L...@gmail.com</name><uri>/u/101272611947379421629/</uri></author><issues:blocking><issues:id>1924</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1931</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1932</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2620</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2721</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2721</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2832</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2960</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2979</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>3017</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>3105</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>3105</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:cc><issues:uri>/u/104531927090589914088/</issues:uri><issues:username>ness...@gmail.com</issues:username></issues:cc><issues:id>1887</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-High</issues:label><issues:label>Logic</issues:label><issues:label>Milestone-Release0.7.3</issues:label><issues:owner><issues:uri>/u/101272611947379421629/</issues:uri><issues:username>Ronan.L...@gmail.com</issues:username></issues:owner><issues:stars>4</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A08FR347eCl7ImA9WhNSFks.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2010</id><published>2010-08-05T20:58:25.000Z</published><updated>2012-10-31T07:50:16.000Z</updated><title>Integration with the full Risch Algorithm</title><content type='html'>I have ready in my integration3 branch a prototype risch_integrate() function, that is a user-level function for the full Risch Algorithm I have been implementing this summer.  Pull from http://github.com/asmeurer/sympy/tree/integration3.

This is NOT ready to go in.  It is a prototype function that I am making available so people can try out the new algorithm and hopefully help me to find the bugs in it.  Please pass it your favorite non-elementary integrals and see if it can determine that they are not elementary.  If you try to pass it a very crazy function at random, the chances are pretty high that it will not be elementary.  So a better way to test it is to come up with a crazy function, then differentiate it. Then pass the derivative and see if it can give you your original function back.  Note that it will probably not look exactly the same as your original function, and may differ by a constant.  You should verify by differentiating the result you get and calling cancel() (or simplify(), but usually cancel() is enough) on the difference.

So you can review the code too, if you like, but just know that things are not stable yet, and this isn't strictly a branch for review.  

So far, this function only supports exponentials and logarithms.
Support for trigonometric functions is planned.  Algebraic functions are
not supported. If the function returns an unevaluated Integral, it means
that it has proven the integral to be non-elementary.  Note that several
cases are still not implemented, so you may get NotImplementedError
instead. Eventually, these will all be eliminated, and the only
NotImplementedError you should see from this function is
NotImplementedError(&amp;quot;Algebraic extensions are not supported.&amp;quot;)

This function has not been integrated in any way with the already
existing integrate() yet, and you can use it to compare.

Examples:

In [1]: risch_integrate(exp(x**2), x)
Out[1]:
⌠
⎮  ⎛ 2⎞
⎮  ⎝x ⎠
⎮ ℯ     dx
⌡

In [2]: risch_integrate(x**100*exp(x), x).diff(x)
Out[2]:
 100  x
x   ⋅ℯ

In [3]: %timeit risch_integrate(x**100*exp(x), x).diff(x)
1 loops, best of 3: 270 ms per loop

In [4]: integrate(x**100*exp(x), x)
... hangs ...

In [5]: risch_integrate(x/log(x), x)
Out[5]:
⌠
⎮   x
⎮ ────── dx
⎮ log(x)
⌡

In [6]: risch_integrate(log(x)**10, x).diff(x)
Out[6]:
   10
log  (x)

In [7]: integrate(log(x)**10, x).diff(x)
Out[7]:
   10
log  (x)

In [8]: %timeit risch_integrate(log(x)**10, x).diff(x)
10 loops, best of 3: 159 ms per loop

In [9]: %timeit integrate(log(x)**10, x).diff(x)
1 loops, best of 3: 2.35 s per loop

Be warned that things are still very buggy and you should always verify
results by differentiating.  Usually, cancel(diff(result, x) - result)
should be enough.  This should go to 0.

So please, please, PLEASE, try out this function and report any bugs that you find.  It is not necessary to report NotImplementedError bugs, because I already know about those (I put them in there), and as I mentioned above, they are all planned to disappear.  Also, I am continually updating my branch with fixes, so you should do a &amp;quot;git pull&amp;quot; and try again before you report anything.

Also, I am aware that there are test failures.  This is because I had to hack exp._eval_subs() to only do exact substitution (no algebraic substitution).  It's just a quick hack workaround, and I should eventually get a real fix.  

Finally, I'm thinking there needs to be a way to differentiate between an unevaluated Integral because the integrator failed and an unevaluated Integral because it has proven the integral to be non-elementary.  Any ideas?</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2010/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2010'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2010'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blockedOn><issues:id>1280</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:blockedOn><issues:id>1949</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:blockedOn><issues:id>2026</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:blockedOn><issues:id>2031</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:blockedOn><issues:id>2040</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:blockedOn><issues:id>2402</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:blockedOn><issues:id>3401</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:blocking><issues:id>294</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>334</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>829</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1054</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1277</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1576</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1704</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1793</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1892</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1988</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1989</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2277</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:cc><issues:uri>/u/101069955704897915480/</issues:uri><issues:username>matt...@gmail.com</issues:username></issues:cc><issues:id>2010</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Integration</issues:label><issues:label>Polynomial</issues:label><issues:label>Milestone-Release0.7.3</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>3</issues:stars><issues:state>open</issues:state><issues:status>Started</issues:status></entry><entry gd:etag='W/&quot;DEACQ347eCl7ImA9WhNSFk8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2987</id><published>2012-01-12T23:15:42.000Z</published><updated>2012-10-30T19:52:42.000Z</updated><title>Change the behaviour of the deprecated Plot()</title><content type='html'>Delete proxy_pyglet.py and correct all the docstrings.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2987/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2987'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2987'/><author><name>krastano...@gmail.com</name><uri>/u/100157245271348669141/</uri></author><issues:blockedOn><issues:id>2845</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:id>2987</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Milestone-Release0.7.3</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CE4GRH47eCl7ImA9WhNSE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1047</id><published>2008-08-26T19:30:22.000Z</published><updated>2012-10-27T15:48:45.000Z</updated><title>Suggested new assumption system</title><content type='html'>So, this has been discussed before, but I don't think we have had an issue
for it.

Relational and Logic classes grow the ability to act as context managers. Thus:

    with x &amp;gt; 0:
        y = sqrt(x**2)

Multiple assumptions (a sequence of assumptions is treated as And, so the
first two are equivalent):

    with And(x &amp;gt; 0, y &amp;gt; 0):
        ...

    with x &amp;gt; 0, y &amp;gt; 0:
        ...

    with Or(x &amp;gt; 0, y &amp;gt; 0):
        ...

Separating assumptions from Basic instance creation is significantly
faster, removing the need for caching in most cases (this is what we found
in sympycore).

Even when assumptions are used heavily, this should not be much slower than
the present system. When entering the assumption context x &amp;gt; 0, the truth
values of x &amp;gt;= 0, is_real(x), x &amp;lt; 0, is_imaginary(x), etc, can be
calculated and cached immediately. Then, the first thing __new__ in
Relational and Logic classes needs to do is to lookup if (lhs, rhs) is
cached, and in that case just return True or False. Accordingly, we should
be able to write &amp;quot;x &amp;gt; 0&amp;quot; instead of &amp;quot;x.is_positive&amp;quot;, and it should be
nearly as fast.

For Python 2.4 compatibility, straight functions for setting/clearing
assumptions can be introduced.

Relevant functions (simplify, limit, integrate, etc) also get an
assumptions keyword option, so:

    simplify(abs(x), assumptions=x &amp;gt; 0)

Some functions should set assumptions automatically. For example, Sum.doit
should assume its index variables to be integers, and we might want
expand(complex=True) to assume symbols to be real like Mathematica does, etc.

In addition, some possible new functions (maybe with other names):

eval_assuming(f, assumptions=x &amp;gt; 0) -- evaluates f() with given
assumptions; i.e. equivalent to the with statement for a single expression

refine(expr, assumptions=x &amp;gt; 0) -- same as Refine in Mathematica,
reevaluates expr with given assumptions</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1047/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1047'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1047'/><author><name>fredrik....@gmail.com</name><uri>/u/111502149103757882156/</uri></author><issues:blocking><issues:id>353</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>398</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>848</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1051</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1244</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1253</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:cc><issues:uri>/u/101272611947379421629/</issues:uri><issues:username>Ronan.L...@gmail.com</issues:username></issues:cc><issues:id>1047</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-High</issues:label><issues:label>Assumptions</issues:label><issues:label>Milestone-Release0.8.0</issues:label><issues:stars>15</issues:stars><issues:state>open</issues:state><issues:status>Started</issues:status></entry><entry gd:etag='W/&quot;DEACQ347eCl7ImA9WhNSFk8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2845</id><published>2011-11-14T21:16:03.000Z</published><updated>2012-10-30T19:52:42.000Z</updated><title>Integrating the new plotting module</title><content type='html'>There is a new plotting module in pull request 673.

It should be ready for the next release.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2845/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2845'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2845'/><author><name>krastano...@gmail.com</name><uri>/u/100157245271348669141/</uri></author><issues:blocking><issues:id>1314</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2987</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2987</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:cc><issues:uri>/u/112791612514943977027/</issues:uri><issues:username>catchmrb...@gmail.com</issues:username></issues:cc><issues:id>2845</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Plotting</issues:label><issues:label>EasyToFix</issues:label><issues:label>Documentation</issues:label><issues:label>DeprecationRemoval</issues:label><issues:label>Milestone-Release0.8.0</issues:label><issues:label>CodeInMultiple</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:owner><issues:uri>/u/100157245271348669141/</issues:uri><issues:username>krastano...@gmail.com</issues:username></issues:owner><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;AkEBRn47eCl7ImA9WhNSFkw.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2026</id><published>2010-08-17T06:27:21.000Z</published><updated>2012-10-30T17:37:37.000Z</updated><title>Exact, algebraic, and integer_power substitution</title><content type='html'>This has been discussed several times, but I don't think an issue has ever been created for it.  There needs to be a way to bypass all the algebraic tricks that subs uses, such as these:

In [1]: exp(2*x).subs(exp(x), y)
Out[1]: 
 2
y 

In [2]: (x + 1).subs(x + 2, y)
Out[2]: -1 + y

The first one in particular was screwing me up for the Risch Algorithm (issue 2010), so I had to temporarily disable entirely it in my branch.  

Now don't get me wrong. There are times when I want subs to be as smart as possible (there are cases of this in the Risch Algorithm too, actually), but there are also times when I don't.  So there needs to be a flag expr.subs(old, new, exact=True) that only does substitution if the expression old is exactly in expr.  </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2026/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2026'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2026'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blockedOn><issues:id>1836</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:blocking><issues:id>2010</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2010</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2081</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:cc><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:cc><issues:id>2026</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-High</issues:label><issues:label>Matching</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>4</issues:stars><issues:state>open</issues:state><issues:status>Started</issues:status></entry><entry gd:etag='W/&quot;C0YMSH47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2367</id><published>2011-05-12T08:09:31.000Z</published><updated>2012-11-08T02:19:49.000Z</updated><title>SymPy's readthedocs documentation is broken</title><content type='html'>See http://readthedocs.org/docs/sympy/en/latest/.  It just shows

&amp;quot;&amp;quot;&amp;quot;
This is an automaticaly generated API documentation from SymPy sources.

Click the “modules” (Module Index) link in the top right corner to browse the modules.

Or click the “index” to see an index of all SymPy functions, methods and classes.
&amp;quot;&amp;quot;&amp;quot;

and that's it.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2367/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2367'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2367'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:cc><issues:uri>/u/104039945248245758823/</issues:uri><issues:username>ondrej.c...@gmail.com</issues:username></issues:cc><issues:id>2367</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-High</issues:label><issues:label>Documentation</issues:label><issues:label>EasyToFix</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>4</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DEAERX47eCl7ImA9WhNSEE8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1263</id><published>2009-01-13T09:58:34.000Z</published><updated>2012-10-23T21:11:44.000Z</updated><title>Invalid movement of roots across fractions</title><content type='html'>These came up while implementing the Wester tests. Basically, sqrt(1/z) is
being treated as equal to 1/sqrt(z)m but they are not in the case where z
is on the negative real axis. For example, if z=-1, then sqrt(1/-1) ==
sqrt(-1) == I, but 1/sqrt(-1) == 1/I == -I.

@XFAIL
def test_K8():
    z = Symbol('z', complex=True)
    # WrongResult!
    assert simplify(sqrt(1/z) - 1/sqrt(z)) != 0
    z = symbols('z', complex=True, negative=False)
    assert simplify(sqrt(1/z) - 1/sqrt(z)) == 0

def test_K9():
    z = Symbol('z', real=True, positive=True)
    assert simplify(sqrt(1/z) - 1/sqrt(z)) == 0

@XFAIL
def test_K10():
    # WrongResult!
    z = Symbol('z', real=True, negative=True)
    assert simplify(sqrt(1/z) + 1/sqrt(z)) == 0
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1263/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1263'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1263'/><author><name>robert.kern@gmail.com</name><uri>/u/robert.kern@gmail.com/</uri></author><issues:cc><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:cc><issues:cc><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:cc><issues:cc><issues:uri>/u/Vinzent.Steinberg@gmail.com/</issues:uri><issues:username>Vinzent.Steinberg@gmail.com</issues:username></issues:cc><issues:cc><issues:uri>/u/101272611947379421629/</issues:uri><issues:username>Ronan.L...@gmail.com</issues:username></issues:cc><issues:cc><issues:uri>/u/104039945248245758823/</issues:uri><issues:username>ondrej.c...@gmail.com</issues:username></issues:cc><issues:closedDate>2010-06-15T16:25:46.000Z</issues:closedDate><issues:id>1263</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-High</issues:label><issues:label>NeedsReview</issues:label><issues:label>Milestone-Release0.7.0</issues:label><issues:owner><issues:uri>/u/robert.kern@gmail.com/</issues:uri><issues:username>robert.kern@gmail.com</issues:username></issues:owner><issues:stars>3</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;C0UGR347eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2801</id><published>2011-10-27T09:17:16.000Z</published><updated>2012-11-08T02:20:26.000Z</updated><title>lambdify() is not mentioned anywhere</title><content type='html'>lambdify() is one of most important functions in SymPy (for interoperability with numerical libraries the most important). However it's not mentioned anywhere, although it has a good docstring. The result of `git grep` stands for itself:

$ git grep lambdify doc/
doc/src/aboutus.txt:#. Sebastian Krämer: implemented lambdify/numpy/mpmath cooperation, bug fixes, refactoring, lambdifying of matrices, large printing refactoring and bugfixes
doc/src/aboutus.txt:#. Andrew Straw: lambdify() improvements
doc/src/aboutus.txt:#. Matthew Brett: fixes to lambdify
doc/src/modules/physics/mechanics/examples.txt:maximum recursion depth being exceeded; I also tried lambdifying this, and it

lambdify's docstring must be pulled into docs (there is already a generic issue for this), but we also need a good tutorial showing users how to cooperate with NumPy, SciPy etc. This issue (not the only one by the way) was pointed out to me by Fernando Perez during my stay at Berkeley this week, when trying to solve a practical symbolic-numeric problem. SymPy has already *a lot* of features, but unfortunately most of them are deeply buried in the internals of SymPy and known only to its developers. Also we have to check what does ufuncify() do, because it was reported to me that it's extremely slow.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2801/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2801'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2801'/><author><name>matt...@gmail.com</name><uri>/u/101069955704897915480/</uri></author><issues:id>2801</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-High</issues:label><issues:label>Documentation</issues:label><issues:label>CodeInCategory-Documentation</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>3</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;C0QGSH47eCl7ImA9WhNTEkg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1100</id><published>2008-09-15T15:43:11.000Z</published><updated>2012-10-14T21:48:49.000Z</updated><title>integrate(exp(-I*2*pi*y*x)*x, (x, -oo, oo)) is wrong</title><content type='html'>In [5]: integrate(exp(-I*2*pi*y*x)*x, (x, -oo, oo))
Out[5]: 
                       -ⅈ⋅y     -ⅈ⋅y 
                       ────     ──── 
   -ⅈ⋅y     -ⅈ⋅y        0        0   
ⅈ⋅0        0        ⅈ⋅ℯ        ℯ     
─────── - ─────── + ─────── + ───────
  0⋅y        2  2     0⋅y        2  2
          4⋅π ⋅y              4⋅π ⋅y 

In [6]: integrate(exp(-I*2*pi*y*x)*x, x)
Out[6]: 
 -2⋅π⋅ⅈ⋅x⋅y        -2⋅π⋅ⅈ⋅x⋅y
ℯ             ⅈ⋅x⋅ℯ          
─────────── + ───────────────
     2  2          2⋅π⋅y     
  4⋅π ⋅y                     


[5] is wrong, [6] is ok.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1100/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1100'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1100'/><author><name>ondrej.c...@gmail.com</name><uri>/u/104039945248245758823/</uri></author><issues:blockedOn><issues:id>2280</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:closedDate>2011-04-29T09:01:07.000Z</issues:closedDate><issues:id>1100</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-High</issues:label><issues:label>WrongResult</issues:label><issues:label>Integration</issues:label><issues:label>sapta.iitkgp</issues:label><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CEYESX47eCl7ImA9WhNTEkg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2307</id><published>2011-04-25T04:11:38.000Z</published><updated>2012-10-14T22:01:48.000Z</updated><title>as_coeff_mul()[0] != as_coeff_Mul()[0] when the coeff is Number (not Rational)</title><content type='html'>Expr.as_coeff_mul and Expr.as_coeff_Mul do similar things and have confusingly similar names. They should be merged.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2307/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2307'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2307'/><author><name>Ronan.L...@gmail.com</name><uri>/u/101272611947379421629/</uri></author><issues:blocking><issues:id>2308</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2308</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:cc><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:cc><issues:id>2307</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-High</issues:label><issues:owner><issues:uri>/u/101272611947379421629/</issues:uri><issues:username>Ronan.L...@gmail.com</issues:username></issues:owner><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;Ck8CRn47eCl7ImA9WhJbEUg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2597</id><published>2011-07-23T09:47:14.000Z</published><updated>2012-09-20T14:21:07.000Z</updated><title>Import all public functions and classes into Sphinx</title><content type='html'>There are some methods that do have docstrings, but are not shown in the documentation (docs.sympy.org).

For example, method norm in matrices.matrices.py has a docstring, but is not shown in http://docs.sympy.org/dev/modules/matrices.html. I thought that the bad formatting (there is no blank line after the first line of docstring) of the docstring might be the reason for this, but there are other methods with baddly formatted docstrings, that are properly shown in the documentation (e.g. method is_symmetric for matrices.matrices.py).</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2597/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2597'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2597'/><author><name>tlora...@gmail.com</name><uri>/u/100384909468289777272/</uri></author><issues:blocking><issues:id>2888</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2888</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:closedDate>2012-01-13T21:09:50.000Z</issues:closedDate><issues:id>2597</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-High</issues:label><issues:label>Documentation</issues:label><issues:label>CodeInDifficulty-Hard</issues:label><issues:label>CodeInCategory-Documentation</issues:label><issues:label>CodeInMultiple</issues:label><issues:label>CodeInImportedIntoMelange</issues:label><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;C0QMSX47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2639</id><published>2011-08-17T01:37:30.000Z</published><updated>2012-11-08T02:23:08.000Z</updated><title>Product() is seriously broken</title><content type='html'>Unlike other unevaluated operators, Product() is not always unevaluated.  Attempted evaluation should be the job of product().  This is how Sum/summation works:

In [2]: Product(n, (n, 1, 2))
Out[2]: 2

In [3]: Sum(n, (n, 1, 2))
Out[3]: 
  2    
 __    
 \ `   
  )   n
 /_,   
n = 1  

In [4]: product(n, (n, 1, 2))
Out[4]: 2

In [5]: summation(n, (n, 1, 2))
Out[5]: 3</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2639/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2639'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2639'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blockedOn><issues:id>2214</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:blocking><issues:id>2636</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:cc><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:cc><issues:id>2639</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-High</issues:label><issues:label>Concrete</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DEACQ347eCl7ImA9WhNSFk8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3427</id><published>2012-10-09T00:19:42.000Z</published><updated>2012-10-30T19:52:42.000Z</updated><title>Speed of import with external modules</title><content type='html'>SymPy can take a while to import if matplotlib is installed because matplotlib is imported when sympy is, due to the way plotting.py is structured.  See https://groups.google.com/d/topic/sympy/j-zpYenp0SA/discussion.  Numpy is also imported as well (you can see if a module is imported by checking sys.modules after importing sympy).

I was playing around with making import_module import lazily.  That work is at https://github.com/asmeurer/sympy/tree/deferred_import.  I'm not sure if it's a good idea, though.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3427/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3427'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3427'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blocking><issues:id>3434</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:id>3427</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-High</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DUINSX47eCl7ImA9WhJbF0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/345</id><published>2007-09-09T17:26:10.000Z</published><updated>2012-09-27T14:53:18.000Z</updated><title>implement _sage_ methods</title><content type='html'>As agreed in this thread:

http://groups.google.com/group/sympy/browse_thread/thread/34f0e3a7e598e13/dacdd250422a3e9e

we need to implement _sage_ methods, so that sympy can be used in SAGE more
natively. This is high priority, because this will help sympy to be much
more widespread. And we need more developers.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/345/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=345'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/345'/><author><name>ondrej.c...@gmail.com</name><uri>/u/104039945248245758823/</uri></author><issues:id>345</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-High</issues:label><issues:label>crisjss</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;C0MARX47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2786</id><published>2011-10-25T01:57:31.000Z</published><updated>2012-11-08T02:24:04.000Z</updated><title>Fill in missing tests for sympy.physics module in test_args.py</title><content type='html'>All tests decorated with @SKIP(&amp;quot;TODO: sympy.physics&amp;quot;) must be fixed.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2786/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2786'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2786'/><author><name>matt...@gmail.com</name><uri>/u/101069955704897915480/</uri></author><issues:id>2786</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-High</issues:label><issues:label>CodeInCategory-QA</issues:label><issues:label>Core</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DEQBQn47eCl7ImA9WhNSF0U.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3155</id><published>2012-03-17T00:44:04.000Z</published><updated>2012-11-01T16:12:33.000Z</updated><title>simplification of logical expressions</title><content type='html'>
I'm new to sympy, and I'm using it to create complex logical expressions and try to simplify them. I got an error, and tracked it down to:

a = sympy.Symbol('x1')
exprSP = sympy.Not(a)
sympy.simplify(exprSP)
Traceback (most recent call last):
  File &amp;quot;C:\Program Files (x86)\Wing IDE 101 4.1\src\debug\tserver\_sandbox.py&amp;quot;, line 1, in &amp;lt;module&amp;gt;
    # Used internally for debug sandbox under external interpreter
  File &amp;quot;C:\Python27\Lib\site-packages\sympy\simplify\simplify.py&amp;quot;, line 1627, in simplify
    expr = together(cancel(powsimp(expr)).expand())
  File &amp;quot;C:\Python27\Lib\site-packages\sympy\polys\polytools.py&amp;quot;, line 5208, in cancel
    p, q = f.as_numer_denom()
AttributeError: 'Not' object has no attribute 'as_numer_denom'

Any ideas?

Thanks

Carlos</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3155/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3155'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3155'/><author><name>carlosha...@gmail.com</name><uri>/u/100961447717034189583/</uri></author><issues:id>3155</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-High</issues:label><issues:label>Logic</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;C0ABSH47eCl7ImA9WhJbFE4.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3374</id><published>2012-08-24T20:45:13.000Z</published><updated>2012-09-23T20:22:39.000Z</updated><title>Change SymPy Live to HRD</title><content type='html'>I just got this email from Google:

Dear App Engine Developer, 

We’ve noticed that you are running at least one application configured to use the Master/Slave (M/S) datastore. This application configuration was officially deprecated on April 4, 2012, in accordance with our deprecation policy, in favor of the more reliable High Replication Datastore (HRD). HRD uses the Paxos algorithm to serve your application out of multiple datacenters, meaning better redundancy in the face of datacenter issues, more consistent datastore performance, and no planned downtime. 

When we deprecated the M/S datastore, we introduced a migration tool that allows you to easily migrate all your datastore and blobstore data to a new HRD application. Migrating your application will not require you to change your application’s URL, whether it serves from appspot.com or a custom domin. Please note that even if your application does not store any data in the datastore, it will still benefit from the automated datacenter failover that is only available to HRD applications. 

Before migrating your application, you should read about the differences between M/S and HRD, and understand how the consistency policy for HRD might affect the queries in your application. 

All HRD applications that have billing enabled are covered by App Engine’s 99.95% uptime SLA. Along with the substantial reliability improvements, many new App Engine features are only being made available to HRD applications, including the Python 2.7 language option, Full Text Search (FTS), and Page Speed integration. 

We strongly encourage you to migrate your applications as soon as possible. If you have technical questions about HRD or the migration process, you can post them to Stack Overflow. Any general migration discussions can be posted to our Google Group. 


Thank You,

The App Engine Team 

© 2012 Google Inc. 1600 Amphitheatre Parkway, Mountain View, CA 94043 
You have received this mandatory email service announcement to update you about important changes to your Google App Engine account.

Also, many of the words in the email were hyperlinked, so let me know if something is not clear. 

So we need to see how to fix this. I think SymPy Gamma probably needs to be fixed as well. </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3374/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3374'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3374'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blocking><issues:id>2649</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:cc><issues:uri>/u/104039945248245758823/</issues:uri><issues:username>ondrej.c...@gmail.com</issues:username></issues:cc><issues:id>3374</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-High</issues:label><issues:label>Live</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DUQGRH47eCl7ImA9WhJaGEs.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3429</id><published>2012-10-09T09:32:19.000Z</published><updated>2012-10-10T11:08:45.000Z</updated><title>Solve does not work for non-linear equations with large numbers.</title><content type='html'>This worked in Sympy 0.7.1 but not in SymPy 0.7.2-RC1:

x = Symbol('x')
y = Symbol('y')
solve([327600995*x**2 - 37869137*x + 1809975124*y**2 - 9998905626, 895613949*x**2 - 273830224*x*y + 530506983*y**2 - 10000000000], y, x)</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3429/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3429'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3429'/><author><name>roeland....@gmail.com</name><uri>/u/103368556974859032297/</uri></author><issues:cc><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:cc><issues:closedDate>2012-10-10T08:44:26.000Z</issues:closedDate><issues:id>3429</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-High</issues:label><issues:label>Solvers</issues:label><issues:label>NeedsReview</issues:label><issues:label>smichr</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;A0QCSH47eCl7ImA9WhNSEUw.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3454</id><published>2012-10-24T06:39:05.000Z</published><updated>2012-10-24T22:56:09.000Z</updated><title>Search is broken in the documentation</title><content type='html'>If you try to search for something at docs.sympy.org, it doesn't work.

This happened before, and it was related to the SymPy Live shell.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3454/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3454'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3454'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3454</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-High</issues:label><issues:label>Documentation</issues:label><issues:label>Live</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;Ck8ARn47eCl7ImA9WhNSFEg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/694</id><published>2008-02-10T11:09:15.000Z</published><updated>2012-10-28T19:00:47.000Z</updated><title>Add tests from "Review of CAS mathematical capabilities", by Michael Wester</title><content type='html'>Go through the 1994 paper &amp;quot;Review of CAS mathematical capabilities&amp;quot;, by
Michael Wester, available for example here:

http://www.math.unm.edu/~wester/cas/book/Wester.pdf

And write tests for each of the example in there if sympy can do it, or a
new issue if it cannot. Together with fixing the issue 688, this should
produce a nice documentation of how to do the ususal things in sympy.

See also:

http://www.sagemath.org/doc/html/ref/module-sage.calculus.wester.html</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/694/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=694'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/694'/><author><name>ondrej.c...@gmail.com</name><uri>/u/104039945248245758823/</uri></author><issues:cc><issues:uri>/u/104039945248245758823/</issues:uri><issues:username>ondrej.c...@gmail.com</issues:username></issues:cc><issues:id>694</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>EasyToFix</issues:label><issues:stars>11</issues:stars><issues:state>open</issues:state><issues:status>Started</issues:status></entry><entry gd:etag='W/&quot;CkACRH47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/93</id><published>2007-04-27T12:05:36.000Z</published><updated>2012-11-08T02:12:45.000Z</updated><title>Square root denesting</title><content type='html'>Just an idea: implement the &amp;quot;square root denesting&amp;quot; ideas of
http://www.almaden.ibm.com/cs/people/fagin/symb85.pdf
doesn't look to complicated.
I am happy to work on this after the prettyprinter works: that we can see what we are doing :-)

- Jurjen</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/93/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=93'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/93'/><author><name>jne...@gmail.com</name><uri>/u/105448442912468869732/</uri></author><issues:cc><issues:uri>/u/107755593449647463741/</issues:uri><issues:username>mario.pe...@gmail.com</issues:username></issues:cc><issues:id>93</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>GHOP</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>9</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CkEMQX47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/16</id><published>2007-02-28T12:35:06.000Z</published><updated>2012-11-08T02:11:20.000Z</updated><title>objects with indices (tensors)</title><content type='html'>Let's get inspired by ginac. This code should make it easy to compute for
example einstein equations from the (symbolic) metric tensor. We can do it
already now, but it would be nice to type in equations in the index form as
found in the general relativity books and then just plug in a symbolic
matrix for the metric tensor, and it would figure all the rest by itself. </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/16/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=16'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/16'/><author><name>ondrej.c...@gmail.com</name><uri>/u/104039945248245758823/</uri></author><issues:cc><issues:uri>/u/103500662502582311887/</issues:uri><issues:username>robert.c...@gmail.com</issues:username></issues:cc><issues:id>16</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:stars>7</issues:stars><issues:state>open</issues:state><issues:status>NeedsDecision</issues:status></entry><entry gd:etag='W/&quot;DkAFRH47eCl7ImA9WhNSFUg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1941</id><published>2010-05-15T22:43:11.000Z</published><updated>2012-10-29T23:51:55.000Z</updated><title>Objects that know how to combine themselves</title><content type='html'>This is related to issue 1908.  When I met with Ondrej last summer, we worked on a core where 
objects knew how to combine themselves with respect to Mul and Add.  See the handler branch at 
http://github.com/certik/sympyx/.  The idea originally stemmed from issue 1336, but we soon 
discovered that it also simplifies the logic for things like O() (the order function), and oo, which 
combine abnormally with respect to Mul and Add.  This could also be useful for issue 1940, so that 
the units could tell Mul that they need to stay together without Mul explicitly having to know about 
units.  Right now, Mul.flatten is cluttered with code for handling all these things, and the only way 
to handle additional classes is to either completely separate them from Basic (as with Poly), or to 
add more special case code in Mul.flatten.  

Anyway, if we ever rework the core as suggested in issue 1908 or elsewhere, we should also look 
into doing this too.  </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1941/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1941'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1941'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blockedOn><issues:id>1884</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:blockedOn><issues:id>1908</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:blocking><issues:id>1336</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>3121</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:id>1941</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>7</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;C0EBQ347eCl7ImA9WhNTEkk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/823</id><published>2008-04-28T16:32:09.000Z</published><updated>2012-10-14T19:07:32.000Z</updated><title>laplace, div, grad</title><content type='html'>We need this functionality in sfepy.

Attaching my first attempt. Any ideas about the syntax are welcome.

When the code gets more mature, I'll prepare a patch+tests.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/823/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=823'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/823'/><author><name>ondrej.c...@gmail.com</name><uri>/u/104039945248245758823/</uri></author><issues:cc><issues:uri>/u/104039945248245758823/</issues:uri><issues:username>ondrej.c...@gmail.com</issues:username></issues:cc><issues:id>823</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:label>NeedsBetterPatch</issues:label><issues:label>ondrej.certik</issues:label><issues:stars>6</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;C08CRn47eCl7ImA9WhNREU4.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/880</id><published>2008-06-09T22:30:28.000Z</published><updated>2012-11-05T16:11:07.000Z</updated><title>Remove Matrix.__hash__</title><content type='html'>&amp;gt; In [1]: m = Matrix([1, 2, 3])
&amp;gt; 
&amp;gt; In [2]: hash(m)
&amp;gt; Out[2]: 141394220
&amp;gt; 
&amp;gt; In [3]: m.hash()
&amp;gt; Out[3]: 457565325</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/880/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=880'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/880'/><author><name>ondrej.c...@gmail.com</name><uri>/u/104039945248245758823/</uri></author><issues:id>880</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:stars>5</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEIDQH47eCl7ImA9WhNSFk8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1696</id><published>2009-11-06T09:27:48.000Z</published><updated>2012-10-30T18:42:51.000Z</updated><title>integral of heaviside</title><content type='html'>sympy seems to be unable to compute the integral of a Heaviside function

f=Heaviside(x)
g=integrate(f,(x,0,1))
float(g)
#ValueError: Symbolic value, can't compute
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1696/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1696'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1696'/><author><name>magosany...@gmail.com</name><uri>/u/106717656539804830979/</uri></author><issues:id>1696</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Integration</issues:label><issues:stars>5</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DUABQ347eCl7ImA9WhNSF0o.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1850</id><published>2010-03-06T19:06:41.000Z</published><updated>2012-11-01T13:49:12.000Z</updated><title>solve_linear_system contains duplicate rref algorithm</title><content type='html'>It seems that we have two different rref (reduced row echelon form) algorithms, one in 
Matrix.rref and one in solve_linear_system in solvers.py.  I don't know too much about these 
algorithms, so I don't know if they really are the same algorithm, but in either case, I think 
solve should just be calling Matrix.rref.

This might speed things up too (examples taken from Lay's Linear Algebra, Third Edition):

In [15]: c = Matrix([[1, -2, 1, 0],[0, 2, -8, 8],[-4, 5, 9, -9]])

In [16]: c
Out[16]: 
⎡1   -2  1   0 ⎤
⎢              ⎥
⎢0   2   -8  8 ⎥
⎢              ⎥
⎣-4  5   9   -9⎦

In [17]: c.rref()
Out[17]: 
⎛⎡1  0  0  29⎤, [0, 1, 2]⎞
⎜⎢           ⎥           ⎟
⎜⎢0  1  0  16⎥           ⎟
⎜⎢           ⎥           ⎟
⎝⎣0  0  1  3 ⎦           ⎠

In [19]: solve_linear_system(c, x, y, z)
Out[19]: {x: 29, y: 16, z: 3}

In [25]: %timeit solve_linear_system(c, x, y, z)
100 loops, best of 3: 11.2 ms per loop

In [26]: %timeit c.rref()
1000 loops, best of 3: 3.59 ms per loop

In [30]: e = Matrix([[4, -1, -1, 0, 0, 0, 0, 0, 5],[-1, 4, 0, -1, 0, 0, 0, 0, 15],[-1, 0, 4, -1, -1, 0, 0, 
0, 0],[0, -1, -1, 4, 0, -1, 0, 0, 10],[0, 0, -1, 0, 4, -1, -1, 0, 0],[0, 0, 0, -1, -1, 4, 0, -1, 10],[0, 0, 
0, 0, -1, 0, 4, -1, 20],[0, 0, 0, 0, 0, -1, -1, 4, 30]])

In [32]: e.rref()
Out[32]: 
&amp;lt;output omitted&amp;gt;

In [33]: var('x1 x2 x3 x4 x5 x6 x6 x7 x8')
Out[33]: (x₁, x₂, x₃, x₄, x₅, x₆, x₆, x₇, x₈)

In [34]: solve_linear_system(e, x1, x2, x3, x4, x5, x6, x7, x8)
Out[34]: 
⎧    827      1377      886      1546      1171      1831      1967      2517⎫
⎨x₁: ───, x₂: ────, x₃: ───, x₄: ────, x₅: ────, x₆: ────, x₇: ────, x₈: 
────⎬
⎩    209      209       209      209       209       209       209       209 ⎭

In [35]: %timeit e.rref()
10 loops, best of 3: 65 ms per loop

In [36]: %timeit solve_linear_system(e, x1, x2, x3, x4, x5, x6, x7, x8)
10 loops, best of 3: 84.5 ms per loop
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1850/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1850'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1850'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>1850</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Solvers</issues:label><issues:label>Matrices</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>5</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;C0EMQH47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2632</id><published>2011-08-11T08:56:31.000Z</published><updated>2012-11-08T02:28:01.000Z</updated><title>Add isympy -c qtconsole</title><content type='html'>You can open the IPython qtconsole with a sympy session by typing &amp;quot;IPython qtconsole --profile=sympy&amp;quot;, but you should also be able to do it by typing &amp;quot;isympy -c ipython-qtconsole&amp;quot;.  Unlike the former, the latter should perhaps not rely on IPython's built-in sympy profile to work.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2632/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2632'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2632'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blockedOn><issues:id>2945</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:blockedOn><issues:id>3031</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:cc><issues:uri>/u/110706953761515533762/</issues:uri><issues:username>elliso...@gmail.com</issues:username></issues:cc><issues:id>2632</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Printing</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>IPython</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>5</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DEACQX47eCl7ImA9WhNSFk8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1235</id><published>2008-12-08T21:39:52.000Z</published><updated>2012-10-30T19:52:40.000Z</updated><title>Problem installing in Windows</title><content type='html'>Hi!

I've downloaded the Windows installer, and tries to run the program - but 
I get an error message: &amp;quot;No Python information found in the registry&amp;quot;. But 
I have Python installed.

This is what I get when running the Python command in the command line:

&amp;quot;C:\Users\Fredrik\Documents\programme\discalc&amp;gt;PYTHON
Python 2.5.1 (r251:54863, Apr 18 2007, 08:51:08) [MSC v.1310 32 bit 
(Intel)] on win32
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt;&amp;quot;

Thanks for any answer.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1235/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1235'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1235'/><author><name>hrme...@gmail.com</name><uri>/u/107974159288299473148/</uri></author><issues:id>1235</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-QA</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>4</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEYAQH47eCl7ImA9WhNTEkk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1336</id><published>2009-03-21T22:39:00.000Z</published><updated>2012-10-14T19:15:41.000Z</updated><title>Arbitrary constant type</title><content type='html'>Adding an arbitrary constant type would help with the simplification of the results of integration, specifically solutions to differential equations, but also just for indefinite integrals in general.  It would 
have most of the same properties as a regular constant, but, for example, 3*c1 would return c1 if it is 
called in a subroutine or c2 if it is called from the command prompt (there should probably be a simple 
key argument to make it return the same object that defaults to returning a different one).  The same for 
c1+2.  

The problem is that there is no way to tell that 2*x/(x**2 + c1), x/((x**2)/2+c1), and (2*x/(x**2+2*c1) are 
all valid solutions to the differential equation x*y'+xy**2=y.  The first is the cleanest of the three, the 
second is what sympy currently prints out, and the third is what it prints out after running simplify.

For example, the TI-89 has such a type.  Typing @k with k=0..255 represents an arbitrary constant, and 
results of the deSolve command use them.  </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1336/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1336'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1336'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blockedOn><issues:id>1941</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:blocking><issues:id>2219</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2219</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:cc><issues:uri>/u/106486100774697058597/</issues:uri><issues:username>andy.ter...@gmail.com</issues:username></issues:cc><issues:id>1336</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>4</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEYHSH47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1456</id><published>2009-06-03T22:40:58.000Z</published><updated>2012-11-08T02:35:39.000Z</updated><title>use pyflakes to identify simple bugs in sympy and fix them</title><content type='html'>Example:

sudo apt-get install pyflakes

$ pyflakes sympy/integrals/
sympy/integrals/rationaltools.py:3: 'div' imported but unused
sympy/integrals/rationaltools.py:121: redefinition of unused 'symbols' from
line 3
sympy/integrals/risch.py:4: 'Pow' imported but unused
sympy/integrals/risch.py:5: 'Function' imported but unused
sympy/integrals/risch.py:7: 'Atom' imported but unused
sympy/integrals/risch.py:8: 'Integer' imported but unused
sympy/integrals/deltafunctions.py:2: 'Symbol' imported but unused
sympy/integrals/deltafunctions.py:2: 'S' imported but unused
sympy/integrals/deltafunctions.py:2: 'Wild' imported but unused
sympy/integrals/integrals.py:2: 'Pow' imported but unused
sympy/integrals/integrals.py:9: 'apart' imported but unused
sympy/integrals/integrals.py:10: 'limit' imported but unused
sympy/integrals/integrals.py:13: 'DiracDelta' imported but unused
sympy/integrals/integrals.py:13: 'Heaviside' imported but unused
sympy/integrals/integrals.py:111: redefinition of unused 'limit' from line 10
sympy/integrals/__init__.py:8: 'integrate' imported but unused
sympy/integrals/__init__.py:8: 'line_integrate' imported but unused
sympy/integrals/__init__.py:8: 'Integral' imported but unused
sympy/integrals/tests/test_rationaltools.py:4: 'log_to_atan' imported but
unused
sympy/integrals/tests/test_rationaltools.py:4: 'log_to_real' imported but
unused
sympy/integrals/tests/test_rationaltools.py:4: 'ratint_ratpart' imported
but unused
sympy/integrals/tests/test_lineintegrals.py:1: 'cos' imported but unused
sympy/integrals/tests/test_lineintegrals.py:1: 'Integral' imported but unused
sympy/integrals/tests/test_lineintegrals.py:1: 'sympify' imported but unused
sympy/integrals/tests/test_lineintegrals.py:1: 'integrate' imported but unused
sympy/integrals/tests/test_lineintegrals.py:1: 'diff' imported but unused
sympy/integrals/tests/test_lineintegrals.py:1: 'pi' imported but unused
sympy/integrals/tests/test_lineintegrals.py:1: 'sin' imported but unused
sympy/integrals/tests/test_integrals.py:1: redefinition of unused 'atan'
from line 1
sympy/integrals/tests/test_integrals.py:1: 'I' imported but unused
sympy/integrals/tests/test_integrals.py:5: 'skip' imported but unused
sympy/integrals/tests/test_integrals.py:5: 'XFAIL' imported but unused


it finds (among other things) that the Heaviside is imported but never
used, so it should be removed.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1456/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1456'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1456'/><author><name>ondrej.c...@gmail.com</name><uri>/u/104039945248245758823/</uri></author><issues:blockedOn><issues:id>2371</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:id>1456</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInCategory-QA</issues:label><issues:label>CodeInMultiple</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>4</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CUYHR347eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1562</id><published>2009-07-29T02:04:07.000Z</published><updated>2012-11-08T02:52:16.000Z</updated><title>Have trigsimp apply factor and Poly.cancel() to sin's and cos's</title><content type='html'>Have a look at the following expression:
8*x**15*cos(x)**6*sin(x)**21/(-2*x**15*cos(x)**2*sin(x)**21 - x**15*sin(x)**23) + 20*x**15*cos(x)**4*sin(x)**23/(-
2*x**15*cos(x)**2*sin(x)**21 - x**15*sin(x)**23) + 16*x**15*cos(x)**2*sin(x)**25/(-2*x**15*cos(x)**2*sin(x)**21 - x**15*sin(x)**23) 
+ 4*x**15*sin(x)**27/(-2*x**15*cos(x)**2*sin(x)**21 - x**15*sin(x)**23)

This expression is identically equal to -4.  It is the result of wronskian([x*sin(x), sin(x), 1, x*cos(x), cos(x)], x), which comes from 
applying the method of variation of parameters to the ODE f(x).diff(x, 5) + 2*f(x).diff(x, 3) + f(x).diff(x) - 1.  

simplify() and trigsimp() both do nothing to the above expression.  But if you do the following, you can coerce the solution:
&amp;gt;&amp;gt;&amp;gt; a = 8*x**15*cos(x)**6*sin(x)**21/(-2*x**15*cos(x)**2*sin(x)**21 - x**15*sin(x)**23) + 20*x**15*cos(x)**4*sin(x)**23/(-
2*x**15*cos(x)**2*sin(x)**21 - x**15*sin(x)**23) + 16*x**15*cos(x)**2*sin(x)**25/(-2*x**15*cos(x)**2*sin(x)**21 - x**15*sin(x)**23) 
+ 4*x**15*sin(x)**27/(-2*x**15*cos(x)**2*sin(x)**21 - x**15*sin(x)**23)
&amp;gt;&amp;gt;&amp;gt; a = a.subs([(sin(x), y), (cos(x), z)])&amp;gt;&amp;gt;&amp;gt; print a4*x**15*y**27/(-2*x**15*y**21*z**2 - x**15*y**23) + 8*x**15*y**21*z**6/(-
2*x**15*y**21*z**2 - x**15*y**23) + 16*x**15*y**25*z**2/(-2*x**15*y**21*z**2 - x**15*y**23) + 20*x**15*y**23*z**4/(-
2*x**15*y**21*z**2 - x**15*y**23)
&amp;gt;&amp;gt;&amp;gt; a = Poly.cancel(a)&amp;gt;&amp;gt;&amp;gt; print a-8*y**2*z**2 - 4*y**4 - 4*z**4
&amp;gt;&amp;gt;&amp;gt; a = factor(a)&amp;gt;&amp;gt;&amp;gt; print a-4*(y**2 + z**2)**2
&amp;gt;&amp;gt;&amp;gt; a = a.subs([(y, sin(x)), (z, cos(x))])&amp;gt;&amp;gt;&amp;gt; print a
-4*(cos(x)**2 + sin(x)**2)**2
&amp;gt;&amp;gt;&amp;gt; a = trigsimp(a)
&amp;gt;&amp;gt;&amp;gt; print a
-4

The idea is that Poly.cancel() and factor() will not apply to an expression unless the terms are Symbols (simplify() calls Poly.cancel()), so 
we need to do a subs for all of the sin's and cos's as symbols, after which it will work.  Applying this in a general case in trigsimp would 
be more difficult because it would have to handle different arguments the trig functions (like sin(x) and sin(y)) as well as other things in 
the expression that could cause factor() to fail (it fails if the expression is not a Polynomial in Symbols). Hence, I am posting it here as 
an issue, because I don't really have time to tackle it.  

Perhaps we should instead modify Poly.cancel() and factor() to work with expressions like the above one, instead of just with symbols.  
Then we would only need to call those two functions in trigsimp.  

By the way, cse() goes too far in the above example, returning an expression that cannot be canceled or factored.  </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1562/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1562'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1562'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blockedOn><issues:id>1598</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:cc><issues:uri>/u/101069955704897915480/</issues:uri><issues:username>matt...@gmail.com</issues:username></issues:cc><issues:id>1562</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Polynomial</issues:label><issues:label>Simplify</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>4</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;C08DQn47eCl7ImA9WhNTEkk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1739</id><published>2009-12-03T11:31:09.000Z</published><updated>2012-10-14T19:11:13.000Z</updated><title>Constants 'C_i' in differential equations confuse solver</title><content type='html'>The last call to dsolve() in the following snippet does not return the correct solution of the 
differential equation: the part 3 * C_1 is not integrated correctly.


In [1]: eq = Eq(f(x).diff(x), 2 * x)

In [2]: eq
Out[2]: 
d             
──(f(x)) = 2⋅x
dx            

In [3]: sol = dsolve(eq, f(x))

In [4]: sol
Out[4]: 
             2
f(x) = C₁ + x 

In [5]: g = 3 * sol.rhs

In [6]: g
Out[6]: 
          2
3⋅C₁ + 3⋅x 

In [7]: eq = Eq(f(x).diff(x), g)

In [8]: eq
Out[8]: 
d                    2
──(f(x)) = 3⋅C₁ + 3⋅x 
dx                    

In [9]: dsolve(eq, f(x))
Out[9]: 
                    3
f(x) = C₁ + C₂⋅x + x 

In [10]: </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1739/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1739'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1739'/><author><name>jorn.baa...@gmail.com</name><uri>/u/104490253617518974981/</uri></author><issues:cc><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:cc><issues:id>1739</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>WrongResult</issues:label><issues:label>NeedsBetterPatch</issues:label><issues:owner><issues:uri>/u/104490253617518974981/</issues:uri><issues:username>jorn.baa...@gmail.com</issues:username></issues:owner><issues:stars>4</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DUAHR347eCl7ImA9WhJbF0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1949</id><published>2010-06-01T04:54:33.000Z</published><updated>2012-09-27T14:55:36.000Z</updated><title>Doctests for polynomials module</title><content type='html'>As the first part of my Google Summer of Code project, I undertook to write doctests for most of 
the functions and methods in the polynomials module.  Wow!  There were a lot of them, but this has 
been by far the most efficient way of learning the in's and out's of a module I have ever tried, and I 
would highly recommend it.  I now feel that I understand most parts of the module almost as well 
as if I had written it.  See http://github.com/asmeurer/sympy/tree/polydocs-polys9.  

A few notes:

- I have based the branch on top of my branch from issue 1883, and that one on top of Mateusz's 
polys9.  The reason is that I didn't want to go fixing things that were already fixed by me or him 
somewhere else (indeed, I started working on top of master, and I fixed at least 2 things that got 
rebased out when I moved to the top of polys9 because Mateusz already fixed them there).  So I am 
not sure what should be done about this.  I guess if Mateusz reviews it positively, he can just 
continue his work on top of my branch as I have with his.  polys9 still needs to be rebased over 
master, and there will be some non-trivial merge issues with that.  I will also gladly merge this over 
a more recent polys9 or a polys10 myself if that makes things easier.  

- Aside from doctests, there were also several other changes.  Most of these are fixes to bugs that I 
encountered in the polys module.  A few are in the spirit of issue 1883. A couple also relate to fixes 
with the coverage_doctest utility.

- Specifically, regarding the coverage_doctest utility, I made it executable, and made it skip test_ 
and bench_ files, whose functions do not need doctests.  Also, this is the tool that I used as the 
guide for which functions to add doctests to.  Therefore, I didn't add any doctests to class 
definitions or internal methods.  

- I did not add doctests to *all* functions and methods in polys.  Rather, I added doctests to the 
most important ones, including all from densebasic.py, densetools.py, densearith.py, galoistools.py, 
and polytools.py and most from polyclasses.py and algebratools.py.  I may go on to do others such 
as groebnertools.py later if I find myself needing those functions for my work or if I get bored :).

- It is very important to test using all three ground types and all three pythons.  In addition, some 
doctests were required to be coded so that they pass in systems that do and do not have gmpy 
installed.  One of the changes I made was to print the SYMPY_GROUND_TYPES at the top of any test 
or doctest run, so that we can see exactly where things are happening.  On my machine I used this 
alias to test (the /sw/bin/python's have gmpy installed whereas other ones do not): alias 
doctestall='SYMPY_GROUND_TYPES=gmpy /sw/bin/python2.6 bin/doctest sympy/polys/; 
SYMPY_GROUND_TYPES=gmpy python2.5 bin/doctest sympy/polys/; SYMPY_GROUND_TYPES=gmpy 
python2.6 bin/doctest sympy/polys/; SYMPY_GROUND_TYPES=python /sw/bin/python2.6 
bin/doctest sympy/polys/; SYMPY_GROUND_TYPES=python python2.5 bin/doctest sympy/polys/; 
SYMPY_GROUND_TYPES=python python2.6 bin/doctest sympy/polys/; 
SYMPY_GROUND_TYPES=sympy /sw/bin/python2.6 bin/doctest sympy/polys/; 
SYMPY_GROUND_TYPES=sympy python2.5 bin/doctest sympy/polys/; 
SYMPY_GROUND_TYPES=sympy python2.6 bin/doctest sympy/polys/; 
SYMPY_GROUND_TYPES=python python2.4 bin/doctest sympy/polys/; 
SYMPY_GROUND_TYPES=sympy python2.4 bin/doctest sympy/polys/'

- Presently, there are some test failures from to polys9 in some combinations (c.f. Python 2.4 with 
SYMPY_GROUND_TYPES=sympy).  So if you get a test failure in my branch, please check to see if it 
also fails in polys9 first.

- In several places in the code, I have marked a note with &amp;quot;# XXX&amp;quot;.  These are places where the 
behavior was unexpected, or I was not sure how to correctly fix something that didn't work.  
Basically, I need you to go over these, Mateusz, and see what should be done.  You can add 
comments to github if that is easier.  

- Except in a few places such as some of the user functions, I didn't add any more documentation, 
just doctests.  So there is still more work that can be done in the way of polynomial documentation.  </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1949/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1949'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1949'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blockedOn><issues:id>1883</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:blocking><issues:id>294</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1587</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2010</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2010</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:cc><issues:uri>/u/101069955704897915480/</issues:uri><issues:username>matt...@gmail.com</issues:username></issues:cc><issues:closedDate>2011-04-29T21:54:19.000Z</issues:closedDate><issues:id>1949</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>PassedReview</issues:label><issues:label>Polynomial</issues:label><issues:label>Documentation</issues:label><issues:label>Milestone-Release0.7.0</issues:label><issues:label>asmeurer</issues:label><issues:label>mattpap</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>4</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;D0MBSH47eCl7ImA9WhJbGEs.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2015</id><published>2010-08-11T14:05:46.000Z</published><updated>2012-09-28T20:50:59.000Z</updated><title>Hangs attempting to solve a system of linear equations</title><content type='html'>I often have this issue. This is one of the way I can reproduce it.

I can't solve this problem for a, b, c, f, h, k, n:

b + r/d - c/d = 0
c*(1/d + 1/e + 1/g) - f/g - r/d = 0
f*(1/g + 1/i + 1/j) - c/g - h/i = 0
h*(1/i + 1/l + 1/m) - f/i - k/m = 0
k*(1/m + 1/o + 1/p) - h/m - n/p = 0
n*(1/p + 1/q) - k/p = 0

Python snippet, the pickle file is attached:

&amp;gt;&amp;gt;&amp;gt; import sympy
&amp;gt;&amp;gt;&amp;gt; import pickle
&amp;gt;&amp;gt;&amp;gt; fp = open(&amp;quot;bugreport.pickle&amp;quot;)
&amp;gt;&amp;gt;&amp;gt; [eq, x]= pickle.load(fp)
&amp;gt;&amp;gt;&amp;gt; sympy.solve(eq, x)
 [... program hangs...]

System info:

Linux mybox 2.6.32-24-generic #38-Ubuntu SMP Mon Jul 5 09:22:14 UTC 2010 i686 GNU/Linux

&amp;gt;&amp;gt;&amp;gt; sympy.__version__
'0.6.7'
&amp;gt;&amp;gt;&amp;gt; import sys
&amp;gt;&amp;gt;&amp;gt; print sys.version_info
(2, 6, 5, 'final', 0)
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2015/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2015'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2015'/><author><name>ggventur...@gmail.com</name><uri>/u/116248311936521373800/</uri></author><issues:cc><issues:uri>/u/111502149103757882156/</issues:uri><issues:username>fredrik....@gmail.com</issues:username></issues:cc><issues:cc><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:cc><issues:id>2015</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Solvers</issues:label><issues:label>Simplify</issues:label><issues:label>Polynomial</issues:label><issues:owner><issues:uri>/u/101069955704897915480/</issues:uri><issues:username>matt...@gmail.com</issues:username></issues:owner><issues:stars>4</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CkABQn47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2160</id><published>2011-01-22T20:28:49.000Z</published><updated>2012-11-08T02:12:33.000Z</updated><title>List of dependencies</title><content type='html'>We should include in the README, and probably in the docs somewhere too, a list of all the &amp;quot;dependencies&amp;quot; of SymPy.  Now, obviously, SymPy's only dependency is Python, but there are several optional dependencies like IPython and gmpy that are not required but extent the capabilities of SymPy if they are installed. 

I am putting this here instead of just doing it and making a pull request because I don't know exactly how things work with things like numpy and scipy, and I also don't know if I am forgetting anything.  So far, I have this:

&amp;quot;&amp;quot;&amp;quot;
Dependencies
------------

One of the fundamental design decisions behind SymPy is that it should not have any external dependencies besides Python to install.  Therefore, the only real &amp;quot;dependency&amp;quot; of SymPy is an installation of Python 2.4, 2.5, 2.6, or 2.7 (note that Python 2.4 support is deprecated and will no longer work in the next release).

However, there are several packages that are not required to use SymPy, but that will enhance SymPy if they are installed.  These packages are:

- IPython (http://ipython.scipy.org/moin/).  IPython is a third party Python interactive shell that has many more features over the built-in Python interactive shell, such as tab-completetion and [what other important features should I mention here?].  If IPython is installed, isympy will automatically use it.  Otherwise, it will fall back to the regular Python interactive shell.  You can override this behavior by setting the -c option to isympy, like `isympy -c python`.

- gmpy (http://code.google.com/p/gmpy/). gmpy is a Python wrapper around the GNU Multiple Precision Arithmetic Library (GMP). If gmpy is installed, it may make certain operations in SymPy faster, because it will use gmpy as the ground type instead of the built-in Python ground types.  If gmpy is not installed, it will fall back to the default Python ground types.  You can override this behavior by setting the SYMPY_GROUND_TYPES environment variable, such as `SYMPY_GROUND_TYPES=python isympy`. [Note: this should be an option to isympy!]

- Cython. [What exactly is the situation with Cython?]

- Numpy. [Ditto]

- Scipy. [Ditto]

- [Code generation dependencies?]

- [Other dependencies?]

Note that mpmath and pyglet, our floating point and plotting libraries respectively, are included with SymPy, so it is unnecessary to install them.  Indeed, SymPy will always use the version of mpmath or pyglet that comes with SymPy, even if a newer version is installed in the system.  This is done for compatibility reasons.

&amp;quot;&amp;quot;&amp;quot;

OK, the text in [] are comments.  I need help from others writing the rest of this.  Note that I do not want to include any development dependencies here (like Sphinx), because the user does not care about that (maybe we could have that list somewhere else in our development docs).   

But basically for the others, explain what happens when they are installed and what happens when they are not (and how to override, if relevant).  

I just realized that the best way to do this would be through the wiki.  So if anyone has anything to add to this, please do it at https://github.com/sympy/sympy/wiki/Dependencies.  And then when we have it finished we can add it to the README and regular docs.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2160/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2160'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2160'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blocking><issues:id>1788</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:cc><issues:uri>/u/104039945248245758823/</issues:uri><issues:username>ondrej.c...@gmail.com</issues:username></issues:cc><issues:cc><issues:uri>/u/Vinzent.Steinberg@gmail.com/</issues:uri><issues:username>Vinzent.Steinberg@gmail.com</issues:username></issues:cc><issues:cc><issues:uri>/u/110706953761515533762/</issues:uri><issues:username>elliso...@gmail.com</issues:username></issues:cc><issues:cc><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:cc><issues:cc><issues:uri>/u/111502149103757882156/</issues:uri><issues:username>fredrik....@gmail.com</issues:username></issues:cc><issues:id>2160</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Documentation</issues:label><issues:label>CodeInCategory-Documentation</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>4</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;C04NQH47eCl7ImA9WhJaGEg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2222</id><published>2011-03-21T04:16:03.000Z</published><updated>2012-10-10T06:53:11.000Z</updated><title>Matrix([Matrix, ...]) should check the row length of empty matrices</title><content type='html'>Currently, we have this:

In [20]: Matrix(([1,2,3], Matrix(0,1, lambda i,j:0)))
Out[20]: [1  2  3]

In [21]: Matrix(([1,2,3], Matrix(0, 3, lambda i,j:0)))
Out[21]: [1  2  3]

In [22]: Matrix(([1,2,3], Matrix(0, 4, lambda i,j:0)))
Out[22]: [1  2  3]

To be consistent, only the second version should work. The others should raise a ShapeError.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2222/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2222'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2222'/><author><name>Ronan.L...@gmail.com</name><uri>/u/101272611947379421629/</uri></author><issues:closedDate>2012-10-10T06:53:11.000Z</issues:closedDate><issues:id>2222</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:label>NeedsReview</issues:label><issues:label>smichr</issues:label><issues:owner><issues:uri>/u/101272611947379421629/</issues:uri><issues:username>Ronan.L...@gmail.com</issues:username></issues:owner><issues:stars>4</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;Ck4HQH47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2319</id><published>2011-04-27T18:54:03.000Z</published><updated>2012-11-08T02:15:31.000Z</updated><title>LaTeX input</title><content type='html'>So my friend pointed out to me that WolphramAlpha lets you enter any LaTeX formula, and it will parse it and evaluate it.  I think we should have a parser that lets us do the same thing. In his case, he takes notes in LaTeX and does all of his homework in it, and he was able to just paste an expression from his homework into WolphramAlpha and it did if for him.  </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2319/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2319'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2319'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2319</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInMultiple</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>Parsing</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>4</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEYNSX47eCl7ImA9WhNTEkg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2684</id><published>2011-09-12T16:11:28.000Z</published><updated>2012-10-14T22:03:18.000Z</updated><title>Deepcopy does not work on evaluate False</title><content type='html'>to reproduce:

a = Float(-11.1)
b = Integer(19)
mul = Mul(a, b, evaluate=False)

from copy import deepcopy
deepcopy(mul)

Raises: too many values to unpack in __setstate__ (sympy/core/numbers.py)</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2684/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2684'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2684'/><author><name>nico...@kwyk.fr</name><uri>/u/110721673289577970947/</uri></author><issues:id>2684</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>4</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DUABRH47eCl7ImA9WhNSFkg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2805</id><published>2011-10-29T00:15:15.000Z</published><updated>2012-10-31T04:29:15.000Z</updated><title>Should unevaluated objects still sort their args?</title><content type='html'>We currently have

In [13]: a = Add(x, y, evaluate=False)

In [14]: b = Add(y, x, evaluate=False)

In [18]: a.args
Out[18]: (x, y)

In [19]: b.args
Out[19]: (y, x)

which results in

In [15]: a == b
Out[15]: False

In [16]: a == x + y
Out[16]: False

In [17]: b == x + y
Out[17]: True

Should we always sort args, even when the expression is unevaluated?  Note that this doesn't affect the printer, which does its own sorting:

In [20]: a
Out[20]: x + y

In [21]: b
Out[21]: x + y

In [22]: print a
x + y

In [23]: print b
x + y

Related is issue 2738.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2805/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2805'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2805'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2805</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>4</issues:stars><issues:state>open</issues:state><issues:status>NeedsDecision</issues:status></entry><entry gd:etag='W/&quot;DUcNSX47eCl7ImA9WhJbFUo.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/698</id><published>2008-02-10T16:57:40.000Z</published><updated>2012-09-25T12:44:58.000Z</updated><title>automatic testing of examples</title><content type='html'>Let's write a script that runs all examples and determines, if they run or
not. We will run it before a release.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/698/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=698'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/698'/><author><name>ondrej.c...@gmail.com</name><uri>/u/104039945248245758823/</uri></author><issues:closedDate>2012-09-25T12:44:58.000Z</issues:closedDate><issues:id>698</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Testing</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInDifficulty-Easy</issues:label><issues:label>CodeInImportedIntoMelange</issues:label><issues:stars>3</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;D04GSX47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1058</id><published>2008-08-28T15:14:52.000Z</published><updated>2012-11-08T03:38:48.000Z</updated><title>Classifying formulas</title><content type='html'>I've written some code for determining the &amp;quot;class&amp;quot; of a formula. The
function classify(expr, x) walks the expression top-down and at each level
classifies it as a function of x. It distinguishes between various classes
of functions, including:

* linear expressions
* polynomials (degree &amp;gt; 1)
* rational functions
* algebraic roots
* exponentials
* logarithms
* trigonometric functions
* etc

It then recursively classifies all subexpressions and returns the path with
the &amp;quot;greatest&amp;quot; complexity. The following test outputs should hopefully make
it more clear:

pi []
1 + 3*x [LINEAR]
3*x + x**2 [POLYNOMIAL]
(1 + pi)*(5 + 4*x) [LINEAR]
(1 + pi)*(5 + E*(pi + 8*x)) [LINEAR]
(1 + 2*x)*(5 + 4*x) [POLYNOMIAL]
1/x [RATIONAL]
1/(1 + 2*x) [RATIONAL]
1/(2*x + x**2) [RATIONAL]
(1 + x)/(1 - x) [RATIONAL]
(4 + x)/(2*x + x**2) [RATIONAL]
(4 + x)/(2*x + x**2) + x**2 [RATIONAL]
x**2*(4 + x)/(2*x + x**2) [RATIONAL]
(1 + 3*x)**(1/2) [ROOT, LINEAR]
x**(3/2) [ROOT, LINEAR]
x**pi [EXP, LINEAR, LOG]
2*x + exp(1 + 2*x) + exp(4 + 3*x) [LINEAR, EXP, LINEAR]
2*x + (exp(3*x) + exp(1 + x))/(1 + 5*x) [RATIONAL, EXP, LINEAR]
2*x + sin(1 + 2*x)**2 + cos(4 + x)**4 [POLYNOMIAL, TRIGONOMETRIC, LINEAR]
2*x + (sin(1 + 2*x)**2 + cos(4 + x)**4)/(1 + 5*x) [RATIONAL, TRIGONOMETRIC,
LINEAR]
2**x [EXP, LINEAR]
x**x [EXP, LOG, LINEAR]
(1 + 2*x)**x [EXP, LOG, LINEAR]
(1 + acosh(x))**x [EXP, LOG, LINEAR, INVHYPERBOLIC, LINEAR]
exp(exp(x)) [EXP, EXP, LINEAR]
exp(exp(1/x)) [EXP, EXP, RATIONAL]
exp(exp(x)) + exp(exp(1/x)) [LINEAR, EXP, EXP, RATIONAL]
exp(gamma(x)**2) [EXP, POLYNOMIAL, NONELEMENTARY, LINEAR]

(The trailing LINEAR for f(a*x+b) could perhaps be dropped when a*x+b is
actually precisely x.)

The classification gives an ordering roughly similar to (though more coarse
than) that used in integral tables like Gradshteyn and Ryzhik. I think this
could be used by various symbolic algorithms to decide which heuristic
algorithms to try. For example, integrate could choose heuristics among
these (and other) cases:

[POLYNOMIAL] -- use a polynomial integrator
[RATIONAL] -- use a rational integrator
[LINEAR ROOT, LINEAR] -- try looking up a direct formula in a table
[LINEAR, NONELEMENTARY, LINEAR] -- try looking up a formula in a table
[POLYNOMIAL, TRIGONOMETRIC, LINEAR] -- try the integrator for trigonometric
polynomials

There is a clear advantage to the fact that only a single pass through the
expression is required, instead of requiring every heuristic to &amp;quot;smell&amp;quot; the
expression. So it becomes cheaper to have lots of special-purpose heuristics.

The output can also be used to determine whether a function is elementary,
transcendental, etc.

What do you think? Where should the code go, does it need improvements,
should the SYMBOLS perhaps be something else (e.g. strings)? Maybe return
an object with __eq__, __le__ methods etc so that computed classifications
can be compared more easily in terms of the complexity() measure?
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1058/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1058'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1058'/><author><name>fredrik....@gmail.com</name><uri>/u/111502149103757882156/</uri></author><issues:cc><issues:uri>/u/101069955704897915480/</issues:uri><issues:username>matt...@gmail.com</issues:username></issues:cc><issues:cc><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:cc><issues:id>1058</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>EasyToFix</issues:label><issues:label>NeedsBetterPatch</issues:label><issues:stars>3</issues:stars><issues:state>open</issues:state><issues:status>Started</issues:status></entry><entry gd:etag='W/&quot;DUUGR347eCl7ImA9WhNSEU0.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1242</id><published>2008-12-16T18:29:43.000Z</published><updated>2012-10-24T19:33:46.000Z</updated><title>Simplifying of complex exponentials</title><content type='html'>I was toying around with the idea of converting trig functions to exponentials for the purposes of 
simplification, however the results of simplify appear to be non-optimal:
&amp;gt;&amp;gt;&amp;gt; x = Symbol('x')
&amp;gt;&amp;gt;&amp;gt; c = cos(x)._eval_rewrite_as_exp(x)
&amp;gt;&amp;gt;&amp;gt; t = tan(x)._eval_rewrite_as_exp(x)
&amp;gt;&amp;gt;&amp;gt; c * t
I*(1/2*exp(I*x) + 1/2*exp(-I*x))*(-exp(I*x) + exp(-I*x))/(exp(I*x) + exp(-I*x))
&amp;gt;&amp;gt;&amp;gt; simplify(_)
&amp;gt;&amp;gt;&amp;gt; (2*I*exp(I*x) - 2*I*exp(5*I*x))/(4*exp(2*I*x) + 4*exp(4*I*x))

Although the simplification is valid, it is not the expected result. t * c can be reduced quite 
simply by hand if you first combine 1/2*exp(I*x) + 1/2*exp(-I*x) to give:
1/2*(exp(I*x) + exp(-I*x));
take the 1/2 'down' to give
I*(exp(I*x) + exp(-I*x))*(-exp(I*x) + exp(-I*x))/(2*(exp(I*x) + exp(-I*x)));
cancel exp(I*x) + exp(-I*x)
(I*(-exp(I*x) + exp(-I*x))) / 2;
which is our good old friend sin(x).

I am not sure exactly how the current simplify function works, but it would be good if it could 
'pick-up' on this case (and others similar).

</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1242/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1242'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1242'/><author><name>fred...@witherden.org</name><uri>/u/111560553046880738986/</uri></author><issues:closedDate>2012-10-24T19:33:46.000Z</issues:closedDate><issues:id>1242</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>EasyToFix</issues:label><issues:label>NeedsReview</issues:label><issues:stars>3</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;C0AAQ347eCl7ImA9WhNTEkk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1360</id><published>2009-03-30T10:46:03.000Z</published><updated>2012-10-14T19:09:02.000Z</updated><title>"integrate" doesn't allow the use of functions as the variable of integration.</title><content type='html'>&amp;gt;&amp;gt;&amp;gt; integrate(sin(x),sin(x))
.
.
ValueError: Invalid integration variable or limits: (sin(x),)

This should be quite easy to fix for indefinite integrals - multiply the
integrand with the derivative of the variable and then integrate with
respect to x.

For definite integrals, I guess it'll have to solve for the value of x, or
somehow put the integrand as a function in terms of the new variable - what
if the function is not bijective ? Assume something about the x ?

This feature doesn't seem to be implemented -properly- in either Maxima or
Axiom.
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1360/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1360'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1360'/><author><name>akshaysr...@gmail.com</name><uri>/u/107935137289803450816/</uri></author><issues:id>1360</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Integration</issues:label><issues:label>NeedsBetterPatch</issues:label><issues:label>hector1618</issues:label><issues:stars>3</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEEFRn47eCl7ImA9WhNSFEo.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1428</id><published>2009-05-21T16:39:52.000Z</published><updated>2012-10-29T01:03:37.000Z</updated><title>wrong result for integral of sin(k*x)*sin(m*x) over [0,pi]</title><content type='html'>Hi,

current sympy (from git) returns a wrong result for me when I integrate
then function sin(k*x)*sin(m*x) over the interval [0,pi]:

--------------------------------------------------
voss@automatix [~/sympy] bin/isympy 
Python 2.6.2 console for SymPy 0.6.5-git

These commands were executed:
&amp;gt;&amp;gt;&amp;gt; from __future__ import division
&amp;gt;&amp;gt;&amp;gt; from sympy import *
&amp;gt;&amp;gt;&amp;gt; x, y, z = symbols('xyz')
&amp;gt;&amp;gt;&amp;gt; k, m, n = symbols('kmn', integer=True)
&amp;gt;&amp;gt;&amp;gt; f, g, h = map(Function, 'fgh')

Documentation can be found at http://sympy.org/

In [1]: integrate(sin(k*x)*sin(m*x),(x,0,pi))
Out[1]: 0

In [2]: integrate(sin(k*x)*sin(k*x),(x,0,pi))
Out[2]: 
π
─
2

In [3]: m-k
Out[3]: m - k

The result Out[1] should only be 0 if m != k.  For m == k we should get
pi/2 as in Out[2].  The third expression shows that sympy does not
generically assume m == k, since m-k is not simplified to 0.

I hope this helps,
Jochen</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1428/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1428'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1428'/><author><name>jochen.voss@gmail.com</name><uri>/u/jochen.voss@gmail.com/</uri></author><issues:id>1428</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>WrongResult</issues:label><issues:label>Integration</issues:label><issues:owner><issues:uri>/u/jochen.voss@gmail.com/</issues:uri><issues:username>jochen.voss@gmail.com</issues:username></issues:owner><issues:stars>3</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;Ck4DSX47eCl7ImA9WhJbEkg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1625</id><published>2009-08-31T17:11:45.000Z</published><updated>2012-09-21T18:09:38.000Z</updated><title>sympify of logical operations gets confused with ==</title><content type='html'>I am using sympy 0.6.5 on linux but I see the behavior on windows too.

In [10]: sympy.sympify('A&amp;gt;2')
Out[10]: 2 &amp;lt; A

In [11]: sympy.sympify('A==2')
Out[11]: False


I even tried using the verbose &amp;quot;Equality&amp;quot; function:

This works and returns an expression that prints a &amp;quot;A == 2&amp;quot;
In [16]: sympy.sympify('Equality(A,2)')
Out[16]: A == 2

But &amp;quot;A == 2&amp;quot; will not sympify
In [17]: sympy.sympify('A == 2')
Out[17]: False

Using Equality() is very verbose so I was hoping that it was possible to 
get == working.

--Tom
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1625/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1625'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1625'/><author><name>tom.denn...@gmail.com</name><uri>/u/110078974596186779257/</uri></author><issues:id>1625</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Parsing</issues:label><issues:label>NeedsReview</issues:label><issues:stars>3</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEQNRX47eCl7ImA9WhNSFUs.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1768</id><published>2009-12-16T17:48:36.000Z</published><updated>2012-10-30T01:59:54.000Z</updated><title>integrate(sin(x)*tan(x), x) fails but integrate(sin(x)**2/cos(x), x) doesn't</title><content type='html'>In [35]: integrate(sin(x)**2/cos(x), x)
Out[35]: 
log(1 + sin(x))            log(-1 + sin(x))
─────────────── - sin(x) - ────────────────
       2                          2        

In [36]: integrate(sin(x)*tan(x), x)
Out[36]: 
⌠                 
⎮ sin(x)⋅tan(x) dx
⌡                 

Well the integration engine fail if we just replace tan(x) with sin(x)/cos(x) all the time?</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1768/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1768'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1768'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:cc><issues:uri>/u/101069955704897915480/</issues:uri><issues:username>matt...@gmail.com</issues:username></issues:cc><issues:closedDate>2012-10-30T01:59:54.000Z</issues:closedDate><issues:id>1768</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Integration</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>3</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;C04DQn47eCl7ImA9WhJaGEg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2221</id><published>2011-03-21T04:05:03.000Z</published><updated>2012-10-10T06:52:53.000Z</updated><title>hstack() and vstack() methods for Matrix</title><content type='html'>After the fix for issue 2212, Matrix(...) is able to stack its arguments vertically. This raises interesting additional points:
* it should be possible to stack things horizontally as well
* this feels like too much complexity for a constructor

So, I think that Matrix should get 2 more constructors (i.e. classmethods returning instances of Matrix): Matrix.hstack and Matrix.vstack. These can be implemented quite simply for now:

@classmethod
def vstack(cls, *args):
    return Matrix(args)

@classmethod
def hstack(cls, *args):
    transpose = lambda arg: arg.transpose() if isinstance(arg, Matrix) else arg
    return Matrix(map(transpose, args)).transpose()

but ultimately, the actual logic for the operations should be transferred from Matrix.__init__. The new class methods will also deprecate .col_join() and .row_join().
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2221/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2221'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2221'/><author><name>Ronan.L...@gmail.com</name><uri>/u/101272611947379421629/</uri></author><issues:closedDate>2012-10-10T06:52:53.000Z</issues:closedDate><issues:id>2221</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:label>NeedsReview</issues:label><issues:label>smichr</issues:label><issues:owner><issues:uri>/u/101272611947379421629/</issues:uri><issues:username>Ronan.L...@gmail.com</issues:username></issues:owner><issues:stars>3</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CUICRn47eCl7ImA9WhJbEUg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2281</id><published>2011-04-16T20:15:31.000Z</published><updated>2012-09-20T15:06:07.000Z</updated><title>Random tests</title><content type='html'>We should extend the tester to allow random tests.  These would allow us to test a random problem, instead of just one, which would increase our chances of catching a bug.  

The problem with these is that they are not reproducible.  Therefore, we need to extend the test runner to use a global seed value, which is printed and can be entered manually (like with issue 1746).  

By the way, I think there are already some random tests in SymPy.  These should be updated to use this.

</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2281/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2281'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2281'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:closedDate>2012-09-20T15:06:07.000Z</issues:closedDate><issues:id>2281</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Testing</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>3</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CEYEQ347eCl7ImA9WhNTEkg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2308</id><published>2011-04-25T04:21:14.000Z</published><updated>2012-10-14T22:01:42.000Z</updated><title>Should we rename primitive()? (and Expr.primitive() should call primitive())</title><content type='html'>What Add.primitive() does is
&amp;quot;Divide ``self`` by the GCD of coefficients of ``self``&amp;quot;

Its name is rather cryptic and it's odd that it only exists for Add but not for all Expr instances.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2308/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2308'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2308'/><author><name>Ronan.L...@gmail.com</name><uri>/u/101272611947379421629/</uri></author><issues:blockedOn><issues:id>2307</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:cc><issues:uri>/u/101069955704897915480/</issues:uri><issues:username>matt...@gmail.com</issues:username></issues:cc><issues:id>2308</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>asmeurer</issues:label><issues:owner><issues:uri>/u/101272611947379421629/</issues:uri><issues:username>Ronan.L...@gmail.com</issues:username></issues:owner><issues:stars>3</issues:stars><issues:state>open</issues:state><issues:status>NeedsDecision</issues:status></entry><entry gd:etag='W/&quot;DEcERX47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2513</id><published>2011-06-23T06:04:13.000Z</published><updated>2012-11-08T03:40:04.000Z</updated><title>Display SymPyDeprecationWarnings by default when running the tests</title><content type='html'>DeprecationWarning is turned off by default in Python 2.7, so all of our deprecated behavior that we deprecate with DeprecationWarning is not shown to the majority of our users (unless they are specifically looking for it, they won't find it).  This was done because most users of Python programs can't do anything if the program uses deprecated behavior, so they don't care to see the warning.  But I think most developers don't really do a good job of turning the warnings on, unfortunately.

I think we should create a SymPyDeprecationWarning that subclasses from DeprecationWarning, but is turned on by default in isympy.  See issue 2142.  That way, users of scripts that use sympy won't be bothered by them, but people who use isympy, who should be bothered by them in my opinion, will be. This will likely also include the developers of most of those scripts.  
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2513/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2513'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2513'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2513</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>3</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DUUCRn47eCl7ImA9WhNSFk4.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2650</id><published>2011-08-26T00:18:45.000Z</published><updated>2012-10-30T22:47:47.000Z</updated><title>non-determinism in integrate()</title><content type='html'>Tomo and I just went through a lot of grief in https://github.com/sympy/sympy/pull/573 over what appeared to be some bizzare caching problem.  In the end, it was caused by this part of risch.py:

347     poly_part = Add(*[ poly_coeffs[i]*monomial 
348         for i, monomial in enumerate(monoms) ])

The problem is that momons is a set, so the result of enumerate(monoms) is completely arbitrary.  In fact, I've see list(set) return a different result for the same set within the *same* session before.  This leads to integrate() sometimes returning different (though still correct) results than others.  It may even lead to being able to do it in once case and not in another (I'm not sure of this, though, and I haven't actually seen it).  In the case that I saw, it returned cos**2 in one case and -sin**2 in another; both are valid because they differ by a constant.

We should order the monoms. Actually, earlier, I would have liked it if the monoms were ordered in a way that made it easier to debug.  I think it was grlex that I found the most useful, though I could be wrong.  But any canonical sorting would be better than none.  Will default_sort_key always give the same thing even though the elements of monoms are Dummys?</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2650/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2650'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2650'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2650</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Integration</issues:label><issues:label>Polynomial</issues:label><issues:owner><issues:uri>/u/101069955704897915480/</issues:uri><issues:username>matt...@gmail.com</issues:username></issues:owner><issues:stars>3</issues:stars><issues:state>open</issues:state><issues:status>Started</issues:status></entry><entry gd:etag='W/&quot;C0EASX47eCl7ImA9WhNTFk8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2823</id><published>2011-11-04T15:26:48.000Z</published><updated>2012-10-19T04:40:48.000Z</updated><title>bug in fcode</title><content type='html'>Dear sympy

fcode is missing parenthesis when converting a negative power, 
see test case below. (this is sympy 0.7.1)

V

############

Python 2.7.2 (default, Nov  4 2011, 10:53:11) 
[GCC 4.1.2 20080704 (Red Hat 4.1.2-48)] on linux2
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; from sympy import fcode, symbols
&amp;gt;&amp;gt;&amp;gt; x = symbols('x')
&amp;gt;&amp;gt;&amp;gt; y = x**(-2.0)
&amp;gt;&amp;gt;&amp;gt; print fcode(y,assign_to='y',source_format='free',human=True)
y = x**-2.0d0

</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2823/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2823'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2823'/><author><name>valerywe...@hotmail.com</name><uri>/u/105512047732906470169/</uri></author><issues:closedDate>2012-10-19T04:40:48.000Z</issues:closedDate><issues:id>2823</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>EasyToFix</issues:label><issues:label>NeedsReview</issues:label><issues:stars>3</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;AkAAQn47eCl7ImA9WhNSFEU.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2842</id><published>2011-11-13T04:18:00.000Z</published><updated>2012-10-29T05:32:23.000Z</updated><title>Fix evalf documentation</title><content type='html'>evalf assumes in a few places that it is dealing with numbers so it expands or uses conjugate, 

&amp;gt;&amp;gt;&amp;gt; ((x - 1)*((1 - x))**2).n()
x**3 - 3*x**2 + 3*x - 1
&amp;gt;&amp;gt;&amp;gt; (1/((x - 1)*((1 - x))**2)).n()

conjugate(x)**3/((x*conjugate(x) - x - conjugate(x) +
1)*(x**2*conjugate(x)**2 - 2*x**2*conjugate(x) + x**2 -
2*x*conjugate(x)**2 + 4*x*conjugate(x) - 2*x +
conjugate(x)**2 - 2*conjugate(x) + 1)) -
3*conjugate(x)**2/((x*conjugate(x) - x - conjugate(x) +
1)*(x**2*conjugate(x)**2 - 2*x**2*conjugate(x) + x**2 -
2*x*conjugate(x)**2 + 4*x*conjugate(x) - 2*x +
conjugate(x)**2 - 2*conjugate(x) + 1)) +
3*conjugate(x)/((x*conjugate(x) - x - conjugate(x) +
1)*(x**2*conjugate(x)**2 - 2*x**2*conjugate(x) + x**2 -
2*x*conjugate(x)**2 + 4*x*conjugate(x) - 2*x +
conjugate(x)**2 - 2*conjugate(x) + 1)) - 1/((x*conjugate(x)
- x - conjugate(x) + 1)*(x**2*conjugate(x)**2 -
2*x**2*conjugate(x) + x**2 - 2*x*conjugate(x)**2 +
4*x*conjugate(x) - 2*x + conjugate(x)**2 - 2*conjugate(x) +
1))

With a few tweaks this becomes:

&amp;gt;&amp;gt;&amp;gt; ((x - 1)*((1 - x))**2).n()
(-x + 1.0)**2*(x - 1.0)
&amp;gt;&amp;gt;&amp;gt; (1/((x - 1)*((1 - x))**2)).n()
1/((-x + 1.0)**2*(x - 1.0))
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2842/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2842'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2842'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:cc><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:cc><issues:closedDate>2012-10-29T05:32:23.000Z</issues:closedDate><issues:id>2842</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Documentation</issues:label><issues:label>EasyToFix</issues:label><issues:stars>3</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;DEEHRH47eCl7ImA9WhNTE08.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2865</id><published>2011-11-25T04:08:33.000Z</published><updated>2012-10-15T18:43:55.000Z</updated><title>str(Matrix(...)) should give "Matrix(...)"</title><content type='html'>The string printer for Matrix returns a 2-D representation:

In [32]: str(Matrix([[1, 2], [3, 4]]))
Out[32]: 
[1, 2]
[3, 4]

But this is wrong.  If you want that, you should use the pretty printer.  str() should give something that can be used to copy and paste, so in this case, it should just return &amp;quot;Matrix([[1, 2], [3, 4]])&amp;quot;.

Also, note that for empty matrices, this should return some kind of canonical form.  For shape == (n, 0), it can return Matrix([[], [], ..., []]).  I'm not sure what the best way to do shape == (0, n) is at the moment.  I guess it should use some kind of Matrix(0, n, something).</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2865/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2865'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2865'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2865</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:label>Printing</issues:label><issues:stars>3</issues:stars><issues:state>open</issues:state><issues:status>NeedsDecision</issues:status></entry><entry gd:etag='W/&quot;CEMESX47eCl7ImA9WhJbFkQ.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2949</id><published>2011-12-29T18:09:18.000Z</published><updated>2012-09-26T20:46:48.000Z</updated><title>trig functions do not return exact results for half angles</title><content type='html'>trig functions should become exact results for half angles

sin(pi / 12) == sqrt((1 - cos(pi/6))/2) == (sqrt(3) - 1) / (2 * sqrt(2))

however, sin(pi/12) is always returned as sin(pi/12)

&amp;gt;&amp;gt;&amp;gt; sin(pi/12)
sin(pi/12)
&amp;gt;&amp;gt;&amp;gt; _.evalf()
0.258819045102521

&amp;gt;&amp;gt;&amp;gt; sqrt((1-cos(pi/6))/2)
(-3**(1/2)/4 + 1/2)**(1/2)
&amp;gt;&amp;gt;&amp;gt; _.evalf()
0.258819045102521

&amp;gt;&amp;gt;&amp;gt; (sqrt(3)-1)/(2*sqrt(2))
2**(1/2)*(-1 + 3**(1/2))/4
&amp;gt;&amp;gt;&amp;gt; _.evalf()
0.258819045102521
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2949/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2949'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2949'/><author><name>waksman@gwax.com</name><uri>/u/waksman@gwax.com/</uri></author><issues:blocking><issues:id>966</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:closedDate>2012-09-26T20:46:48.000Z</issues:closedDate><issues:id>2949</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Polynomial</issues:label><issues:label>Simplify</issues:label><issues:stars>3</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;D0IDQ347eCl7ImA9WhJbF0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3105</id><published>2012-02-26T08:40:25.000Z</published><updated>2012-09-27T14:19:32.000Z</updated><title>(a &lt; b) &amp; (c &lt; d) does not work</title><content type='html'>&amp;gt;&amp;gt;&amp;gt; from sympy import var, And
&amp;gt;&amp;gt;&amp;gt; var('a b c d')
(a, b, c, d)
&amp;gt;&amp;gt;&amp;gt; And(a &amp;lt; b, c &amp;lt; d)
And(a &amp;lt; b, c &amp;lt; d)
&amp;gt;&amp;gt;&amp;gt; (a &amp;lt; b) &amp;amp; (c &amp;lt; d)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: unsupported operand type(s) for &amp;amp;: 'StrictLessThan' and 'StrictLessThan'</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3105/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3105'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3105'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blockedOn><issues:id>1887</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:closedDate>2012-09-27T14:19:32.000Z</issues:closedDate><issues:id>3105</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Logic</issues:label><issues:stars>3</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;Ck8DRH47eCl7ImA9WhNSE0o.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3459</id><published>2012-10-26T00:15:37.000Z</published><updated>2012-10-27T20:47:55.000Z</updated><title>Wrong result from expand() with noncommutatives</title><content type='html'>In [26]: expand(A*B*(A*B)**-1)
Out[26]: A⋅B

A and B are noncommutative.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3459/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3459'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3459'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3459</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>WrongResult</issues:label><issues:label>NonCommutative</issues:label><issues:stars>3</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;Ck4NQX47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/294</id><published>2007-08-07T17:50:25.000Z</published><updated>2012-11-08T02:16:30.000Z</updated><title>Pass coverage_doctest.py</title><content type='html'>This may have been mentioned before, but I'm creating an issue specific for it.

I think there should soon be documentation in the code for most, if not
all, of the classes and functions, even if it is only a single line. This
can be useful for both the generated API documentation, and through
interactive help (i.e., the help() command in an interactive Python
session). If there is a need for this, I am fine going through all of the
code and documenting everything, or getting a good start on it.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/294/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=294'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/294'/><author><name>inferno1386</name><uri>/u/inferno1386/</uri></author><issues:blockedOn><issues:id>1587</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:blockedOn><issues:id>1949</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:blockedOn><issues:id>2010</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:blockedOn><issues:id>2932</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:id>294</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>GHOP</issues:label><issues:label>Documentation</issues:label><issues:label>asmeurer</issues:label><issues:label>CodeInCategory-Documentation</issues:label><issues:label>CodeInMultiple</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DEQDSX47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/716</id><published>2008-02-17T10:09:52.000Z</published><updated>2012-11-08T03:46:18.000Z</updated><title>Ellipse.tangent_lines needs to be more robust</title><content type='html'>In [1]: e = Ellipse(Point(0,0), 3, 2)

In [2]: t = e.tangent_line(e.random_point())

In [3]: e.is_tangent(t)
Out[3]: False


Obviously [2] and [3] are in contradiction. By plotting the result, [2] is
most probably right, so [3] is wrong.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/716/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=716'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/716'/><author><name>ondrej.c...@gmail.com</name><uri>/u/104039945248245758823/</uri></author><issues:id>716</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;AkEBRn47eCl7ImA9WhNSFkw.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/790</id><published>2008-04-17T19:15:27.000Z</published><updated>2012-10-30T17:37:37.000Z</updated><title>risch: PolynimialException when integrating not-so-trivial exponents</title><content type='html'>In [1]: e = cos(x)**2 * cos(2*x)

In [2]: ee = e.rewrite(exp)

In [3]: e
Out[3]: 
   2            
cos (x)*cos(2*x)

In [4]: ee
Out[4]: 
              2                   
⎛ ⅈ*x    -ⅈ*x⎞  ⎛ -2*ⅈ*x    2*ⅈ*x⎞
⎜ℯ      ℯ    ⎟  ⎜ℯ         ℯ     ⎟
⎜──── + ─────⎟ *⎜─────── + ──────⎟
⎝ 2       2  ⎠  ⎝   2        2   ⎠

In [5]: integrate(ee, x)
RISCH: ((1/2)*exp(I*x) + (1/2)*exp(-I*x))**2*((1/2)*exp(-2*I*x) +
(1/2)*exp(2*I*x)) ... x
---------------------------------------------------------------------------
PolynomialException                       Traceback (most recent call last)
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/790/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=790'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/790'/><author><name>kirill.s...@gmail.com</name><uri>/u/111152560333599832822/</uri></author><issues:blocking><issues:id>1127</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1961</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:cc><issues:uri>/u/101069955704897915480/</issues:uri><issues:username>matt...@gmail.com</issues:username></issues:cc><issues:cc><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:cc><issues:id>790</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Integration</issues:label><issues:label>Matching</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A0YMR347eCl7ImA9WhJbGEk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/846</id><published>2008-05-07T13:38:20.000Z</published><updated>2012-09-28T16:19:46.000Z</updated><title>test setup.py for whitespace</title><content type='html'>http://groups.google.com/group/sympy-patches/browse_thread/thread/dfd23fedcef34a4b</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/846/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=846'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/846'/><author><name>ondrej.c...@gmail.com</name><uri>/u/104039945248245758823/</uri></author><issues:closedDate>2012-09-28T16:19:46.000Z</issues:closedDate><issues:id>846</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Testing</issues:label><issues:label>NeedsReview</issues:label><issues:owner><issues:uri>/u/102137482174297837682/</issues:uri><issues:username>julien.r...@gmail.com</issues:username></issues:owner><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;DUMCRX47eCl7ImA9WhJbF0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1010</id><published>2008-08-11T18:06:30.000Z</published><updated>2012-09-27T14:51:04.000Z</updated><title>limit for 1/gamma(x) x-&gt;0</title><content type='html'>Sorry for bugging you again::)

&amp;gt;&amp;gt;&amp;gt;limit(1/gamma(x),x,0)
oo

should give 0 instead

&amp;gt;&amp;gt;&amp;gt;limit(x*gamma(x),x,0)

should give 1 instead

essentially the same for other negative integers</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1010/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1010'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1010'/><author><name>sebastia...@gmx.de</name><uri>/u/101060343249096195931/</uri></author><issues:cc><issues:uri>/u/104039945248245758823/</issues:uri><issues:username>ondrej.c...@gmail.com</issues:username></issues:cc><issues:id>1010</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>hector1618</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEUDSX47eCl7ImA9WhNSEUw.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1400</id><published>2009-04-29T17:35:38.000Z</published><updated>2012-10-24T20:57:58.000Z</updated><title>make cse optionally not to generate subexpressions that are only used once</title><content type='html'>Example:

In [1]: a1, a2, a3, a4, a5, a6 = symbols([&amp;quot;a1&amp;quot;, &amp;quot;a2&amp;quot;, &amp;quot;a3&amp;quot;, &amp;quot;a4&amp;quot;, &amp;quot;a5&amp;quot;, &amp;quot;a6&amp;quot;])

In [2]: result = sqrt((a1-a4)**2 + (a2-a5)**2 + (a3-a6)**2)

In [3]: grad = [diff(result, s) for s in (a1, a2, a3, a4, a5, a6)]

In [5]: output = [result] + grad

In [7]: cse(output)
Out[7]: 
⎛⎡                              ⎛      2⎞  ⎛      2⎞                 ⎛      2⎞
⎜⎢(x₀, a₁ - a₄), (x₁, a₃ - a₆), ⎝x₂, x₁ ⎠, ⎝x₃, x₀ ⎠, (x₄, a₂ - a₅), ⎝x₅, x₄ ⎠
⎜⎢                                                                            
⎝⎣                                                                            

                      ⎛      1   ⎞⎤  ⎡1                                       
, (x₆, x₂ + x₃ + x₅), ⎜x₇, ──────⎟⎥, ⎢──, x₀⋅x₇, x₄⋅x₇, x₁⋅x₇, x₇⋅(a₄ - a₁), x
                      ⎜      ⎽⎽⎽⎽⎟⎥  ⎣x₇                                      
                      ⎝    ╲╱ x₆ ⎠⎦                                           

                         ⎤⎞
₇⋅(a₅ - a₂), x₇⋅(a₆ - a₃)⎥⎟
                         ⎦⎟
                          ⎠


The x2, x3 and x5 are only used once. So there should be a parameter to
cse() that would optionally make cse return something like:

(
 [
   (x0, a1 - a4),
   (x1, a3 - a6),
   (x3, a2 - a5),
   (x7, (x1**2 + x3**2 + x0***2)**(-1/2))
 ], [
   1/x7,
   x0*x7,
   x3*x7,
   x1*x7,
   x7*(a4 - a1),
   x7*(a5 - a2),
   x7*(a6 - a3)
 ]
)</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1400/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1400'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1400'/><author><name>ondrej.c...@gmail.com</name><uri>/u/104039945248245758823/</uri></author><issues:id>1400</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>NeedsReview</issues:label><issues:label>smichr</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DkUAQX47eCl7ImA9WhNSFE8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1460</id><published>2009-06-06T03:30:45.000Z</published><updated>2012-10-28T11:37:20.000Z</updated><title>match is not respecting symbol in denominator</title><content type='html'>On my system, when I have a pattern like x/b and I match against 3*x the
'b' comes back as 3 instead of 1/3. (Someone else tried that pattern and
expression and got None for the match.)

###PythonWin 2.6.1 (r261:67517, Dec  4 2008, 16:51:00) [MSC v.1500 32 bit
(Intel)] on win32.
Portions Copyright 1994-2008 Mark Hammond - see 'Help/About PythonWin' for
further copyright information.
&amp;gt;&amp;gt;&amp;gt; from sympy import *
&amp;gt;&amp;gt;&amp;gt; x=Symbol('x',dummy=True);b=Wild('b',exclude=[x]);(3*x).match(x/b)
{b_: 3}

/c</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1460/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1460'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1460'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:closedDate>2012-10-27T01:12:46.000Z</issues:closedDate><issues:id>1460</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matching</issues:label><issues:label>NeedsReview</issues:label><issues:label>smichr</issues:label><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;DUECR347eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1526</id><published>2009-07-10T06:41:52.000Z</published><updated>2012-11-08T04:07:46.000Z</updated><title>simplification using trigsimp and collect</title><content type='html'>Hi,

I am trying to calculate Mass Matrices using sympy. As soon as rotations
are involved I always encounter terms like sin(x)**2+cos(x)**2.
Unfortunately trigsimp does not recognise them very often. Consider the
following basic example:

In [1]: from sympy import Symbol, sin, cos, trigsimp

In [2]: x = Symbol('x')

In [3]: trigsimp(sin(x)**3+cos(x)**2*sin(x))
Out[3]: cos(x)**2*sin(x) + sin(x)**3

If you rewrite the term for sympy, however, it works:

In [4]: trigsimp((sin(x)**2+cos(x)**2)*sin(x))
Out[4]: sin(x)

To me it seems like collect fails, since the following does not work

In [5]: from sympy import collect

In [6]: collect(sin(x)**3+cos(x)**2*sin(x), sin(x))
Out[6]: cos(x)**2*sin(x) + sin(x)**3

Regards,

Christian Schubert</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1526/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1526'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1526'/><author><name>chr.schu...@gmx.de</name><uri>/u/104475581151190546779/</uri></author><issues:cc><issues:uri>/u/118331842568896227320/</issues:uri><issues:username>hazelnu...@gmail.com</issues:username></issues:cc><issues:id>1526</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CUIHQn47eCl7ImA9WhJbEUg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1544</id><published>2009-07-19T04:11:05.000Z</published><updated>2012-09-20T15:05:33.000Z</updated><title>raises() does not properly check if code is a string</title><content type='html'>In the first line of the source code of raises(), there is an assertion that the code block in the second argument it a string:
&amp;gt;&amp;gt;&amp;gt; source(raises)
In file: ./sympy/utilities/pytest.py
def raises(ExpectedException, code):
    assert isinstance(code, str)
    frame = sys._getframe(1)
    loc = frame.f_locals.copy()
    try:
        exec code in frame.f_globals, loc
    except ExpectedException:
        return
    raise AssertionError(&amp;quot;DID NOT RAISE&amp;quot;)

But if you pass code that raises, which you usually will, then the exception of the code will be raised before the assertion:

&amp;gt;&amp;gt;&amp;gt; def raisetest():
...     raise ValueError
... 
&amp;gt;&amp;gt;&amp;gt; raises(ValueError, &amp;quot;raisetest()&amp;quot;)
&amp;gt;&amp;gt;&amp;gt; raises(ValueError, raisetest())
Traceback (most recent call last):
  File &amp;quot;&amp;lt;console&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;&amp;lt;console&amp;gt;&amp;quot;, line 2, in raisetest
ValueError
&amp;gt;&amp;gt;&amp;gt; def noraisetest():
...     return
... 
&amp;gt;&amp;gt;&amp;gt; raises(ValueError, &amp;quot;noraisetest()&amp;quot;)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;console&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;./sympy/utilities/pytest.py&amp;quot;, line 25, in raises
    raise AssertionError(&amp;quot;DID NOT RAISE&amp;quot;)
AssertionError: DID NOT RAISE
&amp;gt;&amp;gt;&amp;gt; raises(ValueError, noraisetest())
Traceback (most recent call last):
  File &amp;quot;&amp;lt;console&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;./sympy/utilities/pytest.py&amp;quot;, line 18, in raises
    assert isinstance(code, str)
AssertionError


I do not know if this is even possible to fix.  If anything raises() should be better documented so that you know that the second argument is supposed to 
be a string of code, not straight code.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1544/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1544'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1544'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blockedOn><issues:id>2876</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:cc><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:cc><issues:closedDate>2012-09-20T15:05:33.000Z</issues:closedDate><issues:id>1544</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Testing</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;DUAHR347eCl7ImA9WhJbF0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1587</id><published>2009-08-08T19:24:14.000Z</published><updated>2012-09-27T14:55:36.000Z</updated><title>Polynomials docs</title><content type='html'>By applying the following patch:

diff --git a/doc/src/modules/polynomials.txt b/doc/src/modules/polynomials.txt
index ac1bf7f..4094081 100644
--- a/doc/src/modules/polynomials.txt
+++ b/doc/src/modules/polynomials.txt
@@ -47,10 +47,10 @@ As you can see, q has a non-integer coefficient. If you
want
 only in the ring of polynomials with integer coefficients you can specify an
 additional parameter.
 
-    &amp;gt;&amp;gt;&amp;gt; q, r = div(f, g, coeff='int') #doctest: +SKIP
-    &amp;gt;&amp;gt;&amp;gt; q #doctest: +SKIP
+    &amp;gt;&amp;gt;&amp;gt; q, r = div(f, g, coeff='int')
+    &amp;gt;&amp;gt;&amp;gt; q
     0
-    &amp;gt;&amp;gt;&amp;gt; r #doctest: +SKIP
+    &amp;gt;&amp;gt;&amp;gt; r
     13 + 5*x**2 + 15*x
 
 But be warned, that this ring is no longer euclidean and that the degree
of the
@@ -58,12 +58,12 @@ remainder doesn't need to be smaller than that of f.
Since 2
 2*x doesn't divide 5*x**2, even if the degree is smaller. But:
 
     &amp;gt;&amp;gt;&amp;gt; g = 5*x + 1
-    &amp;gt;&amp;gt;&amp;gt; q, r = div(f, g, x, coeff='int') #doctest: +SKIP
-    &amp;gt;&amp;gt;&amp;gt; q #doctest: +SKIP
+    &amp;gt;&amp;gt;&amp;gt; q, r = div(f, g, x, coeff='int')
+    &amp;gt;&amp;gt;&amp;gt; q
     x
-    &amp;gt;&amp;gt;&amp;gt; r #doctest: +SKIP
+    &amp;gt;&amp;gt;&amp;gt; r
     13 + 14*x
-    &amp;gt;&amp;gt;&amp;gt; (q*g + r).expand() #doctest: +SKIP
+    &amp;gt;&amp;gt;&amp;gt; (q*g + r).expand()
     13 + 5*x**2 + 15*x
 
 This also works for polynomials with multiple variables.



it seems to reveal a bunch of bugs:

File &amp;quot;doc/src/modules/polynomials.txt&amp;quot;, line 50, in polynomials.txt
Failed example:
    q, r = div(f, g, coeff='int')
Exception raised:
    Traceback (most recent call last):
      File &amp;quot;/usr/lib/python2.6/doctest.py&amp;quot;, line 1241, in __run
        compileflags, 1) in test.globs
      File &amp;quot;&amp;lt;doctest polynomials.txt[11]&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
        q, r = div(f, g, coeff='int')
      File &amp;quot;/home/ondrej/repos/sympy/sympy/polys/wrappers.py&amp;quot;, line 60, in div
        q, r = poly_div(*_conv_args(2, args), **kwargs)
    TypeError: poly_div() got an unexpected keyword argument 'coeff'
**********************************************************************
File &amp;quot;doc/src/modules/polynomials.txt&amp;quot;, line 51, in polynomials.txt
Failed example:
    q
Expected:
    0
Got:
          5*x
    5/2 + ---
           2 
**********************************************************************
File &amp;quot;doc/src/modules/polynomials.txt&amp;quot;, line 53, in polynomials.txt
Failed example:
    r
Expected:
    13 + 5*x**2 + 15*x
Got:
    -2
**********************************************************************
File &amp;quot;doc/src/modules/polynomials.txt&amp;quot;, line 61, in polynomials.txt
Failed example:
    q, r = div(f, g, x, coeff='int')
Exception raised:
    Traceback (most recent call last):
      File &amp;quot;/usr/lib/python2.6/doctest.py&amp;quot;, line 1241, in __run
        compileflags, 1) in test.globs
      File &amp;quot;&amp;lt;doctest polynomials.txt[15]&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
        q, r = div(f, g, x, coeff='int')
      File &amp;quot;/home/ondrej/repos/sympy/sympy/polys/wrappers.py&amp;quot;, line 60, in div
        q, r = poly_div(*_conv_args(2, args), **kwargs)
    TypeError: poly_div() got an unexpected keyword argument 'coeff'
**********************************************************************
File &amp;quot;doc/src/modules/polynomials.txt&amp;quot;, line 62, in polynomials.txt
Failed example:
    q
Expected:
    x
Got:
          5*x
    5/2 + ---
           2 
**********************************************************************
File &amp;quot;doc/src/modules/polynomials.txt&amp;quot;, line 64, in polynomials.txt
Failed example:
    r
Expected:
    13 + 14*x
Got:
    -2
**********************************************************************
File &amp;quot;doc/src/modules/polynomials.txt&amp;quot;, line 66, in polynomials.txt
Failed example:
    (q*g + r).expand()
Expected:
    13 + 5*x**2 + 15*x
Got:
                     2
                 25*x 
    1/2 + 15*x + -----
                   2  
**********************************************************************
1 items had failures:
   7 of  66 in polynomials.txt
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1587/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1587'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1587'/><author><name>ondrej.c...@gmail.com</name><uri>/u/104039945248245758823/</uri></author><issues:blockedOn><issues:id>1598</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:blockedOn><issues:id>1949</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:blocking><issues:id>294</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>294</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:cc><issues:uri>/u/101069955704897915480/</issues:uri><issues:username>matt...@gmail.com</issues:username></issues:cc><issues:closedDate>2011-04-29T21:54:36.000Z</issues:closedDate><issues:id>1587</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Milestone-Release0.7.0</issues:label><issues:label>Polynomial</issues:label><issues:label>PassedReview</issues:label><issues:label>mattpap</issues:label><issues:owner><issues:uri>/u/101069955704897915480/</issues:uri><issues:username>matt...@gmail.com</issues:username></issues:owner><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CkEEQ347eCl7ImA9WhNSFEs.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1743</id><published>2009-12-04T06:19:11.000Z</published><updated>2012-10-28T21:43:22.000Z</updated><title>Make a subs() function</title><content type='html'>The following should work:

In [8]: s = x*pi

In [9]: s.subs(x, range(10))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)

/Users/aaronmeurer/Documents/Python/sympy/sympy/&amp;lt;ipython console&amp;gt; in &amp;lt;module&amp;gt;()

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/core/basic.pyc in subs(self, *args)
   1079         elif len(args) == 2:
   1080             old, new = args
-&amp;gt; 1081             return self._subs_old_new(old, new)
   1082         else:
   1083             raise TypeError(&amp;quot;subs accepts either 1 or 2 arguments&amp;quot;)

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/core/cache.pyc in wrapper(*args, **kw_args)
     80             k = args
     81         try:
---&amp;gt; 82             return func_cache_it_cache[k]
     83         except KeyError:
     84             pass

TypeError: unhashable type: 'list'

It is easy to vectorize a function, just add the decorator to the top of the function def, like with expand().  

Also, do you think we should have a dummy function subs() that calls the subs method, like we do with N() for 
evalf?

In [10]: subs(s, {x:12})
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)

/Users/aaronmeurer/Documents/Python/sympy/sympy/&amp;lt;ipython console&amp;gt; in &amp;lt;module&amp;gt;()

NameError: name 'subs' is not defined</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1743/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1743'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1743'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>1743</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>EasyToFix</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;AkEBRn47eCl7ImA9WhNSFkw.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1836</id><published>2010-02-19T02:31:19.000Z</published><updated>2012-10-30T17:37:37.000Z</updated><title>subs can see the 2 arg sum</title><content type='html'>The Mul #*(a+b) automatically gets rewritten as #*a+#*b where # is a
number. commit 1836 in smichr 1766 branch updates .subs() to look for this
term so (2*a+2*b).subs(a+b,x) is 2*x.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1836/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1836'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1836'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:blocking><issues:id>2026</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:closedDate>2012-10-25T07:49:35.000Z</issues:closedDate><issues:id>1836</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>NeedsReview</issues:label><issues:label>smichr</issues:label><issues:owner><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:owner><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>WontFix</issues:status></entry><entry gd:etag='W/&quot;C0MCQn47eCl7ImA9WhNSFkg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1851</id><published>2010-03-08T04:40:43.000Z</published><updated>2012-10-31T02:44:23.000Z</updated><title>Integral((-60*exp(x) - 19.2*exp(4*x))*exp(4*x), x).doit() extremely slow</title><content type='html'>&amp;gt;&amp;gt;&amp;gt; Integral((-60*exp(x) - 19.2*exp(4*x))*exp(4*x), x).doit()
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)

/Users/aaronmeurer/Documents/python/sympy/sympy/&amp;lt;ipython console&amp;gt; in &amp;lt;module&amp;gt;()

/Users/aaronmeurer/Documents/python/sympy/sympy/sympy/integrals/integrals.py in doit(self, 
**hints)
    152 
    153         for x,ab in self.limits:
--&amp;gt; 154             antideriv = self._eval_integral(function, x)
    155 
    156             if antideriv is None:

/Users/aaronmeurer/Documents/python/sympy/sympy/sympy/integrals/integrals.py in 
_eval_integral(self, f, x)
    345 
    346             # fall back to the more general algorithm

--&amp;gt; 347             h = heurisch(g, x, hints=[])
    348 
    349             # if we failed maybe it was because we had


/Users/aaronmeurer/Documents/python/sympy/sympy/sympy/integrals/risch.py in heurisch(f, x, 
**kwargs)
    281 
    282     s = u_split[0] * Mul(*[ k for k, v in special.iteritems() if v ])
--&amp;gt; 283     a, b, c = [ p.as_poly(*V).total_degree() for p in [s, P, Q] ]
    284 
    285     poly_denom = (s * v_split[0] * deflation(v_split[1])).as_basic()

AttributeError: 'NoneType' object has no attribute 'total_degree'
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1851/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1851'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1851'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:cc><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:cc><issues:id>1851</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Integration</issues:label><issues:label>Polynomial</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DUEMRn47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1886</id><published>2010-04-07T00:46:02.000Z</published><updated>2012-11-08T04:08:07.000Z</updated><title>Documentation for Expr</title><content type='html'>Expr needs a docstring. The split between Basic and Expr must be explained.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1886/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1886'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1886'/><author><name>Ronan.L...@gmail.com</name><uri>/u/101272611947379421629/</uri></author><issues:id>1886</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Documentation</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:owner><issues:uri>/u/101272611947379421629/</issues:uri><issues:username>Ronan.L...@gmail.com</issues:username></issues:owner><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DkABR347eCl7ImA9WhNTGEg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1982</id><published>2010-07-16T08:36:19.000Z</published><updated>2012-10-21T21:25:56.000Z</updated><title>use is None instead of == None</title><content type='html'>This issues pops up form time to time and I went ahead and made all == None into is None and != None into is not None through sympy. It will be shortly announced for review.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1982/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1982'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1982'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:closedDate>2012-10-21T21:25:56.000Z</issues:closedDate><issues:id>1982</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:owner><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:owner><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;DUAHRX47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2115</id><published>2010-12-09T17:13:33.000Z</published><updated>2012-11-08T04:08:54.000Z</updated><title>Move stuff from the Google Code SVN to git</title><content type='html'>Everything from here http://code.google.com/p/sympy/source/browse/ needs to be moved either to the GitHub wiki or the main repo.  Details on how to checkout the files on your computer are here: http://code.google.com/p/sympy/source/checkout.  Does anyone know how to transfer svn to git without losing the history?

By the way, this includes the Google Code wiki pages in it.  </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2115/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2115'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2115'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2115</issues:id><issues:label>Priority-Medium</issues:label><issues:label>Documentation</issues:label><issues:label>Type-Defect</issues:label><issues:label>CodeInCategory-Documentation</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CUMDQH47eCl7ImA9WhJbGEg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2216</id><published>2011-03-18T05:20:07.000Z</published><updated>2012-09-28T17:31:11.000Z</updated><title>Module names are imported with from sympy import *</title><content type='html'>See issue 2012, particularly comment 4.  We have

&amp;gt;&amp;gt;&amp;gt; from sympy import *
&amp;gt;&amp;gt;&amp;gt; add
&amp;lt;module 'sympy.core.add' from 'sympy/core/add.py'&amp;gt;

How can this be fixed?

Note that when I wrote the ode module, I relied on this behavior for people to access most of the docs.  i.e, from the dsolve() docstring:

 - Do help(ode.ode_hintname) to get help more information on a
          specific hint, where hintname is the name of a hint without
          &amp;quot;_Integral&amp;quot;.
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2216/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2216'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2216'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2216</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>EasyToFix</issues:label><issues:owner><issues:uri>/u/102137482174297837682/</issues:uri><issues:username>julien.r...@gmail.com</issues:username></issues:owner><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEYHR347eCl7ImA9WhNTEkk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2219</id><published>2011-03-20T11:49:32.000Z</published><updated>2012-10-14T19:15:36.000Z</updated><title>Arbitrary constants in indefinite integration</title><content type='html'>This is related Issue 1336 and Issue 1941.
These two issues are related to the solution of ODE but this one is related to the final answer of indefinite integrals
At the present sympy returns the following results.

    In [19]: integrate(1,x)
    Out[19]: x

But in more mathematical way it should be in following way -

    In [20]: integrate(1,x)
    Out[20]: c + x


And in more general cases -

    In [21]: integrate(1*y,x)
    Out[21]: f(y) + x*y
            where f(y) is arbitrary function of y.

I am working in simplified case but I have no idea how to extract information about the function f i.e. whether it is function of two or more variable.

Can anyone guide me on this?</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2219/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2219'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2219'/><author><name>hector1...@gmail.com</name><uri>/u/113469880675233906987/</uri></author><issues:blockedOn><issues:id>1336</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:cc><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:cc><issues:id>2219</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Integration</issues:label><issues:label>NeedsBetterPatch</issues:label><issues:label>hector1618</issues:label><issues:owner><issues:uri>/u/113469880675233906987/</issues:uri><issues:username>hector1...@gmail.com</issues:username></issues:owner><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;C0AEQ347eCl7ImA9WhNTEkg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2285</id><published>2011-04-17T19:56:47.000Z</published><updated>2012-10-14T21:55:02.000Z</updated><title>Orthonormal Eigenvectors required</title><content type='html'>The .diagonalize method and/or .eigenvects should have a flag, that makes it return orthonormal eignenvectors. As eigenvectors are arbitrary with respect to a multiplicative constant and thus there is a vagueness, as to which eigenvector is 'standard'. One solution given by Alexey(goodok) is to have eigenvectors with values in Integers. But its not very elegant. My suggestion is to return normalized orthonormal eigenvectors. We can decide if we want to make this behavior default or change it through a flag.

Currently, eigenvects works like this


In [40]: A = Matrix(((1,1),(0,2)))

In [41]: A.eigenvects()
Out[41]: 
⎡⎛1, 1, ⎡⎡1⎤⎤⎞, ⎛2, 1,  ⎡⎡1⎤⎤⎞⎤
⎢⎜          ⎢⎢ ⎥⎥ ⎟   ⎜         ⎢⎢  ⎥⎥ ⎥⎥
⎣⎝          ⎣⎣0⎦⎦⎠  ⎝          ⎣⎣1⎦⎦⎠⎦

But, if orthonormal is default behavior, it will return Matrix((1/sqrt(2), 1/sqrt(2))) instead of Matrix((1,1)) as the second eigenvector.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2285/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2285'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2285'/><author><name>sherjilo...@gmail.com</name><uri>/u/107298455532294735855/</uri></author><issues:closedDate>2012-10-14T21:55:02.000Z</issues:closedDate><issues:id>2285</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:label>EasyToFix</issues:label><issues:label>smichr</issues:label><issues:label>sherjilozair</issues:label><issues:owner><issues:uri>/u/107298455532294735855/</issues:uri><issues:username>sherjilo...@gmail.com</issues:username></issues:owner><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CUIMRH47eCl7ImA9WhJbEUg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2339</id><published>2011-05-05T04:39:48.000Z</published><updated>2012-09-20T15:06:25.000Z</updated><title>test_code_quality and strip_whitespace should enforce exactly one newline at the end of a file</title><content type='html'>test_code_quality and strip_whitespace already take care of no newline at the end of a file, but git doesn't like more than one newline at the end of the file either, so I think they should enforce exactly one newline at the end of the file.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2339/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2339'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2339'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:closedDate>2012-09-20T15:06:25.000Z</issues:closedDate><issues:id>2339</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Testing</issues:label><issues:label>EasyToFix</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CkUGSX47eCl7ImA9WhJbGU0.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2432</id><published>2011-05-27T04:15:22.000Z</published><updated>2012-09-29T06:30:28.000Z</updated><title>Tests without assert</title><content type='html'>When fixing issue 2308, I noticed that test_Add_primitive() in test_arit.py was just a bunch of equality checks with no assertions.  We need to go through and make sure that there are no more of these.  </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2432/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2432'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2432'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:closedDate>2012-09-28T16:37:48.000Z</issues:closedDate><issues:id>2432</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Testing</issues:label><issues:label>NeedsReview</issues:label><issues:owner><issues:uri>/u/102137482174297837682/</issues:uri><issues:username>julien.r...@gmail.com</issues:username></issues:owner><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;DkcCQX47eCl7ImA9WhJaGU8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2544</id><published>2011-07-05T18:06:41.000Z</published><updated>2012-10-11T02:54:20.000Z</updated><title>Matrix(...)[i] for non-vector matrices should not be supported.</title><content type='html'>Matrix(...)[i] for non-vector matrices should not be supported, for i being an index or a slice.
It is currently implemented in the Matrix class, but it doesn't seem to be very useful.

Currently, 

In [1]: A = randMatrix(5,5)

In [2]: A
Out[2]: 
⎡17  11  2   66  93⎤
⎢                  ⎥
⎢69  99  38  5   88⎥
⎢                  ⎥
⎢98  84  69  16  31⎥
⎢                  ⎥
⎢74  16  4   36  6 ⎥
⎢                  ⎥
⎣61  22  11  78  26⎦

In [3]: A[2:7]
Out[3]: [2, 66, 93, 69, 99]

Out[3] does not make any elegant sense, IMO.
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2544/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2544'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2544'/><author><name>sherjilo...@gmail.com</name><uri>/u/107298455532294735855/</uri></author><issues:id>2544</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:owner><issues:uri>/u/107298455532294735855/</issues:uri><issues:username>sherjilo...@gmail.com</issues:username></issues:owner><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CUcNQH47eCl7ImA9WhJUFko.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2555</id><published>2011-07-09T17:09:19.000Z</published><updated>2012-09-15T01:38:11.000Z</updated><title>Wrong result from residue</title><content type='html'>Just a simply wrong result from &amp;quot;residue&amp;quot;

In [3]: residue(exp(1/z), z, 0)
Out[3]: 0

See also the bugreport for the Maxima CAS:

http://bugs.launchpad.net/ubuntu/+source/maxima/+bug/323221
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2555/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2555'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2555'/><author><name>someb...@bluewin.ch</name><uri>/u/107490137238222069432/</uri></author><issues:blocking><issues:id>3400</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:id>2555</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Series</issues:label><issues:label>WrongResult</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DUACRH47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2587</id><published>2011-07-22T05:04:43.000Z</published><updated>2012-11-08T04:09:25.000Z</updated><title>Remove custom pickler from SymPy Live</title><content type='html'>So, it turns out that this is a problem at live.sympy.org, not just locally on my machine:

&amp;gt;&amp;gt;&amp;gt; f = 1/(x**2*(x**2 + 1))
&amp;gt;&amp;gt;&amp;gt; f
      1      
-------------
 2 / 1      \
x *|---- + 1|
   |/1 \    |
   ||--|    |
   || 2|    |
   \\x /    /

And similar for unicode.  It prints right with LaTeX.  And it works correctly in normal SymPy 0.7.0.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2587/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2587'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2587'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:cc><issues:uri>/u/101069955704897915480/</issues:uri><issues:username>matt...@gmail.com</issues:username></issues:cc><issues:cc><issues:uri>/u/101272611947379421629/</issues:uri><issues:username>Ronan.L...@gmail.com</issues:username></issues:cc><issues:id>2587</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Live</issues:label><issues:label>Printing</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>Assumptions</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DUAER347eCl7ImA9WhNSFk0.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2630</id><published>2011-08-10T13:36:45.000Z</published><updated>2012-10-30T14:35:06.000Z</updated><title>DeltaIntegrate provides wrong answer on Multivariable integrals</title><content type='html'>The following commands produce a wrong answer when using DiracDelta functions in multivariate integrals.

In [1]: densityX = exp(-x**2/2)/sqrt(2*pi) # A normal density
In [2]: densityY = exp(-y**2/2)/sqrt(2*pi)

# Check that they integrate to one
In [3]: integrate(densityX*densityY, (x, -oo, oo), (y, -oo, oo))
Out[3]: 1

In [4]: Delta = deltafunctions.DiracDelta

In [5]: integrate(densityX*densityY * Delta(10*x+y-1), (x, -oo, oo), (y, -oo, oo)).evalf()
Out[5]: 0.395002101563691

In [6]: integrate(densityX*densityY * Delta(x+10*y-1), (x, -oo, oo), (y, -oo, oo)).evalf()
Out[6]: 0.0395002101563691

The two expressions are x/y symmetric and should give the same result. Instead they are off by a factor of ten. This problem goes back at least a few months and doesn't seem to be the result of a recent change. 

Also, I tried to posted this once but I think it didn't go through. Please excuse a possible double-post.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2630/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2630'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2630'/><author><name>MRock...@gmail.com</name><uri>/u/109882876523836932473/</uri></author><issues:id>2630</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>WrongResult</issues:label><issues:label>Integration</issues:label><issues:label>NeedsReview</issues:label><issues:owner><issues:uri>/u/102137482174297837682/</issues:uri><issues:username>julien.r...@gmail.com</issues:username></issues:owner><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Started</issues:status></entry><entry gd:etag='W/&quot;DU8FSH47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2679</id><published>2011-09-08T15:14:30.000Z</published><updated>2012-11-08T04:10:19.000Z</updated><title>Refactor GA* documentation to use doctests (or move it to examples/)</title><content type='html'>There are some .py files in doc/src/modules/galgebra/GA which have some strange indentation (and aren't valid Python source files either). Aaron also noticed this and they produce (harmless) errors when 2to3 is ran on them. I've finally had a chance to look at them and they seem to be included in the main GA module documentation, GAsympy.txt. In fact, they seem to be used like a doctest - the first part of the file (indented) are the comments that produce the second half of the file (not indented). These should be converted to be actual doctests. 

Those files also haven't been touched since 2009 so it's not clear to me if anyone is even using this part of SymPy now, but fixing the docs shouldn't be too hard and can be a good introduction to SymPy for an interested developer (hence, I'm putting the EasyToFix tag here). Also, I don't think these files are ran as part of the doctest suite which means errors might be creeping in and we'd like to avoid this.

For the record, here are the errors produced when 2to3 is ran on these files:

RefactoringTool: Can't parse sympy-py3k/./doc/src/modules/galgebra/GA/reciprocalframeGAtest.py: ParseError: bad input: type=5, value='        ', context=('', (1, 0))
RefactoringTool: Can't parse sympy-py3k/./doc/src/modules/galgebra/GA/headerGAtest.py: ParseError: bad input: type=0, value='', context=('\n', (26, 0))
RefactoringTool: Can't parse sympy-py3k/./doc/src/modules/galgebra/GA/conformalgeometryGAtest.py: ParseError: bad input: type=5, value='        ', context=('', (1, 0))
RefactoringTool: Can't parse sympy-py3k/./doc/src/modules/galgebra/GA/BasicGAtest.py: ParseError: bad input: type=5, value='        ', context=('', (1, 0))
RefactoringTool: Can't parse sympy-py3k/./doc/src/modules/galgebra/GA/hyperbolicGAtest.py: ParseError: bad input: type=5, value='        ', context=('', (1, 0))</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2679/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2679'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2679'/><author><name>vlada.pe...@gmail.com</name><uri>/u/108713607268198052411/</uri></author><issues:cc><issues:uri>/u/100789173971217230647/</issues:uri><issues:username>abro...@verizon.net</issues:username></issues:cc><issues:id>2679</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Documentation</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInCategory-Documentation</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CkcCQn47eCl7ImA9WhJaF0w.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2683</id><published>2011-09-11T19:50:29.000Z</published><updated>2012-10-08T15:27:43.000Z</updated><title>det() is called when inverting matrix through GE</title><content type='html'>As noted at http://groups.google.com/group/sympy/browse_thread/thread/ba37b597b851df7c#, det() is called when inverting a Matrix with the GE method.  This is used only the check if it is non-degenerate.  This should instead be checked by the output of rref().</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2683/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2683'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2683'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:cc><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:cc><issues:closedDate>2012-10-08T15:27:43.000Z</issues:closedDate><issues:id>2683</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInDifficulty-Easy</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoMelange</issues:label><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;DEADSH47eCl7ImA9WhJbEEw.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2721</id><published>2011-10-09T03:50:30.000Z</published><updated>2012-09-19T01:06:19.000Z</updated><title>Relational assumptions</title><content type='html'>There are a lot of issues about assumptions, but I didn't see any specifically about using relational assumptions.  The idea is to be able to use things like x &amp;gt; 0 everywhere in the assumptions system, either asking if it is true or assuming it to be true.  

Note, I am marking this as blocked on the release because there is a note in the docstring of ask:

**Remarks**
    Relations in assumptions are not implemented (yet), so the following
    will not give a meaningful result.

    &amp;gt;&amp;gt;&amp;gt; ask(Q.positive(x), Q.is_true(x &amp;gt; 0)) # doctest: +SKIP

    It is however a work in progress and should be available before
    the official release

So if we don't implement this by the next release (very unlikely), this should be removed.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2721/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2721'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2721'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blockedOn><issues:id>1887</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:id>2721</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Assumptions</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DkAAQH47eCl7ImA9WhNSFUg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2762</id><published>2011-10-23T21:07:35.000Z</published><updated>2012-10-29T23:52:21.000Z</updated><title>Investigate ways to improve substitution, pattern matching, etc.</title><content type='html'>This is related to issue 2026 and this thread on the mailing list (http://groups.google.com/group/sympy/browse_thread/thread/4a19d0f39f51fda6).  The subs mechanism should be refactored so that it is more flexible.  Also, I believe it should be using the same thing internally as the pattern matching.  

The (Code-In) task here is to study this problem and discuss optimal ways to solve it.  You may also try implementing this (if we agree upon a good solution), perhaps as a separate task.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2762/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2762'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2762'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2762</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matching</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DU8BQn47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2763</id><published>2011-10-23T21:36:30.000Z</published><updated>2012-11-08T04:10:53.000Z</updated><title>Fix the SymPy Logo</title><content type='html'>The original logo is found at http://code.google.com/p/sympy/source/browse/#svn%2Fmaterials%2Flogo.  The problem is that the transparency is not done correctly on the tail, so that it does not look good unless the background is white.  We need to fix it so that it uses the correct kind of alpha channel, so that it looks good everywhere.  There is a svg image there, though I didn't have much luck with it.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2763/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2763'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2763'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2763</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Outreach</issues:label><issues:label>EasyToFix</issues:label><issues:label>NeedsBetterPatch</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DU4HQn47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2764</id><published>2011-10-23T21:43:13.000Z</published><updated>2012-11-08T04:12:13.000Z</updated><title>Improve our webpage</title><content type='html'>Our webpage at http://sympy.org/ could probably be made nicer, like with some nice CSS or html5.  The code is at https://github.com/sympy/sympy.github.com.  Also, it maybe could use better examples/explanation of what SymPy is.  </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2764/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2764'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2764'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2764</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Outreach</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DkQBQH47eCl7ImA9WhNSFUg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2766</id><published>2011-10-23T22:23:37.000Z</published><updated>2012-10-29T23:45:51.000Z</updated><title>Translate tutorial</title><content type='html'>The tutorial (http://docs.sympy.org/0.7.1/tutorial.html) should be translated into various languages, e.g., Czech, Polish, French, German, etc.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2766/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2766'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2766'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:closedDate>2012-10-29T23:45:51.000Z</issues:closedDate><issues:id>2766</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Translation</issues:label><issues:label>CodeInDifficulty-Medium</issues:label><issues:label>CodeInMultiple</issues:label><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>WontFix</issues:status></entry><entry gd:etag='W/&quot;DEACQ347eCl7ImA9WhNSFk8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2769</id><published>2011-10-23T22:30:40.000Z</published><updated>2012-10-30T19:52:42.000Z</updated><title>Make video tutorials for SymPy</title><content type='html'>We can have several Code-In tasks for this.  Create some video tutorials for SymPy, and upload them to some SymPy channel on YouTube.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2769/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2769'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2769'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2769</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInMultiple</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInCategory-Documentation</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CE8ASX47eCl7ImA9WhJbFUU.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2774</id><published>2011-10-24T06:45:05.000Z</published><updated>2012-09-25T14:20:48.000Z</updated><title>``See Also`` feature in Number Theory</title><content type='html'>Edit the doc-string to add list of other function that are closely related to the query.

Ex. 

&amp;gt;&amp;gt;&amp;gt; prime?
Docstring:
    Return the nth prime, with the primes indexed as prime(1) = 2,
    prime(2) = 3, etc.... The nth prime is approximately n*log(n) and
    can never be larger than 2**n.
    
    Reference: http://primes.utm.edu/glossary/xpage/BertrandsPostulate.html

## This is the present doc-string. One needs to add the following line

    See also : isprime, primerange, primepi</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2774/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2774'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2774'/><author><name>hector1...@gmail.com</name><uri>/u/113469880675233906987/</uri></author><issues:closedDate>2012-09-25T14:20:48.000Z</issues:closedDate><issues:id>2774</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Documentation</issues:label><issues:label>CodeInDifficulty-Easy</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInImportedIntoMelange</issues:label><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;DkMAQn47eCl7ImA9WhNSFUg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2797</id><published>2011-10-26T18:48:56.000Z</published><updated>2012-10-29T23:47:23.000Z</updated><title>Translate our webpage</title><content type='html'>Our webpage can be translated to other languages. Note that this is connected with issue #2764, about improving our webpage: if someone is working on that, there's likely no point in translating the page as it'll change.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2797/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2797'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2797'/><author><name>vlada.pe...@gmail.com</name><uri>/u/108713607268198052411/</uri></author><issues:closedDate>2012-10-29T23:47:23.000Z</issues:closedDate><issues:id>2797</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Translation</issues:label><issues:label>CodeInDifficulty-Easy</issues:label><issues:label>CodeInMultiple</issues:label><issues:label>EasyToFix</issues:label><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>WontFix</issues:status></entry><entry gd:etag='W/&quot;AkcNRn47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2799</id><published>2011-10-26T19:10:07.000Z</published><updated>2012-11-08T04:14:57.000Z</updated><title>coverage testing should be part of the bot test</title><content type='html'>Two things on my wish list for testing;

1) a coverage fingerprint of master would be compared to a given branch's coverage profile to make sure that no line has become uncovered.

2) a report of lines added that are not covered would be reported with the test-bot report.

Someone who likes parsing html (beautiful soup (*) might help with this) might enjoy this as a project. Google CodeIn?

(*) www.crummy.com/software/BeautifulSoup/</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2799/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2799'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2799'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:id>2799</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Testing</issues:label><issues:label>CodeInCategory-QA</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:owner><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:owner><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;Ck4ARH47eCl7ImA9WhJaGEU.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2802</id><published>2011-10-28T01:39:18.000Z</published><updated>2012-10-10T14:55:45.000Z</updated><title>solve error with expression with derivative</title><content type='html'>In [8]: print system[1]
2*y(t) + z(t) + Derivative(y(t), t)

In [9]: print solve(system[1], y)
[-z(t)/2 - Derivative(0, t)/2]</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2802/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2802'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2802'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:cc><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:cc><issues:cc><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:cc><issues:closedDate>2012-10-10T12:06:46.000Z</issues:closedDate><issues:id>2802</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Solvers</issues:label><issues:label>Matching</issues:label><issues:label>smichr</issues:label><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;AkUNQ347eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2841</id><published>2011-11-12T00:15:40.000Z</published><updated>2012-11-08T04:18:12.000Z</updated><title>sympy.Abs and sympy.Integral</title><content type='html'>In Dev version

&amp;gt;&amp;gt;&amp;gt; import sympy
&amp;gt;&amp;gt;&amp;gt; x = sympy.Symbol('x')
&amp;gt;&amp;gt;&amp;gt; i = sympy.integrate(sympy.Abs(x), (x, -1, 1))
&amp;gt;&amp;gt;&amp;gt; i.n()

/env/src/sympy/sympy/core/evalf.pyc in evalf(self, n, subs, maxn, chop, strict, quad, verbose)
   1022             options['quad'] = quad
   1023         try:
-&amp;gt; 1024             result = evalf(self, prec+4, options)
   1025         except NotImplementedError:
   1026             # Fall back to the ordinary evalf


/env/src/sympy/sympy/core/evalf.pyc in evalf(x, prec, options)
    954     try:
    955         rf = evalf_table[x.func]
--&amp;gt; 956         r = rf(x, prec, options)
    957     except KeyError:
    958         #r = finalize_complex(x._eval_evalf(prec)._mpf_, fzero, prec)


/env/src/sympy/sympy/core/evalf.pyc in evalf_integral(expr, prec, options)
    741     maxprec = options.get('maxprec', INF)
    742     while 1:
--&amp;gt; 743         result = do_integral(expr, workprec, options)
    744         accuracy = complex_accuracy(result)
    745         if accuracy &amp;gt;= prec or workprec &amp;gt;= maxprec:

/env/src/sympy/sympy/core/evalf.pyc in do_integral(expr, prec, options)
    706             quadrature_error = MINUS_INF
    707         else:
--&amp;gt; 708             result, quadrature_error = quadts(f, [xlow, xhigh], error=1)
    709             quadrature_error = fastlog(quadrature_error._mpf_)
    710 

/env/src/sympy/sympy/mpmath/calculus/quadrature.pyc in quadts(ctx, *args, **kwargs)
    784         &amp;quot;&amp;quot;&amp;quot;
    785         kwargs['method'] = 'tanh-sinh'
--&amp;gt; 786         return ctx.quad(*args, **kwargs)
    787 
    788     def quadgl(ctx, *args, **kwargs):

/env/src/sympy/sympy/mpmath/calculus/quadrature.pyc in quad(ctx, f, *points, **kwargs)
    741             ctx.prec += 20
    742             if dim == 1:
--&amp;gt; 743                 v, err = rule.summation(f, points[0], prec, epsilon, m, verbose)
    744             elif dim == 2:
    745                 v, err = rule.summation(lambda x: \

/env/src/sympy/sympy/mpmath/calculus/quadrature.pyc in summation(self, f, points, prec, epsilon, max_degree, verbose)
    230                     print(&amp;quot;Integrating from %s to %s (degree %s of %s)&amp;quot; % \
    231                         (ctx.nstr(a), ctx.nstr(b), degree, max_degree))
--&amp;gt; 232                 results.append(self.sum_next(f, nodes, degree, prec, results, verbose))
    233                 if degree &amp;gt; 1:
    234                     err = self.estimate_error(results, prec, epsilon)

/env/src/sympy/sympy/mpmath/calculus/quadrature.pyc in sum_next(self, f, nodes, degree, prec, previous, verbose)
    302         else:
    303             S = self.ctx.zero
--&amp;gt; 304         S += self.ctx.fdot((w,f(x)) for (x,w) in nodes)
    305         return h*S
    306 

/env/src/sympy/sympy/mpmath/ctx_mp_python.pyc in fdot(ctx, A, B, conjugate)
    923         hasattr_ = hasattr
    924         types = (ctx.mpf, ctx.mpc)
--&amp;gt; 925         for a, b in A:
    926             if type(a) not in types: a = ctx.convert(a)
    927             if type(b) not in types: b = ctx.convert(b)

/env/src/sympy/sympy/mpmath/calculus/quadrature.pyc in &amp;lt;genexpr&amp;gt;((x, w))
    302         else:
    303             S = self.ctx.zero
--&amp;gt; 304         S += self.ctx.fdot((w,f(x)) for (x,w) in nodes)
    305         return h*S
    306 

/env/src/sympy/sympy/core/evalf.pyc in f(t)
    679 
    680         def f(t):
--&amp;gt; 681             re, im, re_acc, im_acc = evalf(func, mp.prec, {'subs':{x:t}})
    682 
    683             have_part[0] = re or have_part[0]

/env/src/sympy/sympy/core/evalf.pyc in evalf(x, prec, options)
    954     try:
    955         rf = evalf_table[x.func]
--&amp;gt; 956         r = rf(x, prec, options)
    957     except KeyError:
    958         #r = finalize_complex(x._eval_evalf(prec)._mpf_, fzero, prec)


/env/src/sympy/sympy/core/evalf.pyc in evalf_abs(expr, prec, options)
    140 
    141 def evalf_abs(expr, prec, options):
--&amp;gt; 142     return get_abs(expr.args[0], prec, options)
    143 
    144 def evalf_re(expr, prec, options):

/env/src/sympy/sympy/core/evalf.pyc in get_abs(expr, prec, options)
    125         return libmp.mpc_abs((re, im), prec), None, re_acc, None
    126     else:
--&amp;gt; 127         return mpf_abs(re), None, re_acc, None
    128 
    129 def get_complex_part(expr, no, prec, options):

/env/src/sympy/sympy/mpmath/libmp/libmpf.pyc in mpf_abs(s, prec, rnd)
    653     precision. The prec argument can be omitted to generate an
    654     exact result.&amp;quot;&amp;quot;&amp;quot;
--&amp;gt; 655     sign, man, exp, bc = s
    656     if (not man) and exp:
    657         if s == fninf:

TypeError: 'NoneType' object is not iterable

</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2841/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2841'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2841'/><author><name>sat...@gmail.com</name><uri>/u/112786146078013975159/</uri></author><issues:closedDate>2012-11-08T04:18:12.000Z</issues:closedDate><issues:id>2841</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Integration</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInDifficulty-Medium</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;A0cDR347eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2859</id><published>2011-11-21T22:14:42.000Z</published><updated>2012-11-08T04:31:16.000Z</updated><title>Improve code coverage</title><content type='html'>This is a stand-in issue to increase code coverage.  While you should always be careful about writing tests for no reason other than to increase coverage, it's also good to have good coverage (I personally have found a lot of bugs this way).  I think somewhere around 90% is pretty good, and 80% is healthy.

Note that coverage is tested using the `bin/coverage_report.py` script.  This requires the coverage module (it will tell you if you try to run it and don't have it).  This will run the test suite and create a coverage report from it (it's pretty self-explanatory).  

Note that there are some subtlties with coverage testing.  It's based on lines, so for example, something like

if a or b:

will be considered covered, even if only the a condition is ever hit (it will short-circuit and not hit b).  Also, something like

if a: do_something # one line

will be considered covered even if a is never true.  The solution to this last one is to never have one-line statements like this, but to instead always write:

if a:
    do_something

which is cleaner anyway.  See also issue 1807, issue 2708, and issue 2799 for some more subtitles.

Note that this is not the same as the doctest coverage from issue 294.

I set the difficulty as Medium, because when you increase coverage, you invariably find bugs, which you then have to fix (that's the whole point of doing this anyway).</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2859/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2859'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2859'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blockedOn><issues:id>2371</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:id>2859</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInCategory-QA</issues:label><issues:label>CodeInMultiple</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A0ADRX47eCl7ImA9WhJaF00.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2866</id><published>2011-11-25T04:13:28.000Z</published><updated>2012-10-08T15:22:54.000Z</updated><title>Pretty printing of empty matrices</title><content type='html'>Right now, if either of the dimensions of an empty Matrix is 0, we pretty print it as [].  But we have:

In [43]: Matrix([[], [], []]).shape
Out[43]: (3, 0)

So I think we should print matrices with shape (n, 0) [[], [], ..., []].  The question, then, is how to print matrices with shape (0, n). I originally though to print it as 

[]
[]
...
[]

but this is actually &amp;quot;off by one&amp;quot;, i.e., if we print a 2 by 0 matrix as

[]
[]

then it will not be consistant with the 0 by 0 matrix being printed as

[]

Any thoughts on how to do this?  One idea would be to print n by 0 matrices as above, and then print the 0 by 0 matrix in some other way.  But I don't know what would be a good idea for that, other than just Matrix() (which isn't the prettiest for pretty printing).</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2866/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2866'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2866'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2866</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Printing</issues:label><issues:label>Matrices</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CUEEQn47eCl7ImA9WhJbEUg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2867</id><published>2011-11-25T14:46:05.000Z</published><updated>2012-09-20T15:06:43.000Z</updated><title>Calls to raises() should use lambda</title><content type='html'>raises() currently expects a string which it runs through the Python compiler.
This is inefficient and prevents tools from recognizing function usage (e.g. code checkers will not notice that some import is needed for a raises() call if the imported function is not used elsewhere in the module).

raises() should expect and run lambdas instead, at least as far as possible.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2867/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2867'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2867'/><author><name>j...@durchholz.org</name><uri>/u/103802103633477003048/</uri></author><issues:closedDate>2012-09-20T15:06:43.000Z</issues:closedDate><issues:id>2867</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Testing</issues:label><issues:label>NeedsReview</issues:label><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CUcHR347eCl7ImA9WhJaGU0.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2879</id><published>2011-11-28T21:20:32.000Z</published><updated>2012-10-10T21:03:56.000Z</updated><title>Use gettext for the tutorial and webpage translations</title><content type='html'>See http://groups.google.com/group/sympy/browse_thread/thread/dbf1a7692837664a.  The webpage and tutorial translations need to be converted to use gettext.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2879/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2879'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2879'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:cc><issues:uri>/u/104039945248245758823/</issues:uri><issues:username>ondrej.c...@gmail.com</issues:username></issues:cc><issues:closedDate>2012-10-10T21:03:56.000Z</issues:closedDate><issues:id>2879</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Translation</issues:label><issues:label>CodeInDifficulty-Medium</issues:label><issues:label>CodeInMultiple</issues:label><issues:label>CodeInImportedIntoMelange</issues:label><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CkQCQH47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2888</id><published>2011-12-01T01:32:46.000Z</published><updated>2012-11-08T04:52:41.000Z</updated><title>Fix docstrings to work with Sphinx</title><content type='html'>This is somewhat blocked on issue 2597, but there are docs already in Sphinx that need fixing too.

Basically, all docs should look good in Sphinx, and also in plain text.  With the numpydoc extension, many things are automatically converted to Sphinx. These should not use Sphinx syntax, since this looks better in plain text. Also, headings should be underlined with =, like

Examples
========

And of course, there should be no warnings when the docs build.

For Code-In, create one task per module.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2888/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2888'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2888'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blockedOn><issues:id>2597</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:id>2888</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Documentation</issues:label><issues:label>CodeInMultiple</issues:label><issues:label>Documentation</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CUUFSH47eCl7ImA9WhJaF08.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2940</id><published>2011-12-23T09:28:22.000Z</published><updated>2012-10-08T19:06:59.000Z</updated><title>Convert the examples to use IPython notebooks</title><content type='html'>See http://groups.google.com/group/sympy/browse_thread/thread/ace027476440d373.

We should convert our examples to use the new IPython notebook.  We should also convert them to html when we release (preferably automatically with setup.py), so that people can still view them (non-interactively) if they don't have IPython.

IPython is currently working on a way to do doctesting, but in the mean time, it's not difficult to whip up a custom solution (see https://github.com/ipython/ipython/issues/1195).</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2940/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2940'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2940'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blockedOn><issues:id>3426</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:blocking><issues:id>2790</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:id>2940</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Documentation</issues:label><issues:label>IPython</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;D0EASX47eCl7ImA9WhNSFUo.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2943</id><published>2011-12-24T20:14:59.000Z</published><updated>2012-10-30T05:40:48.000Z</updated><title>rsolve: wrong result</title><content type='html'>Not necessarily wrong, but trivial.

sympy:

In [16]: rsolve(a*f(n+1)-b**2*f(n)-f(n+2), f(n), {2:a**2-b**2, 3:a**3-2*a*b**2})
Out[16]: 0

or the same system written differently

In [18]: rsolve(a*f(n-1)-b**2*f(n-2)-f(n), f(n), {2:a**2-b**2, 1:a})
Out[18]: 0

mathematica:

http://www.wolframalpha.com/input/?i=RSolve[{d[n]+%3D%3D+a+d[n+-+1]+-+b^2+d[n-2]%2C+d[1]+%3D%3D+a%2C+d[2]+%3D%3D+a^2+-+b^2}%2C+d[n]%2C+n]</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2943/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2943'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2943'/><author><name>krastano...@gmail.com</name><uri>/u/100157245271348669141/</uri></author><issues:id>2943</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>WrongResult</issues:label><issues:label>Solvers</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CUQNR347eCl7ImA9WhNTEUQ.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2947</id><published>2011-12-29T05:50:29.000Z</published><updated>2012-10-14T05:43:16.000Z</updated><title>Allow to change globals in sympify() </title><content type='html'>sympify() has &amp;quot;exec 'from sympy import *' in globals' hard coded into the parser.  You can set the locals, but not the globals.  </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2947/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2947'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2947'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2947</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Parsing</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CkYMSH47eCl7ImA9WhNTF0U.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2968</id><published>2012-01-06T14:31:34.000Z</published><updated>2012-10-21T00:43:09.000Z</updated><title>partial fraction decomposition should be able to return structured result</title><content type='html'>Some algorithms internally use partial fraction decomposition. For these it would be helpful if apart could optionally return a list of (numerator, denoma, denomb, exponent) denoting a sum of numerator/(denoma*x + denombb)**exponent terms.

This would in particular be helpful for hyperexpand (lerch phi expansion) where this data is currently assembeled by hand from the return Expr instance.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2968/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2968'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2968'/><author><name>ness...@gmail.com</name><uri>/u/104531927090589914088/</uri></author><issues:blocking><issues:id>3037</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:id>2968</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Polynomial</issues:label><issues:label>EasyToFix</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;D0ACQn47eCl7ImA9WhJbF0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2975</id><published>2012-01-10T01:37:57.000Z</published><updated>2012-09-27T14:22:43.000Z</updated><title>Simplification of hypebolic identity.</title><content type='html'>Now we have simplification of trigonometric Pythagorean identity:

    In [25]: (cos(x)**2 + sin(x)**2).simplify()
    Out[25]: 1

And analogous derived from it, e.g.

    In [7]: simplify(1 - sin(x)**2)
    Out[7]: cos(x)**2



But it seems that there are no analogical simplification for hyperbolic:

    In [26]: (cosh(x)**2 - sinh(x)**2).simplify()
    Out[26]: -sinh(x)**2 + cosh(x)**2

(must be 1)

The questions:

1. What is the status of it? (I didn't find the related issue, but may be it present)

2. For the trigonometry the function 'trigsimp' is used internally in 'symplify' (or it can be called directly). Should we add the hyperbolic maintaining to this function, or create analog of 'trigsimp' (e.g. 'hypersimp')?
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2975/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2975'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2975'/><author><name>pr...@goodok.ru</name><uri>/u/109448925098397033296/</uri></author><issues:closedDate>2012-09-27T14:22:43.000Z</issues:closedDate><issues:id>2975</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Simplify</issues:label><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;DkUNQn47eCl7ImA9WhJbF0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3182</id><published>2012-03-23T22:12:11.000Z</published><updated>2012-09-27T13:58:13.000Z</updated><title>Option to isympy to automatically use Rational for int/int</title><content type='html'>We have an option to isympy to automatically construct missing Symbols (although it doesn't work with the latest IPython, see issue 3048).  I imagine it should be possible to add another option that uses IPython to automatically convert int_literal/int_literal to S(int_literal)/S(int_literal).  </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3182/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3182'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3182'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:closedDate>2012-09-27T13:58:13.000Z</issues:closedDate><issues:id>3182</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>IPython</issues:label><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;A08NQX47eCl7ImA9WhJaF00.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3196</id><published>2012-03-26T19:58:26.000Z</published><updated>2012-10-08T15:24:50.000Z</updated><title>Matrix class is lost in repr</title><content type='html'>    &amp;gt;&amp;gt;&amp;gt; str(ImmutableMatrix([[]]))
    '[]'

This may be soon fixed to at least print Matrix(1, 0, []) but it should also have the correct class on the string that is printed.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3196/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3196'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3196'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:id>3196</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Accepted</issues:status></entry><entry gd:etag='W/&quot;C0UMR347eCl7ImA9WhNSEUw.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3289</id><published>2012-06-11T09:29:21.000Z</published><updated>2012-10-24T20:41:26.000Z</updated><title>substitute warnings for print statements</title><content type='html'>There are some places in the code where print statements are used instead of warnings (eg in solve). This should probably be corrected.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3289/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3289'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3289'/><author><name>krastano...@gmail.com</name><uri>/u/100157245271348669141/</uri></author><issues:id>3289</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>EasyToFix</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DU8ERX47eCl7ImA9WhNSFk0.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3328</id><published>2012-07-19T15:02:46.000Z</published><updated>2012-10-30T14:36:44.000Z</updated><title>Integrating simple DiracDelta</title><content type='html'>I want to compute the following integral

∞ 1 1                                
⌠ ⌠ ⌠                                
⎮ ⎮ ⎮ DiracDelta(-z + x - y) dy dx dz
⌡ ⌡ ⌡                                
0 0 0                                

integrate(integrate(integrate(DiracDelta(-z + x - y), (y, 0, 1)), (x, 0 ,1)), (z, 0, oo))

which becomes 
integrate(integrate(
    -Heaviside(x - z) + Heaviside(x - z - 1)
    , (x, 0 ,1)), (z, 0, oo))

the next integral involves lots of G functions. The final integral fails.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3328/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3328'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3328'/><author><name>MRock...@gmail.com</name><uri>/u/109882876523836932473/</uri></author><issues:id>3328</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Integration</issues:label><issues:label>WrongResult</issues:label><issues:label>NeedsReview</issues:label><issues:owner><issues:uri>/u/102137482174297837682/</issues:uri><issues:username>julien.r...@gmail.com</issues:username></issues:owner><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Started</issues:status></entry><entry gd:etag='W/&quot;AkAGRn47eCl7ImA9WhJbFUo.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3349</id><published>2012-08-04T01:29:48.000Z</published><updated>2012-09-25T13:12:07.000Z</updated><title>gremlin in master</title><content type='html'>Occasionally a gremlin ([?1034h) is printed during tests of ask.py and ipython.py doctests: 

sympy/assumptions/ask.py[2] [?1034h..                                              [OK]
sympy/interactive/tests/test_ipython.py[1] [?1034h.                                [OK]

Details:

executable:         /sw/bin//python2.7  (2.7.3-final-0)
architecture:       64-bit
cache:              yes
ground types:       python
hash randomization: on (PYTHONHASHSEED=3549590290)
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3349/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3349'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3349'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:id>3349</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Testing</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CUACRn47eCl7ImA9WhJaGU0.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3388</id><published>2012-08-26T21:34:31.000Z</published><updated>2012-10-10T21:16:07.000Z</updated><title>Fix some Sphinx translation problems</title><content type='html'>At the bottom of the tutorial (currently the only page in the Sphinx docs that is translated), it's supposed to list the other languages with links, but it doesn't work.

Also, if you pass the Sphinx docs through Google translate, it translates the examples.  We should see if it's possible to add &amp;lt;span class=&amp;quot;notranslate&amp;gt; (see http://support.google.com/translate/?hl=en#2641276)  to the blocks.  Or maybe this should be done on the Sphinx side.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3388/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3388'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3388'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3388</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Documentation</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;AkMGR347eCl7ImA9WhJbEU8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3402</id><published>2012-09-19T15:37:02.000Z</published><updated>2012-09-20T08:07:06.000Z</updated><title>replace() should pass objects not strings to value function</title><content type='html'>I'm trying to use replace to apply trigonometric identities:

In [4]: from sympy import Wild, cos, sin
   ...: from sympy.abc import x,y,p,q
   ...: 
   ...: expr = p*sin(x)*sin(y) - p*cos(x)*cos(y) + q
   ...: 
   ...: K = Wild('K', properties=[lambda x: x != 0])
   ...: A,B,C = map(Wild, 'ABC')
   ...: 
   ...: def repl(**m):
   ...:     r = K*cos(A+B) + C
   ...:     if ((m['C'] == -m['K']*cos(m['A'])*cos(m['B'])) or
   ...:         (m['C'] ==  m['K']*sin(m['A'])*sin(m['B']))):
   ...:         return None # this match isn't a real match
   ...:     return r.subs([(Wild(k),v) for k,v in m.items()])
   ...: 
   ...: expr.replace(K*cos(A)*cos(B) - K*sin(A)*sin(B) + C, repl)
Out[4]: q + K_*cos(x + y)

The Wild K is not substituted because the properties do not match. In this case, it would be better if repl() was passed a dictionary with Wild objects rather than strings as keys. This would also be consistent with the dictionaries returned by match() and subs(map=True), which use objects as keys.

(if there is an easier alternative way of achieving this simplification I would of course be happy to hear too!)
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3402/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3402'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3402'/><author><name>r.lup...@gmail.com</name><uri>/u/105767089042807008718/</uri></author><issues:id>3402</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>New</issues:status></entry><entry gd:etag='W/&quot;C0YEQn47eCl7ImA9WhJbEk0.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3403</id><published>2012-09-20T03:26:36.000Z</published><updated>2012-09-21T04:18:23.000Z</updated><title>'Mul' object has no attribute '_eval_expand_trig'</title><content type='html'>Triggered by:

In [1]: from sympy import *
In [2]: x,y=symbols('x,y')
In [3]: cos(x+y).expand(trig=True)
Out[3]: -sin(x)*sin(y) + cos(x)*cos(y)  #Ok

In [4]: cos(x-y).expand(trig=True)
AttributeError: 'Mul' object has no attribute '_eval_expand_trig'</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3403/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3403'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3403'/><author><name>g.c.b.at...@gmail.com</name><uri>/u/117190402697463982798/</uri></author><issues:closedDate>2012-09-21T04:18:23.000Z</issues:closedDate><issues:id>3403</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Simplify</issues:label><issues:label>NeedsReview</issues:label><issues:owner><issues:uri>/u/102137482174297837682/</issues:uri><issues:username>julien.r...@gmail.com</issues:username></issues:owner><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;AkYBQ347eCl7ImA9WhJbGU8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3405</id><published>2012-09-23T19:02:00.000Z</published><updated>2012-09-29T14:15:52.000Z</updated><title>Add simplify keyword to inv</title><content type='html'>The doc says : 
&amp;quot;
If (result length)/(input length) &amp;gt; ratio, then input is returned
        unmodified. If 'ratio=oo', then simplify() is applied anyway.
&amp;quot;

but nothing is returned at all. 

suggest to return self, so following is possible:
R = (B*A.inv().simplify()).simplify()

</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3405/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3405'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3405'/><author><name>svhb1...@gmail.com</name><uri>/u/106465677728715806354/</uri></author><issues:id>3405</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DU8GQ347eCl7ImA9WhJaEEs.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3412</id><published>2012-10-01T05:03:42.000Z</published><updated>2012-10-01T05:03:42.000Z</updated><title>Targed expansion</title><content type='html'>See https://groups.google.com/forum/?fromgroups=#!topic/sympy/pCcmpkhpbL8 for more details.  We want a way to expand something like

(x + a)*(b + c + x + y) in only a, b, and c, resulting in x*(x + y) + x*b + a*b + a*c + a*(x + y).</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3412/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3412'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3412'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3412</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Simplify</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DUEMQX47eCl7ImA9WhJaFUk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3422</id><published>2012-10-06T18:21:20.000Z</published><updated>2012-10-06T18:21:20.000Z</updated><title>WignerD with angles all 0 should return delta function</title><content type='html'>When all the angles passed to the Wigner-D function are zero, it would be nice if it returned a KroneckerDelta, rather than a Wigner small-d function. Currently it gives:

In [1]: from sympy.physics.quantum.spin import WignerD

In [2]: j, m, mp = symbols('j m mp')

In [3]: WignerD(j, m, mp, 0, 0, 0)
Out[3]: 
  j     
d    (0)
 m,mp   

It's easy to do a `if args[3:] == (0, 0, 0):` in the __new__ function and return a KroneckerDelta:

In [4]: WignerD(j, m, mp, 0, 0, 0)
Out[4]: 
δ
 m,mp

But just doing this will mess up some other stuff with the rewrite machinery:

In [5]: from sympy.physics.quantum.spin import JzKet

In [6]: JzKet(j, m).rewrite('Jz')
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-19-6ad2c34dbd31&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 JzKet(j, m).rewrite('Jz')

/home/sean/sympy/sympy/core/basic.pyc in rewrite(self, *args, **hints)
   1386 
   1387             if not pattern:
-&amp;gt; 1388                 return self._eval_rewrite(None, rule, **hints)
   1389             else:
   1390                 if iterable(pattern[0]):

/home/sean/sympy/sympy/physics/quantum/qexpr.pyc in _eval_rewrite(self, pattern, rule, **hints)
    330         if pattern is None or isinstance(self, pattern):
    331             if hasattr(self, rule):
--&amp;gt; 332                 rewritten = getattr(self, rule)(*args, **hints)
    333 
    334                 if rewritten is not None:

/home/sean/sympy/sympy/physics/quantum/spin.py in _eval_rewrite_as_Jz(self, *args, **options)
    903         if isinstance(self, Bra):
    904             return self._rewrite_basis(Jz, JzBra, **options)
--&amp;gt; 905         return self._rewrite_basis(Jz, JzKet, **options)
    906 
    907     def _rewrite_basis(self, basis, evect, **options):

/home/sean/sympy/sympy/physics/quantum/spin.py in _rewrite_basis(self, basis, evect, **options)
    943             else:
    944                 state = evect(j, mi, *args)
--&amp;gt; 945                 lt = Rotation.D(j, mi, self.m, *angles)
    946                 return Sum(lt * state, (mi,-j,j))
    947 

TypeError: D() takes exactly 7 arguments (4 given)

This really comes down to addressing the 'TODO: better way to get angles of rotation' in _rewrite_basis and 'TODO: Use KroneckerDelta if all Euler angles == 0' in _represent_base.

A good test for this is:

qapply(Jz * JzKet(1, m)) == -hbar * KroneckerDelta(-1, m) * JzKet(1, -1) + hbar * KroneckerDelta(1, m) * JzKet(1, 1)

while not causing any of the rewrite/represent tests to fail.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3422/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3422'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3422'/><author><name>sean.v....@gmail.com</name><uri>/u/113046012287564521760/</uri></author><issues:id>3422</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Physics</issues:label><issues:label>Quantum</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CUAER347eCl7ImA9WhJaFkk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3423</id><published>2012-10-07T03:08:56.000Z</published><updated>2012-10-07T21:01:46.000Z</updated><title>sympify can't handle keyword arguments</title><content type='html'>In [15]: sympify(&amp;quot;factorint(12, visual=True)&amp;quot;)
---------------------------------------------------------------------------
SympifyError                              Traceback (most recent call last)
&amp;lt;ipython-input-15-0f51cfe66993&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 sympify (&amp;quot;factorint(12, visual=True)&amp;quot;)

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/core/sympify.pyc in sympify(a, locals, convert_xor, strict, rational)
    178         expr = parse_expr(a, locals or {}, rational, convert_xor)
    179     except (TokenError, SyntaxError):
--&amp;gt; 180         raise SympifyError('could not parse %r' % a)
    181 
    182     return expr

SympifyError: SympifyError: &amp;quot;could not parse u'factorint(12, visual=True)'&amp;quot;</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3423/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3423'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3423'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3423</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Parsing</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DUAMRn47eCl7ImA9WhJaF00.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3424</id><published>2012-10-07T03:40:02.000Z</published><updated>2012-10-08T14:49:47.000Z</updated><title>The pdf files created by "make latex" should be put in the _build directory</title><content type='html'>Anyone savvy with Makefiles?  I can't figure out how to make the .svg.pdf target of the docs Makefile put the pdf files in _build, rather than the same directory as the svg files.  The reason we want to do that is that _build is in .gitignore and the other directory isn't.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3424/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3424'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3424'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3424</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Documentation</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;C0INR347eCl7ImA9WhJaFUU.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3425</id><published>2012-10-07T03:46:36.000Z</published><updated>2012-10-07T03:46:36.000Z</updated><title>Can't do integrate(exp(-2*c*d*x*(1-x)-2*c*x), (x, 0, p))</title><content type='html'>c, d, x, p = symbols('c d x p')
integrate(exp(-2*c*d*x*(1-x)-2*c*x), (x, 0, p))

Just gives an Integral.  http://www.wolframalpha.com/input/?i=integrate(exp(-2*c*d*x*(1-x)-2*c*x)%2C+(x%2C+0%2C+p))&amp;amp;dataset= gives a nice closed form answer in terms of erfi (the imaginary error function, see http://mathworld.wolfram.com/Erfi.html.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3425/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3425'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3425'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3425</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Integration</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;C0ICSX47eCl7ImA9WhJaGU8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3432</id><published>2012-10-10T16:26:24.000Z</published><updated>2012-10-11T02:12:48.000Z</updated><title>powsimp with Assumptions does not work.</title><content type='html'>(tested in sympy0.7.2-RC1)

&amp;gt;&amp;gt;&amp;gt; powsimp((sqrt(Symbol('x', real=True))*sqrt(Symbol('y', real=True))), force=True)
sqrt(x*y)
// This is ok

&amp;gt;&amp;gt;&amp;gt; powsimp((sqrt(Symbol('x', real=True, positive=True))*sqrt(Symbol('y', real=True, positive=True))))
sqrt(x)*sqrt(y)
// This should also return 'sqrt(x*y)' since x and y are both positive

&amp;gt;&amp;gt;&amp;gt; powsimp((sqrt(Symbol('x', real=True, positive=True))*sqrt(Symbol('y', real=True, positive=True))), force=True)
sqrt(x)*sqrt(y)
// This should defenitly return sqrt(x*y), because force is True and x and y are positive
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3432/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3432'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3432'/><author><name>roeland....@gmail.com</name><uri>/u/103368556974859032297/</uri></author><issues:id>3432</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>New</issues:status></entry><entry gd:etag='W/&quot;D0MCQH47eCl7ImA9WhNTFE0.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3433</id><published>2012-10-11T09:44:59.000Z</published><updated>2012-10-16T16:37:41.000Z</updated><title>radsimp takes forever</title><content type='html'>in sympy 0.7.2-RC1
&amp;gt;&amp;gt;&amp;gt; x = Symbol('x')
&amp;gt;&amp;gt;&amp;gt; radsimp(1/sqrt(x))

-&amp;gt; no result, computation takes forever</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3433/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3433'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3433'/><author><name>roeland....@gmail.com</name><uri>/u/103368556974859032297/</uri></author><issues:closedDate>2012-10-16T16:37:41.000Z</issues:closedDate><issues:id>3433</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Simplify</issues:label><issues:label>NeedsReview</issues:label><issues:label>smichr</issues:label><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;DUUDQX47eCl7ImA9WhNTEks.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3439</id><published>2012-10-14T11:34:46.000Z</published><updated>2012-10-15T02:14:30.000Z</updated><title>Don't pollute global namaespace with plot.</title><content type='html'>Running from sympy import * as is the default in isympy 
results in sympys plot function being imported into the global namespace. 
That is not very smart since that function is already in pylab and is normally matplotlib.pyplot.plot. This will result in weird problems for the users expecting mpl's function. 

Either this should not be called plot but sympy_plot symbolic_plot ect.

Or the function should not be imported into the global namespace.

Or you should stop shipping isympy with from sympy import *
and change it to import sympy as sp or something. 

</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3439/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3439'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3439'/><author><name>jenshnie...@gmail.com</name><uri>/u/107559068263855095769/</uri></author><issues:closedDate>2012-10-14T18:27:46.000Z</issues:closedDate><issues:id>3439</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>2</issues:stars><issues:state>closed</issues:state><issues:status>WontFix</issues:status></entry><entry gd:etag='W/&quot;CUEGQX47eCl7ImA9WhNSEkU.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3458</id><published>2012-10-25T18:47:07.000Z</published><updated>2012-10-26T20:33:40.000Z</updated><title>Simultaneous subs fails on non-exprs</title><content type='html'>Simultaneous substitution uses Dummy and Symbol, causing Subs on non-Exprs to fail.

In [1]: X = MatrixSymbol('X', 2, 2)
In [2]: Y = MatrixSymbol('Y', 2, 2)
In [3]: A = MatrixSymbol('A', 3, 3)
In [4]: B = MatrixSymbol('B', 3, 3)
In [5]: expr = X*Y
In [6]: d = {X:A, Y:B}
In [7]: expr.subs(d, simultaneous = True)
AttributeError: 'MatrixSymbol' object has no attribute 'as_base_exp'

The simple solution does not work because the expression is evaluated half-way through the substitution.
In [8]: expr.subs(d)
ShapeError: Matrices A and Y are not aligned</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3458/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3458'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3458'/><author><name>MRock...@gmail.com</name><uri>/u/109882876523836932473/</uri></author><issues:id>3458</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;AkUARH47eCl7ImA9WhNSEkQ.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3460</id><published>2012-10-27T00:37:25.000Z</published><updated>2012-10-27T00:37:25.000Z</updated><title>'Infinity' object has no attribute 'q'</title><content type='html'>Python 2.7.3 (default, Aug  1 2012, 05:16:07) 
[GCC 4.6.3] on linux2
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; -log(-12*sqrt(2) + 17)/24 - log(-2*sqrt(2) + 3)/12 + sqrt(2)/3
-log(-2*sqrt(2) + 3)/12 - log(-12*sqrt(2) + 17)/24 + sqrt(2)/3
&amp;gt;&amp;gt;&amp;gt; cse(_)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;sympy/simplify/cse_main.py&amp;quot;, line 322, in cse
    reduced_exprs[j] = update(expr)
  File &amp;quot;sympy/simplify/cse_main.py&amp;quot;, line 318, in &amp;lt;lambda&amp;gt;
    update = lambda x: x.subs(subtree, sym)
  File &amp;quot;sympy/core/basic.py&amp;quot;, line 875, in subs
    rv = rv._subs(old, new)
  File &amp;quot;sympy/core/cache.py&amp;quot;, line 92, in wrapper
    func_cache_it_cache[k] = r = func(*args, **kw_args)
  File &amp;quot;sympy/core/basic.py&amp;quot;, line 974, in _subs
    rv = fallback(self, old, new)
  File &amp;quot;sympy/core/basic.py&amp;quot;, line 961, in fallback
    arg = arg._subs(old, new, **hints)
  File &amp;quot;sympy/core/cache.py&amp;quot;, line 92, in wrapper
    func_cache_it_cache[k] = r = func(*args, **kw_args)
  File &amp;quot;sympy/core/basic.py&amp;quot;, line 972, in _subs
    rv = self._eval_subs(old, new)
  File &amp;quot;sympy/core/mul.py&amp;quot;, line 1211, in _eval_subs
    self2 = n._subs(old, new)/d._subs(old, new)
  File &amp;quot;sympy/core/cache.py&amp;quot;, line 92, in wrapper
    func_cache_it_cache[k] = r = func(*args, **kw_args)
  File &amp;quot;sympy/core/basic.py&amp;quot;, line 974, in _subs
    rv = fallback(self, old, new)
  File &amp;quot;sympy/core/basic.py&amp;quot;, line 961, in fallback
    arg = arg._subs(old, new, **hints)
  File &amp;quot;sympy/core/cache.py&amp;quot;, line 92, in wrapper
    func_cache_it_cache[k] = r = func(*args, **kw_args)
  File &amp;quot;sympy/core/basic.py&amp;quot;, line 974, in _subs
    rv = fallback(self, old, new)
  File &amp;quot;sympy/core/basic.py&amp;quot;, line 961, in fallback
    arg = arg._subs(old, new, **hints)
  File &amp;quot;sympy/core/cache.py&amp;quot;, line 92, in wrapper
    func_cache_it_cache[k] = r = func(*args, **kw_args)
  File &amp;quot;sympy/core/basic.py&amp;quot;, line 974, in _subs
    rv = fallback(self, old, new)
  File &amp;quot;sympy/core/basic.py&amp;quot;, line 961, in fallback
    arg = arg._subs(old, new, **hints)
  File &amp;quot;sympy/core/cache.py&amp;quot;, line 92, in wrapper
    func_cache_it_cache[k] = r = func(*args, **kw_args)
  File &amp;quot;sympy/core/basic.py&amp;quot;, line 972, in _subs
    rv = self._eval_subs(old, new)
  File &amp;quot;sympy/core/mul.py&amp;quot;, line 1288, in _eval_subs
    rat.append(ndiv(c_e, old_e))
  File &amp;quot;sympy/core/mul.py&amp;quot;, line 1202, in ndiv
    if not b.q % a.q or not a.q % b.q:
AttributeError: 'Infinity' object has no attribute 'q'
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3460/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3460'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3460'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:id>3460</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A0cMSH47eCl7ImA9WhNSFUU.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3462</id><published>2012-10-29T12:05:52.000Z</published><updated>2012-10-30T09:24:49.000Z</updated><title>_eval_power problem</title><content type='html'>&amp;gt;&amp;gt;&amp;gt; var('a', commutative=False)
a
&amp;gt;&amp;gt;&amp;gt; sqrt(-a).expand()
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;sympy/functions/elementary/miscellaneous.py&amp;quot;, line 108, in sqrt
    return C.Pow(arg, S.Half)
  File &amp;quot;sympy/core/cache.py&amp;quot;, line 92, in wrapper
    func_cache_it_cache[k] = r = func(*args, **kw_args)
  File &amp;quot;sympy/core/power.py&amp;quot;, line 99, in __new__
    obj = b._eval_power(e)
  File &amp;quot;sympy/core/mul.py&amp;quot;, line 573, in _eval_power
    bc[0] = -bc[0]
IndexError: list index out of range
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3462/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3462'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3462'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:id>3462</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Started</issues:status></entry><entry gd:etag='W/&quot;CE4ARX47eCl7ImA9WhNSFk4.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3467</id><published>2012-10-30T20:30:00.000Z</published><updated>2012-10-30T21:35:44.000Z</updated><title>create a proof of concept ManipulateSeries in our plotting module</title><content type='html'>we want interactive plots with sliders</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3467/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3467'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3467'/><author><name>krastano...@gmail.com</name><uri>/u/100157245271348669141/</uri></author><issues:id>3467</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEEDRn47eCl7ImA9WhNREEQ.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3490</id><published>2012-11-01T15:40:50.000Z</published><updated>2012-11-05T05:17:57.000Z</updated><title>stats.Normal not taking symbolic standard deviation (wants 'positive')</title><content type='html'>&amp;gt;&amp;gt;&amp;gt; from sympy import stats
&amp;gt;&amp;gt;&amp;gt; from sympy.abc import x,m,s
&amp;gt;&amp;gt;&amp;gt; stats.Normal('x',m,s)


ValueError: Standard deviation must be positive</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3490/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3490'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3490'/><author><name>recko...@gmail.com</name><uri>/u/105517973368047177830/</uri></author><issues:cc><issues:uri>/u/109882876523836932473/</issues:uri><issues:username>MRock...@gmail.com</issues:username></issues:cc><issues:id>3490</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Statistics</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CUQCRX47eCl7ImA9WhNSFUU.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1227</id><published>2008-12-01T22:17:18.000Z</published><updated>2012-10-30T07:49:24.000Z</updated><title>Integration failure</title><content type='html'>Well, I was trying to calculate the volume of a cylindrical wedge (
http://mathworld.wolfram.com/CylindricalWedge.html )

In [1]: R, b, h = symbols('Rbh', Real=True)

In [2]: x = symbols('x')

In [3]: 2*integrate(((h*(x-R+b))/b)*sqrt(R**2-x**2), (x, R-b, R))
Out[3]: 
    R                                
    ⌠                                
    ⎮        ⎽⎽⎽⎽⎽⎽⎽⎽⎽               
    ⎮       ╱  2    2                
    ⎮   h⋅╲╱  R  - x  ⋅(b + x - R)   
2⋅  ⎮   ────────────────────────── dx
    ⎮               b                
    ⌡                                
  R - b               </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1227/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1227'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1227'/><author><name>plaes...@gmail.com</name><uri>/u/111211129517653688844/</uri></author><issues:blockedOn><issues:id>1397</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:id>1227</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Integration</issues:label><issues:label>WrongResult</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CkYARn47eCl7ImA9WhNSFUs.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1323</id><published>2009-03-10T14:12:59.000Z</published><updated>2012-10-30T01:22:27.000Z</updated><title>integrate(1/sqrt(16 + 4*x**2), x) fails</title><content type='html'>&amp;gt;&amp;gt;&amp;gt; integrate(1/sqrt(16 + 4*x**2), x)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 2, in &amp;lt;module&amp;gt;
  File &amp;quot;sympy/utilities/decorator.py&amp;quot;, line 55, in threaded_decorator
    return func(expr, *args, **kwargs)
  File &amp;quot;sympy/integrals/integrals.py&amp;quot;, line 381, in integrate
    return integral.doit()
  File &amp;quot;sympy/integrals/integrals.py&amp;quot;, line 133, in doit
    antideriv = self._eval_integral(function, x)
  File &amp;quot;sympy/integrals/integrals.py&amp;quot;, line 306, in _eval_integral
    h = heurisch(g, x, hints=[])
  File &amp;quot;sympy/integrals/risch.py&amp;quot;, line 216, in heurisch
    denom = reduce(lambda p, q: lcm(p, q, V), denoms)
  File &amp;quot;sympy/integrals/risch.py&amp;quot;, line 216, in &amp;lt;lambda&amp;gt;
    denom = reduce(lambda p, q: lcm(p, q, V), denoms)
  File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 3, in lcm
  File &amp;quot;sympy/polys/wrappers.py&amp;quot;, line 23, in _map_basic
    result = f(*_conv_args(n, args), **kwargs)
  File &amp;quot;sympy/polys/algorithms.py&amp;quot;, line 370, in poly_lcm
    f, g = f.unify_with(g)
  File &amp;quot;sympy/polys/polynomial.py&amp;quot;, line 1525, in unify_with
    other = cls(other, *symbols, **flags)
  File &amp;quot;sympy/polys/polynomial.py&amp;quot;, line 402, in __new__
    terms = Poly._decompose(poly, *symbols)
  File &amp;quot;sympy/polys/polynomial.py&amp;quot;, line 545, in _decompose
    raise PolynomialError(&amp;quot;Can't decompose %s&amp;quot; % factor)
sympy.polys.polynomial.PolynomialError: Can't decompose (4 + _x3**2)**(1/2)

Result should be (according to integrals.wolfram.com):

(1/2) * asinh(x/2)</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1323/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1323'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1323'/><author><name>Vinzent.Steinberg@gmail.com</name><uri>/u/Vinzent.Steinberg@gmail.com/</uri></author><issues:blockedOn><issues:id>1393</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:cc><issues:uri>/u/101069955704897915480/</issues:uri><issues:username>matt...@gmail.com</issues:username></issues:cc><issues:closedDate>2012-10-30T01:22:27.000Z</issues:closedDate><issues:id>1323</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Integration</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CkYBR347eCl7ImA9WhNSFUs.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1393</id><published>2009-04-22T10:35:25.000Z</published><updated>2012-10-30T01:22:36.000Z</updated><title>Implement heuristics for integrating common algebraic functions</title><content type='html'>In [15]: integrate(x**2 * sqrt(5-x**2), x)
Out[15]: 
⌠                  
⎮       ⎽⎽⎽⎽⎽⎽⎽⎽   
⎮  2   ╱      2    
⎮ x ⋅╲╱  5 - x   dx
⌡                  
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1393/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1393'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1393'/><author><name>ondrej.c...@gmail.com</name><uri>/u/104039945248245758823/</uri></author><issues:blocking><issues:id>1020</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1020</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1304</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1323</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1392</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1394</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2363</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2844</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2850</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:cc><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:cc><issues:cc><issues:uri>/u/104531927090589914088/</issues:uri><issues:username>ness...@gmail.com</issues:username></issues:cc><issues:id>1393</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Integration</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;AkAFRn47eCl7ImA9WhNSFUg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1397</id><published>2009-04-28T22:34:20.000Z</published><updated>2012-10-30T00:58:37.000Z</updated><title>solve fails for a sum of two fractions</title><content type='html'>In [28]: A = x**2/(7-x)

In [29]: A.diff(x)
Out[29]: 
            2   
 2⋅x       x    
───── + ────────
7 - x          2
        (7 - x) 

In [30]: solve(A.diff(x), x)
---------------------------------------------------------------------------
AssertionError                            Traceback (most recent call last)

/home/ondrej/repos/sympy/&amp;lt;ipython console&amp;gt; in &amp;lt;module&amp;gt;()

/home/ondrej/repos/sympy/sympy/solvers/solvers.pyc in solve(f, *symbols,
**flags)
    175         if strategy == GS_POLY:
    176             poly = f.as_poly( symbol )
--&amp;gt; 177             assert poly is not None
    178             result = roots(poly, cubics=True, quartics=True).keys()
    179 

AssertionError: 

In [31]: solve(simplify(A.diff(x)), x)
Out[31]: [14, 0]



As you can see, [30] fails, but if you help the solver by first simplifying
in [31], it works and returns the correct result.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1397/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1397'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1397'/><author><name>ondrej.c...@gmail.com</name><uri>/u/104039945248245758823/</uri></author><issues:blocking><issues:id>1227</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1227</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:closedDate>2011-06-11T17:36:39.000Z</issues:closedDate><issues:id>1397</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Solvers</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;DUEFRX47eCl7ImA9WhNSFk0.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1423</id><published>2009-05-19T22:51:38.000Z</published><updated>2012-10-30T14:33:34.000Z</updated><title>integrating DiracDelta fails sometimes</title><content type='html'>In [3]: integrate((1 -4*x + x*y -4*y )*DiracDelta(x)*DiracDelta(-1 + y),
(x, 0, 1), (y,0,1))
Out[3]: -3/4

In [4]: integrate((4 -4*x + x*y -4*y )*DiracDelta(x)*DiracDelta(-1 + y),
(x, 0, 1), (y,0,1))
Out[4]: 
1 1                                                             
⌠ ⌠                                                             
⎮ ⎮ (4 - 4⋅x - 4⋅y + x⋅y)⋅DiracDelta(x)⋅DiracDelta(-1 + y) dx dy
⌡ ⌡                                                             
0 0                                                             
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1423/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1423'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1423'/><author><name>ondrej.c...@gmail.com</name><uri>/u/104039945248245758823/</uri></author><issues:id>1423</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>NeedsReview</issues:label><issues:owner><issues:uri>/u/102137482174297837682/</issues:uri><issues:username>julien.r...@gmail.com</issues:username></issues:owner><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Started</issues:status></entry><entry gd:etag='W/&quot;DUUBSX47eCl7ImA9WhJbF0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1769</id><published>2009-12-16T18:03:40.000Z</published><updated>2012-09-27T14:47:38.000Z</updated><title>cos(oo) should return nan</title><content type='html'>In [78]: sin(oo)
Out[78]: sin(∞)

In [79]: cos(oo)
--------------------------------------------------------------------------
-
ZeroDivisionError                         Traceback (most recent call last)

/Users/aaronmeurer/Documents/Python/sympy/sympy/&amp;lt;ipython console&amp;gt; in &amp;lt;module&amp;gt;()

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/core/multidimensional.pyc in 
wrapper(*args, **kwargs)
    125                     result = apply_on_element(wrapper, args, kwargs, n)
    126                     return result
--&amp;gt; 127             return f(*args, **kwargs)
    128         wrapper.__doc__ = f.__doc__
    129         wrapper.__name__ = f.__name__

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/core/cache.pyc in wrapper(*args, 
**kw_args)
     83         except KeyError:
     84             pass
---&amp;gt; 85         func_cache_it_cache[k] = r = func(*args, **kw_args)
     86         return r
     87 

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/core/function.pyc in __new__(cls, 
*args, **options)
    139         if options.get('evaluate') is False:
    140             return Basic.__new__(cls, *args, **options)
--&amp;gt; 141         evaluated = cls.eval(*args)
    142         if evaluated is not None: return evaluated
    143         # Just undefined functions have nargs == None


/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/functions/elementary/trigonome
tric.pyc in eval(cls, arg)
    299                 q = pi_coeff.q
    300 
--&amp;gt; 301                 Q, P = 2*p // q, p % q
    302 
    303                 try:

ZeroDivisionError: integer division or modulo by zero

However, both should return nan in my opinion.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1769/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1769'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1769'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>1769</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>sapta.iitkgp</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>NeedsDecision</issues:status></entry><entry gd:etag='W/&quot;C0EFSH47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1818</id><published>2010-02-04T18:12:56.000Z</published><updated>2012-11-08T05:13:39.000Z</updated><title>coeff and collect failures on x**(1+x)</title><content type='html'>From commit 1818 in branch 1766:

    1818: coeff, collect handle x**(1+y)

    When asking for the coeff of something like x**(1+x) there
    were two problems:

    1) expand was used on self but no 'x' so x**(1+x) became
    x*x**x in self but not in `x` so the match failed.

    2) when the powers were being re-assembled in collect, the
    rebuilding of x*x**x became (x**2)**x

    Those have been fixed and tests added.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1818/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1818'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1818'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:blockedOn><issues:id>1980</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:blockedOn><issues:id>2114</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:id>1818</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:owner><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:owner><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CUUBQ347eCl7ImA9WhNSFUU.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1869</id><published>2010-03-21T08:49:59.000Z</published><updated>2012-10-30T07:47:32.000Z</updated><title>integrate(sin(log(x**2))) always treats x as positive</title><content type='html'>I run integrate(sin(log(x**2))) and it takes forever.  It works on Reduce
(and Mathematica).  integrate(sin(log(x))) works.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1869/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1869'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1869'/><author><name>mdh...@gmail.com</name><uri>/u/109974008365542506984/</uri></author><issues:id>1869</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Integration</issues:label><issues:label>WrongResult</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DUcMQ347eCl7ImA9WhJbF0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1998</id><published>2010-07-22T03:56:21.000Z</published><updated>2012-09-27T14:44:42.000Z</updated><title>Can't use @deprecated, @wraps in the core</title><content type='html'>Functions from sympy.utilities such as any, all, iff, @deprecated,... cannot be used in some parts of the core due to import circularity, even though they have no external dependencies themselves.

I suggest moving minkey(), iff(), all(), any() from sympy.utilities.iterables to a new module in the core, maybe sympy.core.compatibility, and transferring @deprecated from sympy.utilities.decorator to sympy. </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1998/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1998'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1998'/><author><name>Ronan.L...@gmail.com</name><uri>/u/101272611947379421629/</uri></author><issues:closedDate>2012-09-27T14:44:42.000Z</issues:closedDate><issues:id>1998</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:owner><issues:uri>/u/101272611947379421629/</issues:uri><issues:username>Ronan.L...@gmail.com</issues:username></issues:owner><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;DkIDSX47eCl7ImA9WhJbFEk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2103</id><published>2010-11-14T20:02:57.000Z</published><updated>2012-09-23T23:56:18.000Z</updated><title>fix sympy's internal dependencies</title><content type='html'>I used snakefood [1] to generate a dependency graph, see the attached pdf.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2103/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2103'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2103'/><author><name>Vinzent.Steinberg@gmail.com</name><uri>/u/Vinzent.Steinberg@gmail.com/</uri></author><issues:closedDate>2012-09-23T23:56:18.000Z</issues:closedDate><issues:id>2103</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Invalid</issues:status></entry><entry gd:etag='W/&quot;CEYCSH47eCl7ImA9WhNTEkk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2232</id><published>2011-03-25T14:39:00.000Z</published><updated>2012-10-14T19:16:09.000Z</updated><title>naming conflict for library function generated symbols.</title><content type='html'>For example,

1. cse function returns expressions with new symbols (x0, x1, x2)

http://docs.sympy.org/dev/modules/simplify.html?highlight=cse#module-sympy.simplify.cse_main

2. indefinite integration will add constant. https://github.com/sympy/sympy/pull/149

Because a user might be already using those symbols, x0, x1, c, constant.. etc.. so there can be a conflict.

Mathematica seems to reserve 'C' for that issue, (user can't declare C).

Any thoughts?</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2232/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2232'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2232'/><author><name>kkb...@gmail.com</name><uri>/u/116631529576673851438/</uri></author><issues:id>2232</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matching</issues:label><issues:label>Simplify</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DEABQH47eCl7ImA9WhJbF0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2251</id><published>2011-03-30T19:46:01.000Z</published><updated>2012-09-27T14:39:11.000Z</updated><title>quantum.spin.J?Ket ambiguous printing</title><content type='html'>When using both JzKet and JxKet with the same j and m arguments the output for both is |j,m&amp;gt;. It's messy and hard to read/understand the output.

It's worse when working with 1/2 spin systems as one needs J_xyz_Ket(1/2,+-1/2) and for all 6 of those kets there are only two output strings |1/2,1/2&amp;gt; and |1/2,-1/2&amp;gt;.

And if I want for some reason u=JzKet(1/2,1/2) + JxKet(1/2,1/2) the output will be the unhelpful |1/2,1/2&amp;gt; + |1/2,1/2&amp;gt;.

Maybe there should be a way to change the content of the brackets for any quantum.State (or quantum.Ket) independently? </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2251/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2251'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2251'/><author><name>krastano...@gmail.com</name><uri>/u/100157245271348669141/</uri></author><issues:id>2251</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>krastanov.stefan</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;C04BSH47eCl7ImA9WhJaGEg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2275</id><published>2011-04-13T10:28:40.000Z</published><updated>2012-10-10T06:52:39.000Z</updated><title>is_upper and is_lower should imply that the matrix is square</title><content type='html'>I assume upper and lower are short forms for upper triangular matrix and lower triangular matrix.
If that is the case, then A.is_upper should either return False or an Error, when A is not square. In my opinion, it should return False.

Currently,

In [53]: A = Matrix((1,2,3))

In [54]: A
Out[54]: 
⎡1⎤
⎢ ⎥
⎢2⎥
⎢ ⎥
⎣3⎦

In [55]: A.is_lower()
Out[55]: True

Opinions ?
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2275/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2275'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2275'/><author><name>sherjilo...@gmail.com</name><uri>/u/107298455532294735855/</uri></author><issues:closedDate>2012-10-10T06:52:39.000Z</issues:closedDate><issues:id>2275</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:label>EasyToFix</issues:label><issues:label>Documentation</issues:label><issues:label>NeedsReview</issues:label><issues:label>smichr</issues:label><issues:owner><issues:uri>/u/107298455532294735855/</issues:uri><issues:username>sherjilo...@gmail.com</issues:username></issues:owner><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;A0ICRX47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2276</id><published>2011-04-13T21:16:22.000Z</published><updated>2012-11-08T04:39:24.000Z</updated><title>integrate() should use the ode module's undetermined coefficients solver when possible</title><content type='html'>So my comment 8 from issue 2219 made me realize something.  Consider the following:

In [242]: integrate(x**2*exp(x)*sin(x), x)
Out[242]: 
   x           2  x                  x                  2         x
  ℯ ⋅sin(x)   x ⋅ℯ ⋅sin(x)   cos(x)⋅ℯ              x   x ⋅cos(x)⋅ℯ 
- ───────── + ──────────── - ───────── + x⋅cos(x)⋅ℯ  - ────────────
      2            2             2                          2      

In [245]: dsolve(f(x).diff(x) - x**2*exp(x)*sin(x), f(x), hint='nth_linear_constant_coeff_undetermined_coefficients')
Out[245]: 
             x           2  x                  x                  2         x
            ℯ ⋅sin(x)   x ⋅ℯ ⋅sin(x)   cos(x)⋅ℯ              x   x ⋅cos(x)⋅ℯ 
f(x) = C₁ - ───────── + ──────────── - ───────── + x⋅cos(x)⋅ℯ  - ────────────
                2            2             2                          2      

In [246]: %timeit integrate(x**2*exp(x)*sin(x), x)
1 loops, best of 3: 10.7 s per loop

In [247]: %timeit dsolve(f(x).diff(x) - x**2*exp(x)*sin(x), f(x), hint='nth_linear_constant_coeff_undetermined_coefficients')
1 loops, best of 3: 232 ms per loop

dsolve() is way faster because it just computes the necessary form of the integral and solves for the undetermined coefficients.  No complicated integration algorithm is needed.  

So I think if the integral has the correct form, that internally integrate(expr, x, x, ...) should use dsolve's internal undetermined coefficient algorithms for solving f(x).diff(x, x, …) - expr.  All the necessary stuff is already in ode.py, including the function that checks if expr is of the correct form.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2276/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2276'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2276'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2276</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Integration</issues:label><issues:label>EasyToFix</issues:label><issues:label>Solvers</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;C0QMQ347eCl7ImA9WhNTEkg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2280</id><published>2011-04-16T04:17:37.000Z</published><updated>2012-10-14T21:49:42.000Z</updated><title>Expr._eval_interval returns itself when evaluated to a NaN</title><content type='html'>In lines 174 - 186 in sympy/core/expr.py we see that expr returns itself when evaluated to a NaN. Is there any specific reason for this behaviour? This needs to be fixed because its the root cause of issue 1100</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2280/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2280'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2280'/><author><name>sapta.ii...@gmail.com</name><uri>/u/108133104953261185619/</uri></author><issues:blocking><issues:id>1100</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>1100</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:closedDate>2012-10-14T21:49:42.000Z</issues:closedDate><issues:id>2280</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>sapta.iitkgp</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;C04ARX47eCl7ImA9WhJaGEg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2291</id><published>2011-04-21T23:27:34.000Z</published><updated>2012-10-10T06:52:24.000Z</updated><title>is_diagonal should not check for square</title><content type='html'>The Matrix method is_diagonal should work with non-square matrix too.
In a way similar to how the is_upper and is_lower don't check for square.
Matrices like 

[1, 0, 0, 0]
[0, 1, 0, 0]
[0, 0, 1, 0]

and

[1, 0, 0, 0]
[0, 1, 0, 0]
[0, 0, 1, 0]
[0, 0, 0, 1]
[0, 0, 0, 0]

should also be considered diagonal.

If modifying is_diagonal is not acceptable, then perhaps we can have another method with name asymmetric diagonal or something similar.

In SVD, the diagonal Matrix in the center can be non-square. That is the reason I'm putting up this issue.
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2291/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2291'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2291'/><author><name>sherjilo...@gmail.com</name><uri>/u/107298455532294735855/</uri></author><issues:closedDate>2012-10-10T06:52:24.000Z</issues:closedDate><issues:id>2291</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:label>NeedsReview</issues:label><issues:label>smichr</issues:label><issues:owner><issues:uri>/u/107298455532294735855/</issues:uri><issues:username>sherjilo...@gmail.com</issues:username></issues:owner><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CkcDQX47eCl7ImA9WhNSEEQ.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2340</id><published>2011-05-05T05:52:22.000Z</published><updated>2012-10-24T14:47:50.000Z</updated><title>Float(1) returns Integer</title><content type='html'>Since the Real constructor is being used I would expect a Real result, regardless of input. Otherwise one has to do Real(float(int)) to get a Real result for it.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2340/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2340'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2340'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:cc><issues:uri>/u/111502149103757882156/</issues:uri><issues:username>fredrik....@gmail.com</issues:username></issues:cc><issues:closedDate>2012-10-21T21:08:58.000Z</issues:closedDate><issues:id>2340</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>smichr</issues:label><issues:label>NeedsReview</issues:label><issues:owner><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:owner><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CkEMQ347eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2427</id><published>2011-05-26T04:13:20.000Z</published><updated>2012-11-08T04:58:02.000Z</updated><title>use free_symbols, not .atoms() or .atoms(Symbol)</title><content type='html'>If any code wants to know if there are variables that are free like x but not y in Integral(y, (y, 1, x)) then it should use expr.free_symbols, not .atoms(Symbol) (since that would have given x and y for the example given). The code should be checked for instances of .atoms(Symbol) to see what the author intended and corrected if necessary.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2427/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2427'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2427'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:blockedOn><issues:id>3309</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:id>2427</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:owner><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:owner><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;Ck8HQH47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2525</id><published>2011-06-28T05:03:42.000Z</published><updated>2012-11-08T05:00:31.000Z</updated><title>Make the session frame at live.sympy.org resizable</title><content type='html'>It would be nice to be able to resize the session window at live.sympy.org, so I can make it fill my screen.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2525/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2525'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2525'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blockedOn><issues:id>2874</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:closedDate>2012-11-08T05:00:31.000Z</issues:closedDate><issues:id>2525</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Live</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInCategory-UI</issues:label><issues:label>CodeInDifficulty-Easy</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;C0ENQH47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2530</id><published>2011-06-29T10:01:07.000Z</published><updated>2012-11-08T05:14:51.000Z</updated><title>collect shouldn't consider a collection a success unless something was collected...right?</title><content type='html'>    &amp;gt;&amp;gt;&amp;gt; collect(e+a*b, [aA**3/Re, b])
    D**3*a/Re + a*b + aA**3*b/Re

The docstring says that patterns are handled in the order given, but the aA**3/Re didn't collect anything so it shouldn't disallow b from returning

    D**3*a/Re + b*(a + aA**3/Re)</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2530/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2530'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2530'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:id>2530</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Simplify</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:owner><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:owner><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A04DQX47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2570</id><published>2011-07-19T02:46:07.000Z</published><updated>2012-11-08T04:46:10.000Z</updated><title>Remove bare except statements</title><content type='html'>If you do git grep &amp;quot;except:&amp;quot; you will see that there are several places in the code with bare except statements that should be rewritten to catch explicit exceptions.  To quote the Zen of Python:

Errors should never pass silently.
Unless explicitly silenced.

And to quite PEP 8:

- When catching exceptions, mention specific exceptions
      whenever possible instead of using a bare 'except:' clause.

      For example, use:

          try:
              import platform_specific_module
          except ImportError:
              platform_specific_module = None

      A bare 'except:' clause will catch SystemExit and KeyboardInterrupt
      exceptions, making it harder to interrupt a program with Control-C,
      and can disguise other problems.  If you want to catch all
      exceptions that signal program errors, use 'except Exception:'.

      A good rule of thumb is to limit use of bare 'except' clauses to two
      cases:

         1) If the exception handler will be printing out or logging
            the traceback; at least the user will be aware that an
            error has occurred.

         2) If the code needs to do some cleanup work, but then lets
            the exception propagate upwards with 'raise'.
            'try...finally' is a better way to handle this case.

To be sure, some of the bare except cases in the code are correct by the above (like the ones in the test runner), but many are not.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2570/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2570'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2570'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2570</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DEUERn47eCl7ImA9WhJbF0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2583</id><published>2011-07-21T06:35:01.000Z</published><updated>2012-09-27T14:30:07.000Z</updated><title>Poly kills SymPy Live</title><content type='html'>If you enter any kind of Poly at live.sympy.org, it stops executing any further expressions.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2583/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2583'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2583'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2583</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Live</issues:label><issues:label>EasyToFix</issues:label><issues:owner><issues:uri>/u/101069955704897915480/</issues:uri><issues:username>matt...@gmail.com</issues:username></issues:owner><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Started</issues:status></entry><entry gd:etag='W/&quot;A0AEQ347eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2588</id><published>2011-07-22T05:07:39.000Z</published><updated>2012-11-08T04:41:42.000Z</updated><title>Don't allow empty execution in SymPy Live</title><content type='html'>I think that empty execution (typing Shift-Enter or clicking execute) when there is no text in the box, or only newlines, should do nothing.  

This could be argued, though. The way it is now is consistent with a standard Python interpreter.  But it just feels to me that this should not work this way.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2588/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2588'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2588'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:closedDate>2012-11-08T04:41:42.000Z</issues:closedDate><issues:id>2588</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Live</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInDifficulty-Easy</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CkMFQ347eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2594</id><published>2011-07-22T20:15:39.000Z</published><updated>2012-11-08T04:53:32.000Z</updated><title>Better handling of multi-line statements at SymPy Live</title><content type='html'>If you enter &amp;quot;def f(x):&amp;quot; at SymPy Live and click &amp;quot;Evaluate&amp;quot;, you get a SyntaxError: unexpected EOF while parsing.

I don't think it's clear to a new user that you have to put a function definition all on one line (though I can't say for sure what is and what isn't clear to a new user).  In Python and IPython, entering something like this automatically asks for new stuff. Perhaps we should do the same.  I'm not sure what the best solution here is, actually.  Should we make Shift-Enter and Enter act the same (create a newline) when the previous line ends in &amp;quot;:&amp;quot;?  Should we &amp;quot;evaluate&amp;quot; it, but still allow further indented stuff to be queued in (this would be harder to do architecturally)?  Or should we leave it as it is, but make it clearer that you can evaluate multiple lines at once?
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2594/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2594'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2594'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2594</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Live</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DEcCRX47eCl7ImA9WhJbF0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2638</id><published>2011-08-17T01:35:58.000Z</published><updated>2012-09-27T14:27:44.000Z</updated><title>Bug with Product</title><content type='html'>In [1]: Product(2**(1/factorial(n)), (n, 0, oo))
ERROR: An unexpected error occurred while tokenizing input
The following traceback may be corrupted or invalid
The error message is: ('EOF in multi-line statement', (4, 0))

---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)
/Users/aaronmeurer/Documents/python/sympy/sympy-scratch/&amp;lt;ipython-input-1-0755716d40a3&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 Product(2**(1/factorial(n)), (n, 0, oo))

/Users/aaronmeurer/Documents/python/sympy/sympy-scratch/sympy/concrete/products.pyc in __new__(cls, term, *symbols, **assumptions)
     39 
     40             if isinstance(a, C.Number) and isinstance(n, C.Number):
---&amp;gt; 41                 return Mul(*[term.subs(k, i) for i in xrange(int(a), int(n)+1)])
     42         else:
     43             raise NotImplementedError

/Users/aaronmeurer/Documents/python/sympy/sympy-scratch/sympy/core/numbers.pyc in __int__(self)
    750 
    751     def __int__(self):
--&amp;gt; 752         return int(float(self.p)/self.q)
    753 
    754     def __eq__(self, other):

ZeroDivisionError: float division by zero
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2638/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2638'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2638'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:closedDate>2012-09-27T14:27:44.000Z</issues:closedDate><issues:id>2638</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Concrete</issues:label><issues:owner><issues:uri>/u/asmeurer@gmail.com/</issues:uri><issues:username>asmeurer@gmail.com</issues:username></issues:owner><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;Ck4AQH47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2768</id><published>2011-10-23T22:26:24.000Z</published><updated>2012-11-08T05:02:21.000Z</updated><title>Add a feed of what people are doing at SymPy Live</title><content type='html'>It would be cool to have a little feed at the right on live.sympy.org to show what other people are entering, so that people can see what sorts of things are being done.  Of course, you should be able to disable this for your own entries, for privacy reasons.  It should allow you to input the same expression in your session and execute it.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2768/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2768'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2768'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2768</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Live</issues:label><issues:label>CodeInCategory-UI</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A0EHR347eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2772</id><published>2011-10-23T23:27:45.000Z</published><updated>2012-11-08T04:40:36.000Z</updated><title>Some UI/GUI for the test runner</title><content type='html'>It would be cool to have some UI/GUI for the test runner that makes it easier to see the failures when they happen.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2772/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2772'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2772'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2772</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-UI</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;Ck4NQX47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2773</id><published>2011-10-23T23:45:08.000Z</published><updated>2012-11-08T05:03:10.000Z</updated><title>Implement the trigsimp algorithm by fu et al</title><content type='html'>Implement the algorithm for trigonometric simplification from the paper &amp;quot;Automated and readable simplification of trigonometric expressions&amp;quot; by Fu, et. al. (you should be able to find the paper for free from Google Scholar, otherwise email me and I will send it to you).</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2773/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2773'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2773'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2773</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Simplify</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEAFRX47eCl7ImA9WhJbFUU.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2775</id><published>2011-10-24T08:37:15.000Z</published><updated>2012-09-25T14:18:34.000Z</updated><title>``See Also`` feature in Combinatorics </title><content type='html'>Edit the doc-string to add list of other function that are closely related to the query.


This is the list of .py files which contains the functions.

sympy/combinatorics/generators.py  
sympy/combinatorics/prufer.py
sympy/combinatorics/graycode.py
sympy/combinatorics/permutations.py  
sympy/combinatorics/subsets.py

There are around 98(at max) functions which one needs to understand (the input parameters and final result and not the code) to interrelate them.


</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2775/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2775'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2775'/><author><name>hector1...@gmail.com</name><uri>/u/113469880675233906987/</uri></author><issues:closedDate>2012-09-25T14:18:34.000Z</issues:closedDate><issues:id>2775</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Documentation</issues:label><issues:label>CodeInDifficulty-Easy</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInImportedIntoMelange</issues:label><issues:label>Combinatorics</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CUQCQ347eCl7ImA9WhJbFUU.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2777</id><published>2011-10-24T09:11:20.000Z</published><updated>2012-09-25T14:29:22.000Z</updated><title>``See Also`` feature in functions</title><content type='html'>Edit the doc-string to add list of other function that are closely related to the query.


This is the list of .py files which contains the functions.

sympy/functions/combinatorial/factorials.py
sympy/functions/combinatorial/numbers.py
sympy/functions/elementary/trigonometric.py  
sympy/functions/elementary/integers.py
sympy/functions/elementary/exponential.py
sympy/functions/elementary/piecewise.py
sympy/functions/elementary/complexes.py
sympy/functions/elementary/miscellaneous.py
sympy/functions/elementary/hyperbolic.py

There are around 52 functions which one needs to understand (the input parameters and final result and not the code) to interrelate them.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2777/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2777'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2777'/><author><name>hector1...@gmail.com</name><uri>/u/113469880675233906987/</uri></author><issues:closedDate>2012-09-25T14:29:22.000Z</issues:closedDate><issues:id>2777</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Documentation</issues:label><issues:label>CodeInDifficulty-Easy</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInImportedIntoMelange</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;C0UHRX47eCl7ImA9WhJbFUU.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2778</id><published>2011-10-24T09:18:28.000Z</published><updated>2012-09-25T13:53:54.000Z</updated><title>``See Also`` feature in functions/special</title><content type='html'>Edit the doc-string to add list of other function that are closely related to the query.


This is the list of .py files which contains the functions.

sympy/functions/special/zeta_functions.py
sympy/functions/special/delta_functions.py
sympy/functions/special/tensor_functions.py
sympy/functions/special/hyper.py
sympy/functions/special/bsplines.py
sympy/functions/special/spherical_harmonics.py
sympy/functions/special/gamma_functions.py
sympy/functions/special/bessel.py
sympy/functions/special/polynomials.py
sympy/functions/special/error_functions.py

There are around 62 functions which one needs to understand (the input parameters and final result and not the code) to interrelate them.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2778/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2778'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2778'/><author><name>hector1...@gmail.com</name><uri>/u/113469880675233906987/</uri></author><issues:closedDate>2012-09-25T13:53:54.000Z</issues:closedDate><issues:id>2778</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Documentation</issues:label><issues:label>CodeInDifficulty-Easy</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInImportedIntoMelange</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;C0QAQH47eCl7ImA9WhJbFUU.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2779</id><published>2011-10-24T09:26:16.000Z</published><updated>2012-09-25T13:55:41.000Z</updated><title>``See Also`` feature in Geometry</title><content type='html'>Edit the doc-string to add list of other function that are closely related to the query.


This is the list of .py files which contains the functions.

sympy/geometry/curve.py
sympy/geometry/ellipse.py
sympy/geometry/entity.py
sympy/geometry/exceptions.py
sympy/geometry/__init__.py
sympy/geometry/line.py
sympy/geometry/point.py
sympy/geometry/polygon.py
sympy/geometry/util.py

There are around 150 functions which one needs to understand (the input parameters and final result and not the code) to interrelate them.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2779/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2779'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2779'/><author><name>hector1...@gmail.com</name><uri>/u/113469880675233906987/</uri></author><issues:closedDate>2012-09-25T13:55:41.000Z</issues:closedDate><issues:id>2779</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Documentation</issues:label><issues:label>CodeInDifficulty-Medium</issues:label><issues:label>CodeInImportedIntoMelange</issues:label><issues:label>Geometry</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CUQGRH47eCl7ImA9WhJbFUU.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2780</id><published>2011-10-24T09:30:44.000Z</published><updated>2012-09-25T14:28:45.000Z</updated><title>``See Also`` feature in Matrices</title><content type='html'>Edit the doc-string to add list of other function that are closely related to the query.

This is the list of .py files which contains the functions.

sympy/matrices.py

There are around 69 functions which one needs to understand (the input parameters and final result and not the code) to interrelate them.
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2780/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2780'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2780'/><author><name>hector1...@gmail.com</name><uri>/u/113469880675233906987/</uri></author><issues:closedDate>2012-09-25T14:28:45.000Z</issues:closedDate><issues:id>2780</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Documentation</issues:label><issues:label>CodeInDifficulty-Easy</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInImportedIntoMelange</issues:label><issues:label>Matrices</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;AkAERH47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2789</id><published>2011-10-25T16:26:34.000Z</published><updated>2012-11-08T04:25:05.000Z</updated><title>minpoly should work with roots of unity in exponential form</title><content type='html'>In [12]: minpoly(exp(I*pi/8))
ERROR: An unexpected error occurred while tokenizing input
The following traceback may be corrupted or invalid
The error message is: ('EOF in multi-line statement', (16, 0))
---------------------------------------------------------------------------
NotAlgebraic                              Traceback (most recent call last)
/Users/aaronmeurer/Documents/python/sympy/sympy/&amp;lt;ipython-input-12-73afdce8b677&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 minpoly(exp(I*pi/8))

/Users/aaronmeurer/Documents/python/sympy/sympy/sympy/polys/numberfields.pyc in minimal_polynomial(ex, x, **args)
    129         result = ex.q*x - ex.p
    130     else:
--&amp;gt; 131         F = [x - bottom_up_scan(ex)] + mapping.values()
    132         G = groebner(F, symbols.values() + [x], order='lex')
    133 

/Users/aaronmeurer/Documents/python/sympy/sympy/sympy/polys/numberfields.pyc in bottom_up_scan(ex)
    117                 return symbols[ex.root]
    118 
--&amp;gt; 119         raise NotAlgebraic(&amp;quot;%s doesn't seem to be an algebraic number&amp;quot; % ex)
    120 
    121     polys = args.get('polys', False)

NotAlgebraic: exp(I*pi/8) doesn't seem to be an algebraic number

But this is a root of x**16 - 1.  I don't know how minpoly works internally if this can be done in a general fashion for exponentials nested inside other expressions (like e.g., sqrt(1 + exp(I*pi/8))).

Marking as Code-In difficulty hard because this is a nontrivial algorithm, especially for a high school student.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2789/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2789'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2789'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2789</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Polynomial</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DEACQ347eCl7ImA9WhNSFk8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2790</id><published>2011-10-25T21:47:51.000Z</published><updated>2012-10-30T19:52:42.000Z</updated><title>Create examples/short tutorials using IPython's notebook (IPython &gt;= 0.12)</title><content type='html'>Examples/short tutorials should show how to use SymPy to solve illustrative problems in high school mathematics/physics. Notebooks must contain code split into logical blocks, text cells with problem description and references to other materials, books, videos, etc.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2790/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2790'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2790'/><author><name>matt...@gmail.com</name><uri>/u/101069955704897915480/</uri></author><issues:blockedOn><issues:id>2940</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:id>2790</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInMultiple</issues:label><issues:label>IPython</issues:label><issues:label>CodeInCategory-Documentation</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DkACRH47eCl7ImA9WhNSFUg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2792</id><published>2011-10-26T01:35:01.000Z</published><updated>2012-10-29T23:52:45.000Z</updated><title>Investigate how to employ complexity measures in functions like trigsimp(), etc.</title><content type='html'>simplify() already implements measure argument and uses it to choose over alternative expressions given by pairs of specific simplification routines. However, those specific simplification routines (like trigsimp()) don't support measure argument and make arbitrary built-in choices when simplifying expressions. This leads to simplification results that are dependent on the implicit measure built-in into a particular simplification step of a function. Those functions should use a measure to verify whether a candidate simplified expression is really simpler than an input expression. Investigate how to implement measures in those functions (at least in trigsimp()) to avoid combinatorial explosion of choices. You may have to employ optimization techniques like greedy algorithms, dynamic programming, meta heuristics, etc. Prepare sample non-trivial inputs, measures and outputs that can be used as tests for the algorithm(s) you will propose.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2792/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2792'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2792'/><author><name>matt...@gmail.com</name><uri>/u/101069955704897915480/</uri></author><issues:id>2792</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;C0AESH47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2793</id><published>2011-10-26T15:50:00.000Z</published><updated>2012-11-08T05:15:09.000Z</updated><title>The dsolve solver for 1st_exact should use integration</title><content type='html'>The method used by the 1st_exact solver is a nice one to use by hand, but it's kind of flaky.  I didn't realize at the time of writing it that you can actually express the solution using integrals without introducing parameters or dummy integration limits.  This solution is given in Table II of the paper &amp;quot;Symbolic Integration: The Stormy Decade&amp;quot; by Joel Moses.  I was able to download this paper for free from Google Scholar.  If you cannot access it and are interested in fixing this issue, contact me and I will send it to you.

</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2793/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2793'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2793'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2793</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEcGSH47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2794</id><published>2011-10-26T15:53:04.000Z</published><updated>2012-11-08T05:20:29.000Z</updated><title>Implement ode solvers from the Moses "Stormy Decade" paper</title><content type='html'>See Table II of the paper &amp;quot;Symbolic Integration: The Stormy Decade&amp;quot; by Joel Moses.  Some of these are not implemented yet, in particular, the last three.  

I was able to download this paper for free from Google Scholar.  If you cannot access it and are interested in fixing this issue, contact me and I will send it to you.

See also issue 2793.

Each solver should be a separate Code-In task.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2794/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2794'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2794'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2794</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInMultiple</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;C0cBQn47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2796</id><published>2011-10-26T18:46:03.000Z</published><updated>2012-11-08T05:04:13.000Z</updated><title>Package the latest version of SymPy for the major distributions</title><content type='html'>Most distributions have old versions of SymPy packaged (or none at all, eg. openSUSE). These should be updated to the latest version of SymPy (0.7.1 as of now). Ideally, the scripts used to generate these packages should also be saved and uploaded somewhere, so it will be easier to update them to newer versions. I'm marking this for Code-In, but consider that each major distro could be a separate task.

This most likely means deleting the bundled mpmath/ and making SymPy play nice with the distro-provided version. </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2796/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2796'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2796'/><author><name>vlada.pe...@gmail.com</name><uri>/u/108713607268198052411/</uri></author><issues:id>2796</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Outreach</issues:label><issues:label>CodeInMultiple</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DEACQ347eCl7ImA9WhNSFk8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2798</id><published>2011-10-26T18:54:36.000Z</published><updated>2012-10-30T19:52:42.000Z</updated><title>Research ways to extract statistics from the issue tracker</title><content type='html'>The issue tracker can provide some valuable statistics about the health of the project - it might be interesting to graph the number of open issues, number of issues per category, the average &amp;quot;age&amp;quot; of the (closed/open) issues, who closes the most issues, the number of issue reports by users (as opposed to developers of SymPy) etc. This likely involves interfacing somehow with the Google API.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2798/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2798'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2798'/><author><name>vlada.pe...@gmail.com</name><uri>/u/108713607268198052411/</uri></author><issues:id>2798</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInMultiple</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A0QMRH47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2800</id><published>2011-10-26T22:04:54.000Z</published><updated>2012-11-08T04:36:25.000Z</updated><title>Flesh out the SymPy Papers wiki page</title><content type='html'>We have a page on the wiki[1] that should list (scientific) papers mentioning SymPy, but it's currently empty. Populating this would be interesting and could also persuade other academics to try out/use SymPy. Google Scholar can be used to track down papers. See also the thread which originally asked about this[2].


[1] https://github.com/sympy/sympy/wiki/SymPy-Papers
[2] https://groups.google.com/group/sympy/browse_thread/thread/34443bd5708310f2/71c0cc0ba21a19e1?hl=en</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2800/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2800'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2800'/><author><name>vlada.pe...@gmail.com</name><uri>/u/108713607268198052411/</uri></author><issues:id>2800</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Outreach</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DkANRn47eCl7ImA9WhNSFUg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2803</id><published>2011-10-28T03:10:18.000Z</published><updated>2012-10-29T23:53:17.000Z</updated><title>Investigate how to make the rewrite framework more flexible</title><content type='html'>Currently, the rewrite framework only allows expr.rewrite(function) (e.g., cos(x).rewrite(exp)), and it implements only one rule per function pair.  This should be made more general.  Sometimes, you can't express a rewrite rule with just a function.  Other times, there is more than one way to rewrite one function in terms of another (for example cos(x) == sqrt(1 - sin(x)) == sin(pi/2 - x)).  

The issue is to consider ways to make the rewrite framework stronger, but still modular like it is now (so it's easily extensible).</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2803/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2803'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2803'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2803</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEcMR347eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2812</id><published>2011-10-30T20:50:00.000Z</published><updated>2012-11-08T05:21:26.000Z</updated><title>Fix failures found by shuffling tests in test file</title><content type='html'>This builds on issue 1594: once we have the shuffling, we should fix all the failures caused by it. Marking this as a hard task for Code-In, per Aaron's comment on the other issue. </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2812/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2812'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2812'/><author><name>vlada.pe...@gmail.com</name><uri>/u/108713607268198052411/</uri></author><issues:blockedOn><issues:id>1594</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:cc><issues:uri>/u/100157245271348669141/</issues:uri><issues:username>krastano...@gmail.com</issues:username></issues:cc><issues:id>2812</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A0UBQn47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2817</id><published>2011-11-01T23:45:00.000Z</published><updated>2012-11-08T04:34:13.000Z</updated><title>Make sure all the built-in __methods__ are defined</title><content type='html'>At http://docs.python.org/reference/datamodel.html, it lists all the __methods__ that Python works with (like __int__, __contains__, etc.).  We should go through all of these and make sure they are all defined on Basic, Expr, or whatever relevant subclass, so that we don't have simple bugs like

In [72]: long(Integer(3))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
/Users/aaronmeurer/Documents/python/sympy/sympy/&amp;lt;ipython-input-72-5fff10d216fd&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 long(Integer(3))

TypeError: long() argument must be a string or a number, not 'Integer'

Regarding where they should be defined, stuff that makes sense for any object should go on Basic, stuff that makes sense only on mathematical objects (like __add__ for example) should go on Expr, and stuff that makes sense only for numbers (like __int__) should go in Number.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2817/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2817'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2817'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2817</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEYGQ347eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2830</id><published>2011-11-07T05:39:30.000Z</published><updated>2012-11-08T05:22:02.000Z</updated><title>checkodesol needs to use force</title><content type='html'>&amp;gt; @@ -542,7 +542,11 @@ def test_1st_homogeneous_coeff_ode_check3():
&amp;gt;      # (False, x*(log(exp(-LambertW(C1*x))) + LambertW(C1*x))*exp(-LambertW(C1*x) + 1))
&amp;gt;      eq3 = f(x) + (x*log(f(x)/x) - 2*x)*diff(f(x),x)
&amp;gt;      sol3 = Eq(f(x), x*exp(1 - LambertW(C1*x)))
&amp;gt; -    assert checkodesol(eq3, sol3, solve_for_func=False)[0]
&amp;gt; +    assert checkodesol(eq3, sol3, solve_for_func=True)[0]
&amp;gt; +    # and without an assumption about x and f(x), the implicit form doesn't resolve, either:
&amp;gt; +    # (False, (log(f(x)/x) + log(x/f(x)))*f(x))

So checkodesol() needs to be more aggressive, since dsolve() obtains these logarithms by calling logcombine(force=True). An expand with force=True should be used on expressions being tested or else (as shown above) terms which should go to zero, don't:

&amp;gt;&amp;gt;&amp;gt; log(f(x)/x) + log(x/f(x))
log(f(x)/x) + log(x/f(x))
&amp;gt;&amp;gt;&amp;gt; _.expand(force=True)
0

</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2830/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2830'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2830'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:id>2830</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;D04ESX47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2849</id><published>2011-11-16T19:20:49.000Z</published><updated>2012-11-08T03:38:28.000Z</updated><title>integration of cos(x)/sin(x)**n</title><content type='html'>The result of integrate(cos(x)/sin(x)**n, x) is
&amp;quot;nice&amp;quot;, if n is even, and &amp;quot;ugly&amp;quot;, if n is odd
(n is an integer, greater than 1).

Moreover, if n is odd, then diff(integrate(cos(x)/sin(x)**n, x), x)
gives a very ugly expression that cannot be converted back to
cos(x)/sin(x)**n by simplify.

Example:
In [136]: diff(integrate(cos(x)/sin(x)**7, x), x)
             5                   3                      
36⋅sin(x)⋅cos (x) - 72⋅sin(x)⋅cos (x) + 36⋅sin(x)⋅cos(x)
────────────────────────────────────────────────────────
                                                2       
       ⎛     6            4            2       ⎞        
       ⎝6⋅cos (x) - 18⋅cos (x) + 18⋅cos (x) - 6⎠        

Gabor Takacs
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2849/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2849'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2849'/><author><name>gtakac...@gmail.com</name><uri>/u/114262867030455207545/</uri></author><issues:id>2849</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Integration</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;C0UCQn47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2864</id><published>2011-11-24T07:07:34.000Z</published><updated>2012-11-08T05:07:43.000Z</updated><title>Parsing issue with mathematica.py with regex expressions</title><content type='html'>There are some issues in regex expressions of mathematica.

See below cases
k=&amp;quot;(h+g)(l+m)r&amp;quot;
print mathematica(k)
output -&amp;gt; (g + h)*(l + m)
k=&amp;quot;r(h+g)(l+m)&amp;quot;
print mathematica(k)
output -&amp;gt;Exception</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2864/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2864'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2864'/><author><name>gsagra...@gmail.com</name><uri>/u/114613374226307560326/</uri></author><issues:id>2864</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>Printing</issues:label><issues:label>Parsing</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CkMNQX47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2868</id><published>2011-11-26T04:31:01.000Z</published><updated>2012-11-08T04:54:50.000Z</updated><title>Create XFAIL tests for open issues</title><content type='html'>We should have more XFAIL tests for open issues, so that we can see if they start working.

Any ideas on what the specifics should be for a Code-In task?</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2868/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2868'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2868'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2868</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInMultiple</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;Ak4EQH47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2872</id><published>2011-11-27T00:22:07.000Z</published><updated>2012-11-08T04:28:21.000Z</updated><title>Issues with the SymPy Live mobile interface</title><content type='html'>Here are the comments from https://github.com/sympy/sympy-live/pull/11:

- Is it possible to make the box that has &amp;gt;&amp;gt;&amp;gt; and the entry box more streamlined? There is a visible break there. It's no big deal if it can't be done, but it would make it look a little better if it can.

- The buttons on the right are a little taller than the text box, which is a little off.

- The buttons on the bottom should be bigger, both in height and width (there is wasted whitespace to the right of them, and it's too hard to press them with a finger).

- The green text is a little hard to read. It would be better to make the background green and the text white (like the &amp;quot;comment&amp;quot; button here on GitHub.

- It's possible to zoom out for some reason on the retina display (i.e., I can do it in my iPhone 4, but not my 1st Gen iPod touch).

- On my 1st gen iPod touch (running iOS 3), enter always creates a newline, even if the setting is set to submit.

- Apparently it doesn't render so well in Opera Mini.

- There may be issues with the mobile device detection on tablets.

See also issue 2661.

Should we make multiple code-in tasks out of this, or just one?</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2872/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2872'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2872'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2872</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>Live</issues:label><issues:label>CodeInMultiple</issues:label><issues:label>CodeInCategory-UI</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CUIHR347eCl7ImA9WhJbEUg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2876</id><published>2011-11-28T05:02:46.000Z</published><updated>2012-09-20T15:05:36.000Z</updated><title>factor breaks power rules</title><content type='html'>I've found that factor is pulling a minus sign out from radicals and this is not always valid:

    &amp;gt;&amp;gt;&amp;gt; factor(sqrt(-x))
    I*sqrt(x)

If `x == 1` the unfactored form gives I and all is ok, but if `x == -1` then the unfactored form gives 1 whereas the factored form gives `I*I` == -1.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2876/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2876'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2876'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:blocking><issues:id>1544</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:cc><issues:uri>/u/101069955704897915480/</issues:uri><issues:username>matt...@gmail.com</issues:username></issues:cc><issues:closedDate>2011-12-06T08:52:26.000Z</issues:closedDate><issues:id>2876</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>smichr</issues:label><issues:label>NeedsReview</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;Ak8CSX47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2883</id><published>2011-11-30T02:48:33.000Z</published><updated>2012-11-08T04:27:48.000Z</updated><title>The installation guide should be in the Sphinx docs</title><content type='html'>http://docs.sympy.org/0.7.1/install.html redirects to http://code.google.com/p/sympy/wiki/DownloadInstallation?tm=2, which is out of date (at least the examples are).  I think that it should be in the docs anyway, and this will also help keep things up-to-date.

Also, I have no idea if the installation guides for other systems (like Gentoo) are up-to-date or not.  I think we probably should just recommend that people install from source anyway, though (do others agree with this?), either from the latest version or from git.

So, to summarize, this page needs to be updated and moved to the Sphinx docs.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2883/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2883'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2883'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2883</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Documentation</issues:label><issues:label>CodeInCategory-Documentation</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;AkAFR347eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2896</id><published>2011-12-05T01:37:38.000Z</published><updated>2012-11-08T04:25:16.000Z</updated><title>Have coverage_doctest.py check if the docstring is imported into Sphinx</title><content type='html'>We need to have all public functions and methods imported into Sphinx (issue 2597).  To make sure that this is done, and remains done, we should extend the coverage_doctest.py utility to check if the docstring is imported into Sphinx.  

Is there a way to do this with Sphinx, or will we just have to write some simple thing that searches the .txt files? Another option would be to require that the docs be built, and then search the included source files for which functions have the &amp;quot;docs&amp;quot; links next to them (like http://docs.sympy.org/0.7.1/_modules/sympy/core/basic.html#Basic).  This would have the added advantage of fixing those functions that are in Sphinx but don't have the source link, because it doesn't work unless you specify the full path to the function in Sphinx.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2896/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2896'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2896'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2896</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>Documentation</issues:label><issues:label>CodeInCategory-Documentation</issues:label><issues:label>CodeInCategory-QA</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;AkINQH47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2898</id><published>2011-12-05T16:23:38.000Z</published><updated>2012-11-08T04:23:11.000Z</updated><title>Make side boxes on SymPy Live only shrink when the title is clicked on</title><content type='html'>At http://live.sympy.org/, we now have these animated things on the side that open and close when you click on them.  However, they close when you click on any of it, which is annoying if you're trying to select some text.  So they should close only when the title is clicked on.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2898/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2898'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2898'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:closedDate>2012-11-08T04:23:11.000Z</issues:closedDate><issues:id>2898</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Live</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInCategory-UI</issues:label><issues:label>CodeInDifficulty-Easy</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;AkECRX47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2910</id><published>2011-12-08T23:36:56.000Z</published><updated>2012-11-08T04:24:24.000Z</updated><title>Multiline execution in SymPy Live doesn't print correctly</title><content type='html'>At live.sympy.org, if you enter multiple lines at once, and execute them all at once, it only prints the last line entered (though all lines are executed).  For example

&amp;gt;&amp;gt;&amp;gt; x
... y
... z
z

But you can see that all lines are executed:

&amp;gt;&amp;gt;&amp;gt; x = 2
... x = x + 2
... print x
4

So we just need to fix the printer.  This will be useful for if we fix issue 2580.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2910/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2910'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2910'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2910</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Live</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;AkMCQn47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2913</id><published>2011-12-10T17:31:49.000Z</published><updated>2012-11-08T04:21:03.000Z</updated><title>Problem with Matrix and recent searches at SymPy Live</title><content type='html'>I typed Matrix([[x, 1], [1, x]]).eigenvects() at live.sympy.org with privacy off, and it appeared in the recent searches as

Matrix(
[x,1
,
1,x
]).eigenvects()

</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2913/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2913'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2913'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>2913</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>Live</issues:label><issues:label>Matrices</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DUAHR347eCl7ImA9WhJbF0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2932</id><published>2011-12-20T00:59:33.000Z</published><updated>2012-09-27T14:55:36.000Z</updated><title>coverage_doctest.py reports functions within functions</title><content type='html'>The coverage_doctest.py reports functions within functions which are not possible to doctest. This causes coverage_doctest for some modules to be impossible to pass.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2932/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2932'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2932'/><author><name>SgtMook...@gmail.com</name><uri>/u/109538029010489625230/</uri></author><issues:blocking><issues:id>294</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>294</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:closedDate>2012-03-17T00:07:37.000Z</issues:closedDate><issues:id>2932</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Testing</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;DEACQ347eCl7ImA9WhNSFk8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3002</id><published>2012-01-15T12:19:27.000Z</published><updated>2012-10-30T19:52:42.000Z</updated><title>Error in textplot</title><content type='html'>In [4]: textplot(t/(t-1), 0-20, 20)

     12 |                                                        
        |                                                        
        |                                                        
        |                                                        
        |                                                        
        |                                                        
        |                                                        
        |                                                        
5.71429 | -------------------------------------------------------
        |                                                        
        |                                                        
        |                                                        
        |                                                        
        |                                                        
        |                               ..                       
        | .....................           .......................
        |                      .......                           
-0.5714 |                             .                          
          -20                    0                          20

In [5]: textplot(t/(t-1), 0-20, 20, 200, 100)
---------------------------------------------------------------------------
ZeroDivisionError                         Traceback (most recent call last)

/srv/kontrolnaya-rabota_ru/&amp;lt;ipython console&amp;gt; in &amp;lt;module&amp;gt;()

/srv/kontrolnaya-rabota_ru/env/src/sympy/sympy/plotting/textplot.pyc in textplot(expr, a, b, W, H)
     25     for x in range(W):
     26         try:
---&amp;gt; 27             y[x] = f(a+(b-a)/float(W)*x)
     28         except TypeError:
     29             y[x] = 0

/usr/lib/pymodules/python2.7/numpy/__init__.pyc in &amp;lt;lambda&amp;gt;(t)

ZeroDivisionError: float division by zero
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3002/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3002'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3002'/><author><name>sat...@gmail.com</name><uri>/u/112786146078013975159/</uri></author><issues:id>3002</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Plotting</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEQMRH47eCl7ImA9WhNTEkg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3044</id><published>2012-02-06T22:31:34.000Z</published><updated>2012-10-14T22:06:25.000Z</updated><title>qapply does not work for c_part*TensorProduct</title><content type='html'>The function qapply_Mul returns without doing anything if the argument is of the form c_part*TensorProduct. For example, try qapply with the following expressions:

exp1 = TensorProduct(Jz*JzKet(S(2),S(-1))/sqrt(2), Jz*JzKet(S(1)/2,S(1)/2))

exp2 = TensorProduct(Jz*JzKet(S(2),S(1)), Jz*JzKet(S(1)/2,S(1)/2))

qapply(exp1) does not apply the operators, but qapply(exp2) applies the operators.

To make qapply work properly, one should first split the commutative parts from the non-commutative parts. Then qapply should be applied on the non-commutative parts.

Alaska</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3044/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3044'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3044'/><author><name>asub...@gmail.com</name><uri>/u/104202817633480218674/</uri></author><issues:id>3044</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>NeedsBetterPatch</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Started</issues:status></entry><entry gd:etag='W/&quot;D0AESX47eCl7ImA9WhNTFkw.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3148</id><published>2012-03-15T03:44:12.000Z</published><updated>2012-10-19T03:01:48.000Z</updated><title>Too many constants from dsolve()</title><content type='html'>We need to clean up the constant simplification, and more importantly, the format of the output of some of the solvers in the ODE module so that we never get more constants than the order of the ODE.  </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3148/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3148'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3148'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blocking><issues:id>3442</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:id>3148</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Solvers</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CE4EQH47eCl7ImA9WhJbGEk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3150</id><published>2012-03-15T17:23:04.000Z</published><updated>2012-09-28T14:35:01.000Z</updated><title>Problems with MatrixSymbol and simplifying functions</title><content type='html'>MatrixSymbol do not work with cancel, combsimp, factor, posify, separatevars, sqrtdenest.

$ ipython
Python 2.7.1+ (r271:86832, Apr 11 2011, 18:05:24) 
Type &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.

IPython 0.10.1 -- An enhanced Interactive Python.
?         -&amp;gt; Introduction and overview of IPython's features.
%quickref -&amp;gt; Quick reference.
help      -&amp;gt; Python's own help system.
object?   -&amp;gt; Details about 'object'. ?object also works, ?? prints more.

In [1]: from sympy import *

In [2]: A=MatrixSymbol('A', 3, 3)

In [3]: B=MatrixSymbol('B', 3, 3)

In [4]: p=A*B-B*A

In [5]: cancel(p)
---------------------------------------------------------------------------
PolynomialError                           Traceback (most recent call last)

/home/jrioux/git/sympy/&amp;lt;ipython console&amp;gt; in &amp;lt;module&amp;gt;()

/home/jrioux/git/sympy/sympy/polys/polytools.pyc in cancel(f, *gens, **args)
   5491 
   5492     try:
-&amp;gt; 5493         (F, G), opt = parallel_poly_from_expr((p, q), *gens, **args)
   5494     except PolificationFailed:
   5495         if not isinstance(f, (tuple, Tuple)):

/home/jrioux/git/sympy/sympy/polys/polytools.pyc in parallel_poly_from_expr(exprs, *gens, **args)
   3787     &amp;quot;&amp;quot;&amp;quot;Construct polynomials from expressions. &amp;quot;&amp;quot;&amp;quot;
   3788     opt = options.build_options(gens, args)
-&amp;gt; 3789     return _parallel_poly_from_expr(exprs, opt)
   3790 
   3791 def _parallel_poly_from_expr(exprs, opt):

/home/jrioux/git/sympy/sympy/polys/polytools.pyc in _parallel_poly_from_expr(exprs, opt)
   3838 
   3839     try:
-&amp;gt; 3840         reps, opt = _parallel_dict_from_expr(exprs, opt)
   3841     except GeneratorsNeeded:
   3842         raise PolificationFailed(opt, origs, exprs, True)

/home/jrioux/git/sympy/sympy/polys/polyutils.pyc in _parallel_dict_from_expr(exprs, opt)
    277 
    278     if any(expr.is_commutative is False for expr in exprs):
--&amp;gt; 279         raise PolynomialError('non-commutative expressions are not supported')
    280 
    281     if opt.gens:

PolynomialError: non-commutative expressions are not supported

In [6]: combsimp(p)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)

/home/jrioux/git/sympy/&amp;lt;ipython console&amp;gt; in &amp;lt;module&amp;gt;()

/home/jrioux/git/sympy/sympy/simplify/simplify.pyc in combsimp(expr)
   2305 
   2306     expr = expr.replace(binomial,
-&amp;gt; 2307         lambda n, k: rf((n-k+1).expand(), k.expand())/rf(1, k.expand()))
   2308     expr = expr.replace(factorial,                                                              
   2309         lambda n: rf(1, n.expand()))

/home/jrioux/git/sympy/sympy/core/basic.pyc in replace(self, query, value, map)
   1118                     return None
   1119 
-&amp;gt; 1120         result = rec_replace(self)
   1121 
   1122         if result is None:

/home/jrioux/git/sympy/sympy/core/basic.pyc in rec_replace(expr)
   1094 
   1095             for arg in expr.args:
-&amp;gt; 1096                 result = rec_replace(arg)
   1097 
   1098                 if result is not None:

/home/jrioux/git/sympy/sympy/core/basic.pyc in rec_replace(expr)
   1094 
   1095             for arg in expr.args:
-&amp;gt; 1096                 result = rec_replace(arg)
   1097 
   1098                 if result is not None:

/home/jrioux/git/sympy/sympy/core/basic.pyc in rec_replace(expr)
   1094 
   1095             for arg in expr.args:
-&amp;gt; 1096                 result = rec_replace(arg)
   1097 
   1098                 if result is not None:

/home/jrioux/git/sympy/sympy/core/basic.pyc in rec_replace(expr)
   1093             args, construct = [], False
   1094 
-&amp;gt; 1095             for arg in expr.args:
   1096                 result = rec_replace(arg)
   1097 

AttributeError: 'str' object has no attribute 'args'

In [7]: factor(p)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)

/home/jrioux/git/sympy/&amp;lt;ipython console&amp;gt; in &amp;lt;module&amp;gt;()

/home/jrioux/git/sympy/sympy/polys/polytools.pyc in factor(f, *gens, **args)
   5254         if not f.is_commutative:
   5255             from sympy.core.exprtools import factor_nc
-&amp;gt; 5256             return factor_nc(f)
   5257         else:
   5258             raise PolynomialError(msg)

/home/jrioux/git/sympy/sympy/core/exprtools.pyc in factor_nc(expr)
    603         return expr.func(*[factor_nc(a) for a in expr.args])
    604 
--&amp;gt; 605     expr, rep, nc_symbols = _mask_nc(expr)
    606     if rep:
    607         return factor(expr).subs(rep)

/home/jrioux/git/sympy/sympy/core/exprtools.pyc in _mask_nc(eq)
    569                 pass
    570             elif (
--&amp;gt; 571                 not a.is_commutative and
    572                 not (a.is_Symbol or a.is_Add or a.is_Mul or a.is_Pow)
    573                 ):

AttributeError: 'str' object has no attribute 'is_commutative'

In [8]: posify(p)
ERROR: An unexpected error occurred while tokenizing input
The following traceback may be corrupted or invalid
The error message is: ('EOF in multi-line statement', (10, 0))

ERROR: An unexpected error occurred while tokenizing input
The following traceback may be corrupted or invalid
The error message is: ('EOF in multi-line statement', (10, 0))

---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)

/home/jrioux/git/sympy/&amp;lt;ipython console&amp;gt; in &amp;lt;module&amp;gt;()

/home/jrioux/git/sympy/sympy/simplify/simplify.pyc in posify(eq)
   1341         for i, e in enumerate(eq):
   1342             eq[i] = e.subs(reps)
-&amp;gt; 1343         return f(eq), dict([(r, s) for s, r in reps.iteritems()])
   1344 
   1345     reps = dict([(s, Dummy(s.name, positive=True))

/home/jrioux/git/sympy/sympy/matrices/expressions/matadd.pyc in __new__(cls, *args)
     21         args = [arg for arg in args if arg!=0]
     22 
---&amp;gt; 23         if not all(arg.is_Matrix for arg in args):
     24             raise ValueError(&amp;quot;Mix of Matrix and Scalar symbols&amp;quot;)
     25 

/home/jrioux/git/sympy/sympy/matrices/expressions/matadd.pyc in &amp;lt;genexpr&amp;gt;((arg,))
     21         args = [arg for arg in args if arg!=0]
     22 
---&amp;gt; 23         if not all(arg.is_Matrix for arg in args):
     24             raise ValueError(&amp;quot;Mix of Matrix and Scalar symbols&amp;quot;)
     25 

AttributeError: 'list' object has no attribute 'is_Matrix'

In [9]: separatevars(p)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)

/home/jrioux/git/sympy/&amp;lt;ipython console&amp;gt; in &amp;lt;module&amp;gt;()

/home/jrioux/git/sympy/sympy/simplify/simplify.pyc in separatevars(expr, symbols, dict, force)
    648         return _separatevars_dict(_separatevars(expr, force), symbols)
    649     else:
--&amp;gt; 650         return _separatevars(expr, force)
    651 
    652 def _separatevars(expr, force):

/home/jrioux/git/sympy/sympy/simplify/simplify.pyc in _separatevars(expr, force)
    698         _expr = nonsepar
    699         _expr, reps = posify(_expr) if force else (_expr, {})
--&amp;gt; 700         _expr = (factor(_expr)).subs(reps)
    701 
    702         if not _expr.is_Add:

/home/jrioux/git/sympy/sympy/polys/polytools.pyc in factor(f, *gens, **args)
   5254         if not f.is_commutative:
   5255             from sympy.core.exprtools import factor_nc
-&amp;gt; 5256             return factor_nc(f)
   5257         else:
   5258             raise PolynomialError(msg)

/home/jrioux/git/sympy/sympy/core/exprtools.pyc in factor_nc(expr)
    603         return expr.func(*[factor_nc(a) for a in expr.args])
    604 
--&amp;gt; 605     expr, rep, nc_symbols = _mask_nc(expr)
    606     if rep:
    607         return factor(expr).subs(rep)

/home/jrioux/git/sympy/sympy/core/exprtools.pyc in _mask_nc(eq)
    569                 pass
    570             elif (
--&amp;gt; 571                 not a.is_commutative and
    572                 not (a.is_Symbol or a.is_Add or a.is_Mul or a.is_Pow)
    573                 ):

AttributeError: 'str' object has no attribute 'is_commutative'

In [10]: sqrtdenest(p)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)

/home/jrioux/git/sympy/&amp;lt;ipython console&amp;gt; in &amp;lt;module&amp;gt;()

/home/jrioux/git/sympy/sympy/simplify/sqrtdenest.pyc in sqrtdenest(expr, max_iter)
    128     expr = expand_mul(sympify(expr))
    129     for i in range(max_iter):
--&amp;gt; 130         z = _sqrtdenest0(expr)
    131         if expr == z:
    132             return expr

/home/jrioux/git/sympy/sympy/simplify/sqrtdenest.pyc in _sqrtdenest0(expr)
    208         args = expr.args
    209         if args:
--&amp;gt; 210             return expr.func(*[_sqrtdenest0(a) for a in args])
    211     return expr
    212 

/home/jrioux/git/sympy/sympy/simplify/sqrtdenest.pyc in _sqrtdenest0(expr)
    208         args = expr.args
    209         if args:
--&amp;gt; 210             return expr.func(*[_sqrtdenest0(a) for a in args])
    211     return expr
    212 

/home/jrioux/git/sympy/sympy/simplify/sqrtdenest.pyc in _sqrtdenest0(expr)
    208         args = expr.args
    209         if args:
--&amp;gt; 210             return expr.func(*[_sqrtdenest0(a) for a in args])
    211     return expr
    212 

/home/jrioux/git/sympy/sympy/simplify/sqrtdenest.pyc in _sqrtdenest0(expr)
    190     &amp;quot;&amp;quot;&amp;quot;Returns expr after denesting its arguments.&amp;quot;&amp;quot;&amp;quot;
    191 
--&amp;gt; 192     if is_sqrt(expr):
    193         n, d = expr.as_numer_denom()
    194         if d is S.One: # n is a square root

/home/jrioux/git/sympy/sympy/simplify/sqrtdenest.pyc in is_sqrt(expr)
     13     &amp;quot;&amp;quot;&amp;quot;Return True if expr is a sqrt, otherwise False.&amp;quot;&amp;quot;&amp;quot;
     14 
---&amp;gt; 15     return expr.is_Pow and expr.exp.is_Rational and abs(expr.exp) is S.Half
     16 
     17 

AttributeError: 'str' object has no attribute 'is_Pow'

In [11]: import sympy

In [12]: sympy.__version__
Out[12]: '0.7.1-git'
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3150/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3150'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3150'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:blocking><issues:id>2070</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:blocking><issues:id>2070</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:id>3150</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:label>Simplify</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DkQBSX47eCl7ImA9WhNTGEg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3197</id><published>2012-03-28T15:31:19.000Z</published><updated>2012-10-21T21:19:18.000Z</updated><title>ceiling gives int only sometimes</title><content type='html'>This is ok
    &amp;gt;&amp;gt;&amp;gt; 10*(cos(3)**2+1)
    10*cos(3)**2 + 10
    &amp;gt;&amp;gt;&amp;gt; ceiling(_)
    20

But why does this fail to give 10?
    &amp;gt;&amp;gt;&amp;gt; 10*(sin(1)**2+cos(1)**2)
    10*cos(1)**2 + 10*sin(1)**2
    &amp;gt;&amp;gt;&amp;gt; ceiling(_)
    ceiling(10*cos(1)**2 + 10*sin(1)**2)</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3197/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3197'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3197'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:closedDate>2012-10-21T21:19:18.000Z</issues:closedDate><issues:id>3197</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Evalf</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;D0AMSH47eCl7ImA9WhNTFkw.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3212</id><published>2012-03-31T16:01:58.000Z</published><updated>2012-10-19T03:03:09.000Z</updated><title>Laplace transform assertion failure</title><content type='html'>Playing with the laplace_transform capabilities, I
found that it does not handle some shifts correctly.
In the following example, an assertion fails, and it
is clearly because of the shift.

from sympy.integrals.transforms import *
L = laplace_transform
iL = inverse_laplace_transform
s=Symbol('s')
t=Symbol('t')
L(Heaviside(t)*cos(t),t,s)
L(Heaviside(t-1)*cos(t-1),t,s)

This seems to be related to trig term not being coverted
to the correct exponential first?  The code is doing everything
in terms of Mellon transforms, which is completely outside my
standard approach to these problems.  No idea what the best way 
is to approach fixing the issue.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3212/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3212'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3212'/><author><name>trel...@psu.edu</name><uri>/u/112862214195610862534/</uri></author><issues:id>3212</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Integration</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;AkMMSH47eCl7ImA9WhNSF0U.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3228</id><published>2012-04-15T00:53:17.000Z</published><updated>2012-11-01T16:48:09.000Z</updated><title>powsimp(deep=True) should not use expand</title><content type='html'>In [583]: print e
sinh(mu*(-a + x))*sinh(mu*(b - y))/sinh(mu*(-a + b))

In [584]: (e - sinh(mu*(x - y))).rewrite(exp).cancel()
Out[584]: 
   2⋅b⋅μ  -2⋅μ⋅y    2⋅μ⋅x  -2⋅μ⋅y    -2⋅a⋅μ  2⋅b⋅μ    -2⋅a⋅μ  2⋅μ⋅x
- ℯ     ⋅ℯ       + ℯ     ⋅ℯ       + ℯ      ⋅ℯ      - ℯ      ⋅ℯ     
───────────────────────────────────────────────────────────────────
                 μ⋅x  -μ⋅y      -2⋅a⋅μ  2⋅b⋅μ  μ⋅x  -μ⋅y           
            - 2⋅ℯ   ⋅ℯ     + 2⋅ℯ      ⋅ℯ     ⋅ℯ   ⋅ℯ               

In [585]: (e - sinh(mu*(x - y))).rewrite(exp).cancel().powsimp()
Out[585]: 
   2⋅b⋅μ  -2⋅μ⋅y    2⋅μ⋅x  -2⋅μ⋅y    -2⋅a⋅μ  2⋅b⋅μ    -2⋅a⋅μ  2⋅μ⋅x
- ℯ     ⋅ℯ       + ℯ     ⋅ℯ       + ℯ      ⋅ℯ      - ℯ      ⋅ℯ     
───────────────────────────────────────────────────────────────────
                 μ⋅x  -μ⋅y      -2⋅a⋅μ  2⋅b⋅μ  μ⋅x  -μ⋅y           
            - 2⋅ℯ   ⋅ℯ     + 2⋅ℯ      ⋅ℯ     ⋅ℯ   ⋅ℯ               

In [586]: (e - sinh(mu*(x - y))).rewrite(exp).cancel().powsimp(deep=True)
Out[586]: 
                -2⋅a⋅μ + 2⋅b⋅μ                                   -2⋅a⋅μ + 2⋅μ⋅x                                    2⋅b⋅μ - 2⋅μ⋅y             
               ℯ                                                ℯ                                                 ℯ                          
────────────────────────────────────────────── - ────────────────────────────────────────────── - ───────────────────────────────────────────
     μ⋅x - μ⋅y      -2⋅a⋅μ + 2⋅b⋅μ + μ⋅x - μ⋅y        μ⋅x - μ⋅y      -2⋅a⋅μ + 2⋅b⋅μ + μ⋅x - μ⋅y        μ⋅x - μ⋅y      -2⋅a⋅μ + 2⋅b⋅μ + μ⋅x - 
- 2⋅ℯ          + 2⋅ℯ                             - 2⋅ℯ          + 2⋅ℯ                             - 2⋅ℯ          + 2⋅ℯ                       

                       2⋅μ⋅x - 2⋅μ⋅y                
                      ℯ                             
─── + ──────────────────────────────────────────────
μ⋅y        μ⋅x - μ⋅y      -2⋅a⋅μ + 2⋅b⋅μ + μ⋅x - μ⋅y
      - 2⋅ℯ          + 2⋅ℯ                          

But I just wanted the result from [585] with the exponents combined.  And if I try to put them back together using cancel, it expands the exponents again! together() does the trick, but it shouldn't be that hard.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3228/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3228'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3228'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3228</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Simplify</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;C04GR347eCl7ImA9WhJaGEg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3239</id><published>2012-04-23T06:04:41.000Z</published><updated>2012-10-10T06:52:06.000Z</updated><title>Expr.equals and Matrix.equals name clash</title><content type='html'>Given: a and b are expressions and A and B are matrices

a == b is a quick test of equality between a and b allowing the grace that S(1) == 1.0, but otherwise returning false if a and b are not structurally the same, e.g. `(x+1)**2 != x**2 + 2*x + 1`.

a.equals(b) is a `do the best you can to prove or disprove that a == b; this involves simplification so `((x+1)**2).equals(x**2 + 2*x + 1) is True`

A.equals(B) is basically sugar for A == B and handles the conversion to compatible types of matrices before making the comparison.

Would it be better to make the __eq__ method handle the conversion and allow A.equals(B) to do conversions *and* apply Expr.equals to the elements being compared?</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3239/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3239'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3239'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:closedDate>2012-10-10T06:52:06.000Z</issues:closedDate><issues:id>3239</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>NeedsReview</issues:label><issues:label>smichr</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;C04ERH47eCl7ImA9WhJaGEg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3283</id><published>2012-06-09T22:21:31.000Z</published><updated>2012-10-10T06:51:45.000Z</updated><title>Single layer integral results in KeyError</title><content type='html'>This 

integrate(log(sqrt( (cos(t)-cos(tp))**2 + (sin(t)-sin(tp))**2 )), (tp, 0, 2*pi));

results in this traceback:

/home/andreas/&amp;lt;ipython-input-3-73d65c837595&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 integrate(log(sqrt( (cos(t)-cos(tp))**2 + (sin(t)-sin(tp))**2 )), (tp, 0, 2*pi));

/home/andreas/research/software/env/local/lib/python2.7/site-packages/sympy/utilities/decorator.pyc in threaded_func(expr, *args, **kwargs)
     23                                       func(expr.rhs, *args, **kwargs))
     24             else:
---&amp;gt; 25                 return func(expr, *args, **kwargs)
     26 
     27     return threaded_func

/home/andreas/research/software/env/local/lib/python2.7/site-packages/sympy/integrals/integrals.pyc in integrate(*args, **kwargs)
   1342 
   1343     if isinstance(integral, Integral):
-&amp;gt; 1344         return integral.doit(deep = False, meijerg = meijerg, conds = conds)
   1345     else:
   1346         return integral

/home/andreas/research/software/env/local/lib/python2.7/site-packages/sympy/integrals/integrals.pyc in doit(self, **hints)
    722                 antideriv = None
    723             else:
--&amp;gt; 724                 antideriv = self._eval_integral(function, xab[0], meijerg1)
    725                 if antideriv is None and meijerg1 is True:
    726                     ret = try_meijerg(function, xab)

/home/andreas/research/software/env/local/lib/python2.7/site-packages/sympy/integrals/integrals.pyc in _eval_integral(self, f, x, meijerg)
    990                 # fall back to the more general algorithm

    991                 try:
--&amp;gt; 992                     h = heurisch(g, x, hints=[])
    993                 except PolynomialError:
    994                     # XXX: this exception means there is a bug in the


/home/andreas/research/software/env/local/lib/python2.7/site-packages/sympy/integrals/risch.pyc in heurisch(f, x, rewrite, hints, mappings, retries)
    435 
    436     if not (F.atoms(Symbol) - set(V)):
--&amp;gt; 437         result = _integrate('Q')
    438 
    439         if result is None:

/home/andreas/research/software/env/local/lib/python2.7/site-packages/sympy/integrals/risch.pyc in _integrate(field)
    427             equations[dependent] += coeff
    428 
--&amp;gt; 429         solution = solve(equations.values(), *coeffs)
    430 
    431         if solution is not None:

/home/andreas/research/software/env/local/lib/python2.7/site-packages/sympy/solvers/solvers.pyc in solve(f, *symbols, **flags)
    712         solution = _solve(f[0], *symbols, **flags)
    713     else:
--&amp;gt; 714         solution = _solve_system(f, symbols, **flags)
    715 
    716     #


/home/andreas/research/software/env/local/lib/python2.7/site-packages/sympy/solvers/solvers.pyc in _solve_system(exprs, symbols, **flags)
   1171 
   1172             # returns a dictionary ({symbols: values}) or None

-&amp;gt; 1173             result = solve_linear_system(matrix, *symbols, **flags)
   1174             if result:
   1175                 # it doesn't need to be checked but we need to see


/home/andreas/research/software/env/local/lib/python2.7/site-packages/sympy/solvers/solvers.pyc in solve_linear_system(system, *symbols, **flags)
   1569                 # subtract from the current row the row containing

   1570                 # pivot and multiplied by extracted coefficient

-&amp;gt; 1571                 matrix.row(k, lambda x, j: simplify(x - matrix[i, j]*coeff))
   1572 
   1573         i += 1

/home/andreas/research/software/env/local/lib/python2.7/site-packages/sympy/matrices/matrices.pyc in row(self, i, f)
   3659             return self[i, :]
   3660         for j in range(0, self.cols):
-&amp;gt; 3661             self[i, j] = f(self[i, j], j)
   3662 
   3663     def col(self, j, f=None):

/home/andreas/research/software/env/local/lib/python2.7/site-packages/sympy/solvers/solvers.pyc in &amp;lt;lambda&amp;gt;(x, j)
   1569                 # subtract from the current row the row containing

   1570                 # pivot and multiplied by extracted coefficient

-&amp;gt; 1571                 matrix.row(k, lambda x, j: simplify(x - matrix[i, j]*coeff))
   1572 
   1573         i += 1

/home/andreas/research/software/env/local/lib/python2.7/site-packages/sympy/simplify/simplify.pyc in simplify(expr, ratio, measure)
   2975 
   2976     if expr.has(C.TrigonometricFunction) or expr.has(C.HyperbolicFunction):
-&amp;gt; 2977         expr = trigsimp(expr)
   2978 
   2979     if expr.has(C.log):

/home/andreas/research/software/env/local/lib/python2.7/site-packages/sympy/simplify/simplify.pyc in trigsimp(expr, deep, recursive)
    943         result = g
    944     else:
--&amp;gt; 945         result = trigsimp_recursive(expr, deep)
    946 
    947     return result

/home/andreas/research/software/env/local/lib/python2.7/site-packages/sympy/simplify/simplify.pyc in trigsimp_recursive(expr, deep)
   1056             m = expr.match(pattern)
   1057             while m is not None:
-&amp;gt; 1058                 if m[a_t] == 0 or -m[a_t] in m[c].args or m[a_t] + m[c] == 0:
   1059                     break
   1060                 expr = result.subs(m)

KeyError: c_
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3283/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3283'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3283'/><author><name>andreas.kloeckner@gmail.com</name><uri>/u/andreas.kloeckner@gmail.com/</uri></author><issues:closedDate>2012-10-10T06:51:45.000Z</issues:closedDate><issues:id>3283</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Simplify</issues:label><issues:label>smichr</issues:label><issues:label>NeedsReview</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CU8NQH47eCl7ImA9WhJbF0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3348</id><published>2012-08-04T01:25:34.000Z</published><updated>2012-09-27T13:51:31.000Z</updated><title>quantum error in master</title><content type='html'>Occasionally seen:

___________ sympy/physics/quantum/tests/test_density.py:test_entropy ___________
  File &amp;quot;/private/var/folders/wc/dppcpmxs1tlb36nqcw853wkm0000gq/t/sympy-bot-tmpln0qi2/sympy/sympy/physics/quantum/tests/test_density.py&amp;quot;, line 172, in test_entropy
    assert isinstance(np_mat, np.matrixlib.defmatrix.matrix) and \
AttributeError: 'module' object has no attribute 'matrixlib'

Details:
executable:         /Library/Frameworks/Python.framework/Versions/2.6/Resources/Python.app/Contents/MacOS/Python  (2.6.6-final-0)
architecture:       32-bit
cache:              yes
ground types:       python
random seed:        41882886
hash randomization: off</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3348/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3348'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3348'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:closedDate>2012-09-27T13:51:31.000Z</issues:closedDate><issues:id>3348</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;DUAGSX47eCl7ImA9WhJbEUs.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3370</id><published>2012-08-22T21:08:04.000Z</published><updated>2012-09-20T19:02:08.000Z</updated><title>Order() does not work with noncommutative symbol</title><content type='html'>It is currently not possible to mix Order(x) with expressions containing a noncommutative symbol:

In [1]: M=Symbol('M', commutative=False)

In [2]: 1+M*x+Order(x**2)

Out[2]: 1 + x*M + O(x**2)

In [3]: _*M

Out[3]: (1 + x*M + O(x**2))*M

In [4]: expand(_)

results in PolynomialError: non-commutative expressions are not supported</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3370/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3370'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3370'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:closedDate>2012-09-20T19:02:08.000Z</issues:closedDate><issues:id>3370</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>NonCommutative</issues:label><issues:label>Polynomial</issues:label><issues:label>NeedsReview</issues:label><issues:owner><issues:uri>/u/102137482174297837682/</issues:uri><issues:username>julien.r...@gmail.com</issues:username></issues:owner><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CkUCRH47eCl7ImA9WhJbEkk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3371</id><published>2012-08-22T21:11:03.000Z</published><updated>2012-09-21T15:11:05.000Z</updated><title>More thought needed on Order() and complex variables</title><content type='html'>...and possibly other methods:

In [1]: conjugate(1+x+Order(x**2))

results in NotImplementedError: 
The _eval_nseries method should be added to &amp;lt;class
'sympy.core.function.Subs'&amp;gt; to give terms up to O(x**n) at x=0 from
the positive direction so it is available when nseries calls it.
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3371/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3371'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3371'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:id>3371</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Polynomial</issues:label><issues:owner><issues:uri>/u/102137482174297837682/</issues:uri><issues:username>julien.r...@gmail.com</issues:username></issues:owner><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Started</issues:status></entry><entry gd:etag='W/&quot;AkANRH47eCl7ImA9WhJbEUs.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3373</id><published>2012-08-24T09:13:26.000Z</published><updated>2012-09-20T19:19:55.000Z</updated><title>clear_denoms fails for domain EX</title><content type='html'>&amp;gt;&amp;gt;&amp;gt; Poly(x + sqrt(2), x, domain='EX').clear_denoms()
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;sympy/polys/polytools.py&amp;quot;, line 1966, in clear_denoms
    dom = f.rep.dom.get_ring()
  File &amp;quot;sympy/polys/domains/expressiondomain.py&amp;quot;, line 169, in get_ring
    raise DomainError('there is no ring associated with %s' % self)
sympy.polys.polyerrors.DomainError: there is no ring associated with EX
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3373/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3373'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3373'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:closedDate>2012-09-20T19:19:55.000Z</issues:closedDate><issues:id>3373</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Polynomial</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;A08DRH47eCl7ImA9WhJaEE4.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3399</id><published>2012-09-13T20:36:24.000Z</published><updated>2012-09-30T21:17:55.000Z</updated><title>Be smarter about pretty printing Dummy's</title><content type='html'>When pretty printing something like Dummy('x'), it just shows up as 'x', contrasting from the string printer, where it shows up as '_x'.  This is useful, as the _ can become intrusive.  But it also makes something like

x + Dummy('x')

look strange.  Some functions return expressions with dummy symbols in them, whose names you can't choose, so this issue can arise even if you are careful in your symbol naming.

So should something like x + Dummy('x') pretty print as x + _x (similar to the string printer)?  </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3399/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3399'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3399'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3399</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Printing</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CUINQX47eCl7ImA9WhJUFko.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3400</id><published>2012-09-15T01:26:25.000Z</published><updated>2012-09-15T01:46:30.000Z</updated><title>bad result for residue(1/(exp(z)-1),z,0)</title><content type='html'>residue(1/(exp(z)-1),z,0) evaluates to 0. It should evaluate to 1. 

The series function appears to be able to calculate the coefficient needed, but residue isn't returning the correct value. 

series(1/(exp(z)-1),z,0) does give the correct series.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3400/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3400'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3400'/><author><name>insertin...@gmail.com</name><uri>/u/102263318432493976321/</uri></author><issues:blockedOn><issues:id>2555</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:id>3400</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>WrongResult</issues:label><issues:label>Series</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CkEGRn47eCl7ImA9WhJbGEU.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3401</id><published>2012-09-17T03:11:48.000Z</published><updated>2012-09-29T01:03:47.000Z</updated><title>Slicing an empty matrix is broken</title><content type='html'>This used to work:

In [4]: Matrix(0, 3, [])[:, 0]
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
&amp;lt;ipython-input-4-4596a324e212&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 Matrix(0, 3, [])[:, 0]

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/matrices/matrices.py in __getitem__(self, key)
    286             i, j = key
    287             if type(i) is slice or type(j) is slice:
--&amp;gt; 288                 return self.submatrix(key)
    289 
    290             else:

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/matrices/matrices.py in submatrix(self, keys)
   1022         extract
   1023         &amp;quot;&amp;quot;&amp;quot;
-&amp;gt; 1024         rlo, rhi, clo, chi = self.key2bounds(keys)
   1025         outLines, outCols = rhi-rlo, chi-clo
   1026         outMat = [0]*outLines*outCols

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/matrices/matrices.py in key2bounds(self, keys)
   1097             clo, chi = self.slice2bounds(keys[1], self.cols)
   1098         else:
-&amp;gt; 1099             _, clo = self.slice2bounds((0, keys[1]), self.cols)
   1100             chi = clo + 1
   1101         if not ( 0&amp;lt;=rlo&amp;lt;=rhi and 0&amp;lt;=clo&amp;lt;=chi ):

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/matrices/matrices.py in slice2bounds(self, key, defmax)
   1138         elif isinstance(key, tuple):
   1139             key = [defmax - 1 if i == -1 else i for i in key]
-&amp;gt; 1140             return self.key2ij(key)
   1141         else:
   1142             raise IndexError(&amp;quot;Improper index type&amp;quot;)

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/matrices/matrices.py in key2ij(self, key)
   1120         i, j = [(k + n) if k &amp;lt; 0 else k for k, n in zip(key, (self.rows, self.cols))]
   1121         if not (i&amp;gt;=0 and i&amp;lt;self.rows and j&amp;gt;=0 and j &amp;lt; self.cols):
-&amp;gt; 1122             raise IndexError(&amp;quot;Index out of range: a[%s]&amp;quot;%repr(key))
   1123         return i,j
   1124 

IndexError: Index out of range: a[[0, 0]]

It was broken by the commit

commit d8e586b4debff9ac51a9fd7ea59b298ce6bfad40
Author: Chris Smith &amp;lt;smichr@gmail.com&amp;gt;
Date:   Wed Nov 30 14:55:40 2011 +0545

    key2ij is used rather than slice to resolve int indices
    
        The key2ij routine is also moved closer to the functions that use it.
    
        Factor out key2bounds code in matrices, too.

The problem is that the internal routines convert the first : to a range of 0 to 0, which is wrong (it should have no range).  It then tests 0 &amp;lt;= 0 &amp;lt; 0, which gives False.  

It's not clear how this should be fixed, though.  There are four functions in matrices.py involved here: __getitem__, key2bounds, key2ij, and slice2bounds.  It's not clear in which of these functions the change should go, or what it should look like.  They all seem to operate on a core assumption that any slice can be represented by a range, which is not true in this case as I said.  

This is causing a test failure in pull request 1530.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3401/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3401'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3401'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blocking><issues:id>2010</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:closedDate>2012-09-29T01:03:47.000Z</issues:closedDate><issues:id>3401</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:label>NeedsReview</issues:label><issues:label>smichr</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;C08MRn47eCl7ImA9WhJaGEg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3406</id><published>2012-09-25T06:36:28.000Z</published><updated>2012-10-10T06:51:27.000Z</updated><title>SparseMatrix attribute is incompatible with MatrixBase methods</title><content type='html'>SparseMatrix subclasses from MatrixBase, but MatrixBase includes methods that should really be in MutableMatrix because MutableMatrix and SparseMatrix share a common attribute (mat) that is used in methods of MatrixBase, e.g. LDLdecomposition. 

MutableMatrix.mat is a flat list of all the matrix elements in row-order; SparseMatrix.mat is a dictionary: {(i, j): value}. So any method that tries to use the mat structure will fail for a SparseMatrix.

In PR 1535 I've renamed Sparse's mat as smat so anything that refers to mat will fail for SparseMatrix, indicating that that method needs to be added to Sparse Matrix.

An alternative would be to move methods from MatrixBase to MutableMatrix so SparseMatrix can't access them but I (personally) don't want to get into that reorganization right now.

If people don't like the smat idea, I can rename it to mat again and we can let it fail as it does now.

Also, it seems like mat and smat should be private data structures and named _mat and _smat so we are free to change those in the future.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3406/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3406'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3406'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:cc><issues:uri>/u/109882876523836932473/</issues:uri><issues:username>MRock...@gmail.com</issues:username></issues:cc><issues:closedDate>2012-10-10T06:51:27.000Z</issues:closedDate><issues:id>3406</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:label>NeedsReview</issues:label><issues:label>smichr</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CkQCRn47eCl7ImA9WhJaEUk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3407</id><published>2012-09-25T07:58:50.000Z</published><updated>2012-10-02T01:12:47.000Z</updated><title> repeated functions</title><content type='html'>here:https://github.com/sympy/sympy/blob/master/sympy/polys/domains/realdomain.py
Functions exquo(self, a, b) and quo(self, a, b) are the same,this seems redundancy</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3407/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3407'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3407'/><author><name>googch...@gmail.com</name><uri>/u/118422878888739760815/</uri></author><issues:closedDate>2012-10-02T01:12:47.000Z</issues:closedDate><issues:id>3407</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Invalid</issues:status></entry><entry gd:etag='W/&quot;DEYCRn47eCl7ImA9WhJbGEw.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3408</id><published>2012-09-28T06:35:45.000Z</published><updated>2012-09-28T07:09:27.000Z</updated><title>problem with method simplify()</title><content type='html'>Hi,

 I use sympy-0.7.1 and have seen the following strange behaviour : 

 I have the following function :


Fx = -0.0563767005092886*(0.000443376026163009*x)**1.0*log(0.00353255046280571*x)/x - 0.0690219365987377*(0.000443376026163009*x)**1.0/x + 0.140515969404209*(0.000443376026163009*x)**2.0/x + 0.0301972630529529*log(0.00353255046280571*x)/x

When I try to apply Fx.simplify(), I get :

&amp;gt;&amp;gt;&amp;gt; Fx.simplify()
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;/home/landriu/sympy-0.7.1/sympy/core/expr.py&amp;quot;, line 1918, in simplify
    return simplify(self)
  File &amp;quot;/home/landriu/sympy-0.7.1/sympy/simplify/simplify.py&amp;quot;, line 1627, in simplify
    expr = together(cancel(powsimp(expr)).expand())
  File &amp;quot;/home/landriu/sympy-0.7.1/sympy/polys/polytools.py&amp;quot;, line 5220, in cancel
    c, P, Q = F.cancel(G)
  File &amp;quot;/home/landriu/sympy-0.7.1/sympy/polys/polytools.py&amp;quot;, line 3022, in cancel
    result = F.cancel(G, include=include)
  File &amp;quot;/home/landriu/sympy-0.7.1/sympy/polys/polyclasses.py&amp;quot;, line 630, in cancel
    cF, cG, F, G = dmp_cancel(F, G, lev, dom, include=False)
  File &amp;quot;/home/landriu/sympy-0.7.1/sympy/polys/euclidtools.py&amp;quot;, line 1846, in dmp_cancel
    _, p, q = dmp_inner_gcd(f, g, u, K)
  File &amp;quot;/home/landriu/sympy-0.7.1/sympy/polys/euclidtools.py&amp;quot;, line 1556, in dmp_inner_gcd
    h, cff, cfg = _dmp_inner_gcd(f, g, u, K)
  File &amp;quot;/home/landriu/sympy-0.7.1/sympy/polys/euclidtools.py&amp;quot;, line 1522, in _dmp_inner_gcd
    return dmp_ff_prs_gcd(f, g, u, K)
  File &amp;quot;/home/landriu/sympy-0.7.1/sympy/polys/euclidtools.py&amp;quot;, line 1123, in dmp_ff_prs_gcd
    _, h = dmp_primitive(h, u, K)
  File &amp;quot;/home/landriu/sympy-0.7.1/sympy/polys/euclidtools.py&amp;quot;, line 1794, in dmp_primitive
    return cont, [ dmp_quo(c, cont, v, K) for c in f ]
  File &amp;quot;/home/landriu/sympy-0.7.1/sympy/polys/densearith.py&amp;quot;, line 1728, in dmp_quo
    return dmp_div(f, g, u, K)[0]
  File &amp;quot;/home/landriu/sympy-0.7.1/sympy/polys/densearith.py&amp;quot;, line 1676, in dmp_div
    return dmp_ff_div(f, g, u, K)
  File &amp;quot;/home/landriu/sympy-0.7.1/sympy/polys/densearith.py&amp;quot;, line 1515, in dmp_ff_div
    raise ZeroDivisionError(&amp;quot;polynomial division&amp;quot;)
ZeroDivisionError: polynomial division
&amp;gt;&amp;gt;&amp;gt; 

   If I cut in two parts Fx=Gx+Hx with following definitions :

 Gx=-0.0563767005092886*(0.000443376026163009*x)**1.0*log(0.00353255046280571*x)/x - 0.0690219365987377*(0.000443376026163009*x)**1.0/x + 0.140515969404209*(0.000443376026163009*x)**2.0/x

 Hx=0.0301972630529529*log(0.00353255046280571*x)/x

  Gx.simplify() and Hx.simplify() do not show any error, but
(Gx+Hx).simplify() issues the same error message.

 Cheers,
 
    David Landriu











</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3408/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3408'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3408'/><author><name>David.La...@wanadoo.fr</name><uri>/u/102056043109311035957/</uri></author><issues:closedDate>2012-09-28T06:39:10.000Z</issues:closedDate><issues:id>3408</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Polynomial</issues:label><issues:label>Simplify</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;AkMGSX47eCl7ImA9WhJaEUw.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3409</id><published>2012-09-28T19:45:34.000Z</published><updated>2012-10-01T19:07:08.000Z</updated><title>TODO: FSS determinant for sparse matrix</title><content type='html'>There is a short paper giving details at http://www.eecis.udel.edu/~saunders/papers/sffge/it5.ps

This could be added to SparseMatrix.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3409/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3409'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3409'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:id>3409</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A04BRH47eCl7ImA9WhJaEE4.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3411</id><published>2012-09-30T21:19:15.000Z</published><updated>2012-09-30T21:19:15.000Z</updated><title>Asymptotic expansion of Fresnel integrals</title><content type='html'>Computing series of S(x) and C(x) at oo fails:

In [4]: fresnels(1/x).series(x)

[...]                                                                                                          
PoleError:                                                                                                                                                                                                 
Asymptotic expansion of fresnels around [oo] is not implemented. </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3411/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3411'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3411'/><author><name>someb...@bluewin.ch</name><uri>/u/107490137238222069432/</uri></author><issues:id>3411</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DE8HSH47eCl7ImA9WhJaEUk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3413</id><published>2012-10-02T03:00:39.000Z</published><updated>2012-10-02T03:00:39.000Z</updated><title>Make the inputs editable at gamma.sympy.org</title><content type='html'>At SymPy Gamma, it gives a bunch of boxes for the various things, but they all use preset values (like series(expr, x, 0, 10)).  It would be cool if you could just click on one of the boxes and edit the input, so e.g., if you wanted series(expr, x, 1, 20), you could just change it.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3413/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3413'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3413'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3413</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Gamma</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DE8DSX47eCl7ImA9WhJaEUk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3414</id><published>2012-10-02T03:01:11.000Z</published><updated>2012-10-02T03:01:18.000Z</updated><title>Add the logo to gamma.sympy.org</title><content type='html'>We should have the SymPy logo somewhere at gamma.sympy.org.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3414/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3414'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3414'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3414</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Gamma</issues:label><issues:label>EasyToFix</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEQBQH47eCl7ImA9WhJaEUo.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3415</id><published>2012-10-02T03:02:35.000Z</published><updated>2012-10-02T10:05:51.000Z</updated><title>Automatic domain for plots</title><content type='html'>plot() should by default automatically determine the best domain to use for the function (instead of just -10..10).  There is a paper at http://www.cs.uic.edu/~wilkinson/Publications/plotfunc.pdf that might be useful.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3415/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3415'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3415'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:cc><issues:uri>/u/112791612514943977027/</issues:uri><issues:username>catchmrb...@gmail.com</issues:username></issues:cc><issues:id>3415</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Plotting</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DUcMQH47eCl7ImA9WhJaEUk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3416</id><published>2012-10-02T03:04:41.000Z</published><updated>2012-10-02T03:04:41.000Z</updated><title>Add the ability to login and save history at SymPy Gamma</title><content type='html'>Similar to SymPy Live (and WolframAlpha), SymPy Gamma should allow you to sign in using your Google account, and if you are signed in, save your history.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3416/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3416'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3416'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3416</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Gamma</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;AkYERn47eCl7ImA9WhJaEUk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3417</id><published>2012-10-02T03:05:48.000Z</published><updated>2012-10-02T03:21:47.000Z</updated><title>Example expressions</title><content type='html'>There should be a button with &amp;quot;example&amp;quot; or something like that at SymPy Gamma, which will input some random expression.  It's not too difficult to create a random expression generator. We could create generators for all the major types of expressions accepted by SymPy Gamma.  </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3417/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3417'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3417'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3417</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Gamma</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;AkcBSH47eCl7ImA9WhJaEUk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3418</id><published>2012-10-02T03:10:07.000Z</published><updated>2012-10-02T03:20:59.000Z</updated><title>Beyond math for SymPy Gamma?</title><content type='html'>I know that SymPy Gamma is still in an infant stage, and it's barely powerful as a calculator, but should we also try to include definitions and such, at least for mathematical terms?  I imagine that if the user enters a single function (like cos(x) or ln(x)), that we could add a link to the Wikipedia article, with maybe a summary.  It would be a bit of work if we decide to do it.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3418/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3418'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3418'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3418</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Gamma</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>NeedsDecision</issues:status></entry><entry gd:etag='W/&quot;DUMBRH47eCl7ImA9WhJaEUk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3419</id><published>2012-10-02T03:10:55.000Z</published><updated>2012-10-02T03:10:55.000Z</updated><title>Advertise SymPy Gamma on the website and at SymPy Live</title><content type='html'>Now that SymPy Gamma is starting to get more decent, we should advertise it on the website, SymPy Live, and maybe even the docs. </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3419/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3419'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3419'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3419</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Documentation</issues:label><issues:label>Gamma</issues:label><issues:label>EasyToFix</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;AkcERn47eCl7ImA9WhJaEUk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3420</id><published>2012-10-02T03:20:07.000Z</published><updated>2012-10-02T03:20:07.000Z</updated><title>Let the user try longer at SymPy Gamma</title><content type='html'>At SymPy Gamma, you just get the one time limit.  Right now, it fails with 500 when the time limit is exceeded, but even if we make the error message better, we could add an option to try again, similar to Wolfram Alpha.   We also could let the user skip whatever (e.g., this will happen for certain expressions and the integrate() stage). </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3420/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3420'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3420'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3420</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Gamma</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;D0QARn47eCl7ImA9WhJaEk0.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3421</id><published>2012-10-02T17:10:29.000Z</published><updated>2012-10-02T19:15:47.000Z</updated><title>lambdify of factorial gives error</title><content type='html'>Note: This was originally reported https://github.com/sympy/sympy/issues/1554

The following code gives error

code::
sympy.lambdify(sympy.var(&amp;quot;x&amp;quot;), sympy.functions.factorial(sympy.var(&amp;quot;x&amp;quot;)),&amp;quot;numpy&amp;quot;)

error::
Traceback (most recent call last):
File &amp;quot;&amp;quot;, line 1, in 
File &amp;quot;/usr/local/lib/python2.7/site-packages/sympy/utilities/lambdify.py&amp;quot;, line 263, in lambdify
return eval(lstr, namespace)
File &amp;quot;&amp;quot;, line 1
lambda x: (x!)
^
SyntaxError: invalid syntax</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3421/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3421'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3421'/><author><name>sean.v....@gmail.com</name><uri>/u/113046012287564521760/</uri></author><issues:id>3421</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;AkYER347eCl7ImA9WhNTEUo.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3426</id><published>2012-10-08T19:06:50.000Z</published><updated>2012-10-14T01:28:26.000Z</updated><title>Cleanup example notebooks</title><content type='html'>We need to cleanup the example notebooks.  One issue is if we should ship the notebooks with plots with the plots included (if they are too big, then they will just make the git repo and the release tarballs bigger than the need to be).

Once everything is cleaned up, they should be added to setup.py to be included in the release tarball.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3426/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3426'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3426'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blocking><issues:id>2940</issues:id><issues:project>sympy</issues:project></issues:blocking><issues:id>3426</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Documentation</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CU4GQn47eCl7ImA9WhJaGU0.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3428</id><published>2012-10-09T04:05:32.000Z</published><updated>2012-10-10T21:18:43.000Z</updated><title>tolerance keyword of nsimplify is ignored</title><content type='html'>In [39]: print nsimplify(0.5*x**2 - 3.333333*x, tolerance=0.001, rational=True)
x**2/2 - 3333333*x/1000000

I would have expected a smaller fraction on the x term (no more than 1000 in the denominator).</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3428/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3428'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3428'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3428</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Simplify</issues:label><issues:label>EasyToFix</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;Ak8GRH47eCl7ImA9WhJaGEk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3430</id><published>2012-10-10T06:00:25.000Z</published><updated>2012-10-10T06:00:25.000Z</updated><title>double application of simplify needed</title><content type='html'>It takes two applications of simplify to get a fully simplified verstion of this expression:

&amp;gt;&amp;gt;&amp;gt; x=sqrt(r*tan(t)**2/(tan(t)**2 + 1))/tan(t)
&amp;gt;&amp;gt;&amp;gt; simplify(x)
sqrt(r*cos(t)**2*tan(t)**2)/tan(t)
&amp;gt;&amp;gt;&amp;gt; simplify(_)
sqrt(r*sin(t)**2)/tan(t)
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3430/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3430'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3430'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:id>3430</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Simplify</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CU4MSH47eCl7ImA9WhNTFEo.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3431</id><published>2012-10-10T16:25:58.000Z</published><updated>2012-10-17T11:39:49.000Z</updated><title>DenseMatrix Inverse methods assume matrix is mutable. </title><content type='html'>Many methods currently in DenseMatrix assume that the matrix is mutable. 

In particular the inverse and eye methods assume this. We could:

1. remove these methods from the part of the tree from which Immutable inherits

2. modify these methods so that they switch in and out of mutable mode.

In any case, ImmutableMatrix._eval_inverse = DenseMatrix._eval_inverse is currently causing errors (although these errors have no tests). This is changed as part of https://github.com/sympy/sympy/pull/1560</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3431/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3431'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3431'/><author><name>MRock...@gmail.com</name><uri>/u/109882876523836932473/</uri></author><issues:closedDate>2012-10-17T11:39:49.000Z</issues:closedDate><issues:id>3431</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:label>NeedsReview</issues:label><issues:label>smichr</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;DEUER347eCl7ImA9WhNTEEo.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3435</id><published>2012-10-12T10:22:21.000Z</published><updated>2012-10-12T21:10:06.000Z</updated><title>Wrong factorization of constant prefactor in front of noncommutative symbols</title><content type='html'>In sympy 0.7.2.rc1:

&amp;gt;&amp;gt;&amp;gt; from sympy import Symbol
&amp;gt;&amp;gt;&amp;gt; A = Symbol(&amp;quot;A&amp;quot;, commutative=False)
&amp;gt;&amp;gt;&amp;gt; B = Symbol(&amp;quot;B&amp;quot;, commutative=False)
&amp;gt;&amp;gt;&amp;gt; (2*A + 2*B).factor()
2*(2*A + 2*B)

should have been 2*(A + B)</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3435/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3435'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3435'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:closedDate>2012-10-12T21:10:06.000Z</issues:closedDate><issues:id>3435</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>NonCommutative</issues:label><issues:label>WrongResult</issues:label><issues:label>NeedsReview</issues:label><issues:label>smichr</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CU4DSX47eCl7ImA9WhNTFEo.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3436</id><published>2012-10-12T10:38:39.000Z</published><updated>2012-10-17T11:39:38.000Z</updated><title>Matrix.adjoint() gives AttributeError</title><content type='html'>In master:

&amp;gt;&amp;gt;&amp;gt; from sympy import I, ImmutableMatrix
&amp;gt;&amp;gt;&amp;gt; A = ImmutableMatrix(2, 2, [0, -I, I, 0])
&amp;gt;&amp;gt;&amp;gt; assert A.adjoint() == A
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;sympy/matrices/matrices.py&amp;quot;, line 304, in adjoint
    return self.T.C
  File &amp;quot;sympy/matrices/matrices.py&amp;quot;, line 2855, in __getattr__
    raise AttributeError(&amp;quot;Matrix has no attribute %s.&amp;quot; % attr)
AttributeError: Matrix has no attribute C.

The above works correctly in 0.7.2.rc1</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3436/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3436'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3436'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:cc><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:cc><issues:closedDate>2012-10-17T11:39:38.000Z</issues:closedDate><issues:id>3436</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:label>smichr</issues:label><issues:label>NeedsReview</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CUQNR347eCl7ImA9WhNTEUQ.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3438</id><published>2012-10-13T00:14:45.000Z</published><updated>2012-10-14T05:43:16.000Z</updated><title>Calling sympify() with values 'degree', 'S' or 'N' returns unexpected values</title><content type='html'>To replicate:

&amp;lt;code&amp;gt;
&amp;gt;&amp;gt;&amp;gt; from sympy import sympify
&amp;gt;&amp;gt;&amp;gt; sympify('degree')
&amp;lt;function degree at 0x1055578c0&amp;gt;
&amp;gt;&amp;gt;&amp;gt; sympify('S')
S
&amp;gt;&amp;gt;&amp;gt; type(sympify('S'))
&amp;lt;class 'sympy.core.singleton.SingletonRegistry'&amp;gt;
&amp;gt;&amp;gt;&amp;gt; sympify('N')
&amp;lt;function N at 0x1052c79b0&amp;gt;
&amp;lt;/code&amp;gt;

I discovered this while trying to convert string representations of units into their sympy expression equivalents. </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3438/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3438'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3438'/><author><name>acharnock</name><uri>/u/acharnock/</uri></author><issues:closedDate>2012-10-14T05:43:16.000Z</issues:closedDate><issues:id>3438</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Parsing</issues:label><issues:mergedInto><issues:id>2947</issues:id><issues:project>sympy</issues:project></issues:mergedInto><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Duplicate</issues:status></entry><entry gd:etag='W/&quot;Ak4NQ347eCl7ImA9WhNTF0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3441</id><published>2012-10-18T18:42:51.000Z</published><updated>2012-10-20T16:03:12.000Z</updated><title>_kern leftover from sympify of a list</title><content type='html'>This was sent to me by email:

The sympify function uses inner &amp;quot;_kern&amp;quot; symbol in order to do some
things smartly. At the end, all occurences of the symbol should be
replaced by &amp;quot;1&amp;quot;. But the replacement uses &amp;quot;in&amp;quot; statemtent, that is not
valid when the result of sympify is a structure (e.g. a list):


from sympy import sympify

for xpr in ('[-(2/4)]', '[-2/4]', '-(2/4)', '-2/4'): print(sympify(xpr))

# the response is
'''
[-_kern/2]
[-1/2]
-1/2
-1/2
'''</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3441/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3441'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3441'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:closedDate>2012-10-20T16:03:12.000Z</issues:closedDate><issues:id>3441</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Parsing</issues:label><issues:label>NeedsReview</issues:label><issues:label>smichr</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;D0AERn47eCl7ImA9WhNTFkw.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3442</id><published>2012-10-19T02:24:05.000Z</published><updated>2012-10-19T03:01:47.000Z</updated><title>dsolve fails for a separable equation </title><content type='html'>C1, C2 = symbols('C1, C2')
eq = f(x).diff(x) + 1 + 2*f(x) + f(x)**2

# separable_Integral gives the correct solution
sol2 = dsolve(eq, hint='separable_Integral').doit()
print sol2
assert checkodesol(eq,sol2,solve_for_func=False)[0]

# separable gives an incorrect solution
sol1 = dsolve(eq, hint='separable')
print sol1
assert checkodesol(eq,sol1)[0]</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3442/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3442'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3442'/><author><name>trel...@psu.edu</name><uri>/u/112862214195610862534/</uri></author><issues:blockedOn><issues:id>3148</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:id>3442</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEEGQX47eCl7ImA9WhNTFko.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3443</id><published>2012-10-19T16:30:07.000Z</published><updated>2012-10-19T18:50:20.000Z</updated><title>Example fails in Geometry Module documentation</title><content type='html'>Getting:

&amp;gt;&amp;gt;&amp;gt; Point.is_collinear(x, y, z)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;string&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: unbound method is_collinear() must be called with Point instance as first argument (got Symbol instance instead)

when running the first example from http://docs.sympy.org/0.7.2/modules/geometry.html#
using SymPy Live Shell button.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3443/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3443'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3443'/><author><name>pup...@gmail.com</name><uri>/u/100743721459643187288/</uri></author><issues:closedDate>2012-10-19T18:48:57.000Z</issues:closedDate><issues:id>3443</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Live</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CkYNSH47eCl7ImA9WhNTF0U.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3444</id><published>2012-10-21T00:09:53.000Z</published><updated>2012-10-21T00:43:19.000Z</updated><title>Doc for partial fraction decomp needs expanding</title><content type='html'>The documentation for partial fraction decomposition (polys/partfrac.py) does not mention how to use the full=True parameter.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3444/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3444'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3444'/><author><name>xoed...@gmail.com</name><uri>/u/110767597195280461912/</uri></author><issues:id>3444</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>EasyToFix</issues:label><issues:label>Documentation</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;D0UDQ347eCl7ImA9WhNTGE0.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3446</id><published>2012-10-21T07:06:30.000Z</published><updated>2012-10-21T07:41:12.000Z</updated><title>interactions with Float(0.0)</title><content type='html'>This should probably give 0.0

&amp;gt;&amp;gt;&amp;gt; Float('0.')*x
0


This should perhaps not simplify since if x were 1
we would want 1.0 to be returned

&amp;gt;&amp;gt;&amp;gt; Float('0.')+x
x
&amp;gt;&amp;gt;&amp;gt; Float('0.')+1
1.00000000000000
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3446/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3446'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3446'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:id>3446</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A0UGQ347eCl7ImA9WhNTGU4.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3447</id><published>2012-10-21T14:26:47.000Z</published><updated>2012-10-22T20:53:42.000Z</updated><title>Elementwise product for Matrix Expressions</title><content type='html'>Should we add an ElemMatMul operator for elementwise/hardamard product of matrices?

Pro - it's commonly used in many applications
Con - it breaks the basis independence of matrix expressions</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3447/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3447'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3447'/><author><name>MRock...@gmail.com</name><uri>/u/109882876523836932473/</uri></author><issues:id>3447</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DUIHR347eCl7ImA9WhNTGEs.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3448</id><published>2012-10-22T00:58:56.000Z</published><updated>2012-10-22T00:58:56.000Z</updated><title>PolynomialError when solving inequality</title><content type='html'>In [48]: solve(x/(1 + x)&amp;gt;eps, x)
---------------------------------------------------------------------------
PolynomialError                           Traceback (most recent call last)
&amp;lt;ipython-input-48-686ae298b890&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 solve(x/(1 + x)&amp;gt;eps, x)

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/solvers/solvers.py in solve(f, *symbols, **flags)
    632         elif isinstance(fi, bool) or fi.is_Relational:
    633             return reduce_inequalities(f, assume=flags.get('assume'),
--&amp;gt; 634                                           symbols=symbols)
    635         # Any embedded piecewise functions need to be brought out to the
    636         # top level so that the appropriate strategy gets selected.

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/solvers/inequalities.py in reduce_inequalities(inequalities, assume, symbols)
    355        and inequalities[0].is_Relational:
    356         try:
--&amp;gt; 357             return _solve_inequality(inequalities[0], symbols[0])
    358         except NotImplementedError:
    359             pass

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/solvers/inequalities.py in _solve_inequality(ie, s)
    321         raise NotImplementedError
    322     expr = ie.lhs - ie.rhs
--&amp;gt; 323     p = Poly(expr, s)
    324     if p.degree() != 1:
    325         raise NotImplementedError('%s' % ie)

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/polys/polytools.py in __new__(cls, rep, *gens, **args)
     96                 return cls._from_poly(rep, opt)
     97             else:
---&amp;gt; 98                 return cls._from_expr(rep, opt)
     99 
    100     @classmethod

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/polys/polytools.py in _from_expr(cls, rep, opt)
    206     def _from_expr(cls, rep, opt):
    207         &amp;quot;&amp;quot;&amp;quot;Construct a polynomial from an expression. &amp;quot;&amp;quot;&amp;quot;
--&amp;gt; 208         rep, opt = _dict_from_expr(rep, opt)
    209         return cls._from_dict(rep, opt)
    210 

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/polys/polyutils.py in _dict_from_expr(expr, opt)
    325 
    326     if opt.gens:
--&amp;gt; 327         rep, gens = _dict_from_expr_if_gens(expr, opt)
    328     else:
    329         rep, gens = _dict_from_expr_no_gens(expr, opt)

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/polys/polyutils.py in _dict_from_expr_if_gens(expr, opt)
    266 def _dict_from_expr_if_gens(expr, opt):
    267     &amp;quot;&amp;quot;&amp;quot;Transform an expression into a multinomial form given generators. &amp;quot;&amp;quot;&amp;quot;
--&amp;gt; 268     (poly,), gens = _parallel_dict_from_expr_if_gens((expr,), opt)
    269     return poly, gens
    270 

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/polys/polyutils.py in _parallel_dict_from_expr_if_gens(exprs, opt)
    171                             coeff.append(factor)
    172                         else:
--&amp;gt; 173                             raise PolynomialError(&amp;quot;%s contains an element of the generators set&amp;quot; % factor)
    174 
    175             monom = tuple(monom)

PolynomialError: 1/(x + 1) contains an element of the generators set

It should raise NotImplementedError if it can't do it.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3448/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3448'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3448'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3448</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A0IFR347eCl7ImA9WhNTGUk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3449</id><published>2012-10-22T23:45:16.000Z</published><updated>2012-10-22T23:45:16.000Z</updated><title>Autowrap ((x - y)**25).expand() is a bad example</title><content type='html'>This was originally https://github.com/sympy/sympy/issues/1593.

Following the example given in the documentation:

In [1]: from sympy.utilities.autowrap import autowrap
In [2]: from sympy.abc import x,y
In [3]: expr = ((x - y)**(25)).expand()
In [4]: fn = autowrap(expr, language='C', backend='Cython')
In [5]: fn(3, 2)
Out[5]: 0.0
Which is incorrect (subs can be used to trivially show that the correct result is 1). This is simply a limitation of double precision.

I therefore suggest that something more reasonable is selected given that the current example may give the (incorrect) impression that the autowrapping system is broken. Or, better still, use it as an example of a caveat of using autowrap.
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3449/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3449'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3449'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:cc><issues:uri>/u/111560553046880738986/</issues:uri><issues:username>fred...@witherden.org</issues:username></issues:cc><issues:id>3449</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CUEBQn47eCl7ImA9WhNSEE0.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3450</id><published>2012-10-23T02:38:54.000Z</published><updated>2012-10-23T14:47:33.000Z</updated><title>compute_known_facts requires copy-paste</title><content type='html'>In assumptions the compute_known_facts function looks at some non-local variables and returns a string that should be copy-pasted into the ask.py file. 

It would be nice to make compute_known_facts take inputs. This would allow it to be tested more effectively and possibly be used in different contexts if known facts is ever split.

It would be nice so that the text could be sent to another file that contains only generated code. It seems odd to have one file write to itself. </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3450/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3450'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3450'/><author><name>MRock...@gmail.com</name><uri>/u/109882876523836932473/</uri></author><issues:id>3450</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Assumptions</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DE4HRH47eCl7ImA9WhNSF0U.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3451</id><published>2012-10-23T15:26:43.000Z</published><updated>2012-11-01T16:22:15.000Z</updated><title>remove compile_rule</title><content type='html'>In sympy/logic/boolalg.py compile_rule(s) it asks:

    TODO: can this be replaced by sympify ?

It appears that sympify handles the expressions just fine so this can be removed from boolalg and logic's __init__ file. Is there any reason to keep it?</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3451/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3451'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3451'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:id>3451</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>EasyToFix</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A0ICRH47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3452</id><published>2012-10-23T18:26:17.000Z</published><updated>2012-11-08T07:26:05.000Z</updated><title>SymPy Live Sphinx shell is buggy on iPad</title><content type='html'>I just tried the SymPy Live Sphinx shell on my iPad, and it was a little buggy.  When I run a code block, the keyboard opens (I guess this is just because the keyboard focus goes to the shell).  But with the keyboard open, the shell appears about an inch above the keyboard, instead of right on it (perhaps because it's trying to center the input?).  

Also, the LaTeX output didn't appear for me, or was glitchy.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3452/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3452'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3452'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3452</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Live</issues:label><issues:label>Documentation</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;D0cEQH47eCl7ImA9WhNSEUg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3453</id><published>2012-10-23T21:02:48.000Z</published><updated>2012-10-25T08:50:01.000Z</updated><title>kern gremlin in sympify</title><content type='html'>&amp;gt;&amp;gt;&amp;gt; S(&amp;quot;Matrix([[x0*x3*I]])&amp;quot;)
[I*x0*x3]
&amp;gt;&amp;gt;&amp;gt; S(&amp;quot;Matrix([[x0*x3*(I)]])&amp;quot;)
[I*_kern*x0*x3]

The &amp;quot;_kern&amp;quot; should not be in the 2nd expression.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3453/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3453'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3453'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:closedDate>2012-10-25T08:50:01.000Z</issues:closedDate><issues:id>3453</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>NeedsReview</issues:label><issues:label>smichr</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;DUcEQn47eCl7ImA9WhNSEU0.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3455</id><published>2012-10-24T10:04:24.000Z</published><updated>2012-10-24T19:30:03.000Z</updated><title>Not(0) doesn't evaluate to True</title><content type='html'>It seems like Not should behave like the other Bools:


&amp;gt;&amp;gt;&amp;gt; And(0)
False
&amp;gt;&amp;gt;&amp;gt; Or(0)
False
&amp;gt;&amp;gt;&amp;gt; Not(0)
Not(0)
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3455/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3455'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3455'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:closedDate>2012-10-24T19:30:03.000Z</issues:closedDate><issues:id>3455</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>NeedsReview</issues:label><issues:label>smichr</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CUQMRn47eCl7ImA9WhNSEUk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3456</id><published>2012-10-24T11:57:58.000Z</published><updated>2012-10-25T05:36:27.000Z</updated><title>sympy.matrices.Matrix.lower_triangular_solve returns a vector when applied to a matrix</title><content type='html'>The linear algebra functions like sympy.matrices.Matrix.LUsolve behave correctly when given a matrix as an argument, returning a matrix as the answer.  But sympy.matrices.Matrix.lower_triangular_solve returns a vector instead; it seems to be solving just the first column of the problem.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3456/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3456'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3456'/><author><name>dke...@gmail.com</name><uri>/u/116021515467243730737/</uri></author><issues:closedDate>2012-10-25T05:36:27.000Z</issues:closedDate><issues:id>3456</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>NeedsReview</issues:label><issues:label>smichr</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;Ck4CQH47eCl7ImA9WhNSFU8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3457</id><published>2012-10-25T15:38:02.000Z</published><updated>2012-10-29T14:29:21.000Z</updated><title>use2to3 script only works in a git checkout</title><content type='html'>Working on Debian packaging, I'm aiming to build the Python 2 and 3 packages from a single source package. The README says I can use bin/use2to3 to do the conversion, but this uses 'git ls-files', so it doesn't work from a tarball.

Additionally, it fails with an awkward error message, because it's trying to catch WindowsError, which isn't defined on Linux.

I've patched it to just get the list of files in the directory (it's using a tarball from github, so that's equivalent to the files tracked by git). But a better solution would be welcome.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3457/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3457'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3457'/><author><name>tak...@gmail.com</name><uri>/u/116141806100272241943/</uri></author><issues:id>3457</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Python3</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CkQHQX47eCl7ImA9WhNSFEo.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3461</id><published>2012-10-28T20:39:20.000Z</published><updated>2012-10-29T00:25:30.000Z</updated><title>Incorrect Limit</title><content type='html'>Consider:

In[5]:  expr = S('5*x**3/4 - 3*x/4 + (_eta_k*(3*x**2/2 - 1/2) + 35*x**4/8 - 15*x**2/4 + 3/8)/(2*(_eta_k + 1))')

and take the limit as _eta_k -&amp;gt; inf:

In[6]:  limit(expr, '_eta_k', oo)
Out[6]:  5*x**3/4 - 3*x/4

which is incorrect.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3461/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3461'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3461'/><author><name>fred...@witherden.org</name><uri>/u/111560553046880738986/</uri></author><issues:id>3461</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Series</issues:label><issues:label>WrongResult</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DEACQ347eCl7ImA9WhNSFk8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3463</id><published>2012-10-29T16:08:25.000Z</published><updated>2012-10-30T19:52:42.000Z</updated><title>update the "plotting capabilities" wiki page and generally the plotting documentation.</title><content type='html'>https://github.com/sympy/sympy/wiki/Plotting-capabilities

A number of tasks:

 - finish/update the sections **after** and **before** the table, **not** the table itself

 - add screenshots to the table (except where we do not implement the functionality)

 - update the table, especially the outdated api calls (images are part of the previous task)</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3463/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3463'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3463'/><author><name>krastano...@gmail.com</name><uri>/u/100157245271348669141/</uri></author><issues:id>3463</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Documentation</issues:label><issues:label>Plotting</issues:label><issues:label>CodeInCategory-Documentation</issues:label><issues:label>CodeInMultiple</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DEACQ347eCl7ImA9WhNSFk8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3464</id><published>2012-10-30T18:36:13.000Z</published><updated>2012-10-30T19:52:42.000Z</updated><title>Fixes to Planet SymPy</title><content type='html'>There are several things that could be done for Planet SymPy:

- Try to fix the whole robot issue. Namely, make the robot only push a change when there are updates.

- Redesign the site to make it look better.  

- Fix the issues as noted at https://groups.google.com/d/msg/sympy/oF1juFJtP5c/j2iBvf7BhiMJ.

- Others???

Also, should any of the above be split?

And I hope QA is the correct category for this.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3464/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3464'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3464'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3464</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInMultiple</issues:label><issues:label>CodeInCategory-QA</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DE4NQX47eCl7ImA9WhNSFk8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3465</id><published>2012-10-30T19:56:30.000Z</published><updated>2012-10-30T19:56:30.000Z</updated><title>choose a plotting function from the list and implement it</title><content type='html'>list is here
https://github.com/sympy/sympy/wiki/Plotting-capabilities</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3465/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3465'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3465'/><author><name>krastano...@gmail.com</name><uri>/u/100157245271348669141/</uri></author><issues:id>3465</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInMultiple</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;Ak4FQ347eCl7ImA9WhNSFk8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3466</id><published>2012-10-30T20:28:32.000Z</published><updated>2012-10-30T20:28:32.000Z</updated><title>create a proof of concept AnimationSeries for the plotting module</title><content type='html'>we want animations in our plotting module</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3466/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3466'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3466'/><author><name>krastano...@gmail.com</name><uri>/u/100157245271348669141/</uri></author><issues:id>3466</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Plotting</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A0EHR347eCl7ImA9WhNSFk8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3468</id><published>2012-10-30T20:40:14.000Z</published><updated>2012-10-30T20:40:36.000Z</updated><title>add a mayavi backend for 3d plots</title><content type='html'>Start with a simple backend, only lines for instance. Then add surfaces and aesthetics.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3468/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3468'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3468'/><author><name>krastano...@gmail.com</name><uri>/u/100157245271348669141/</uri></author><issues:id>3468</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Plotting</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInMultiple</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A08DSX47eCl7ImA9WhNSFk8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3469</id><published>2012-10-30T20:44:38.000Z</published><updated>2012-10-30T20:44:38.000Z</updated><title>adaptive 3d plotting using triangular meshes</title><content type='html'>it requires a mayavi backend</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3469/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3469'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3469'/><author><name>krastano...@gmail.com</name><uri>/u/100157245271348669141/</uri></author><issues:id>3469</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DUABRX47eCl7ImA9WhNSFkg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3470</id><published>2012-10-30T22:35:32.000Z</published><updated>2012-10-31T04:29:14.000Z</updated><title>Add(1, 2, evaluate=False) != Add(2, 1, evaluate=False)</title><content type='html'>Should the following produce True or False?

Add(1, 2, evaluate=False) == Add(2, 1, evaluate=False)

Perhaps a deeper question is 

&amp;quot;Should we manipulate args in commutative ops as sets instead of tuples?&amp;quot;</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3470/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3470'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3470'/><author><name>MRock...@gmail.com</name><uri>/u/109882876523836932473/</uri></author><issues:closedDate>2012-10-31T04:29:14.000Z</issues:closedDate><issues:id>3470</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:mergedInto><issues:id>2805</issues:id><issues:project>sympy</issues:project></issues:mergedInto><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Duplicate</issues:status></entry><entry gd:etag='W/&quot;CEEEQH47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3471</id><published>2012-10-31T00:06:27.000Z</published><updated>2012-11-08T05:30:01.000Z</updated><title>Improve screenshots portion of the webpage</title><content type='html'>Right now, we just have http://sympy.org/en/screenshots.html, but it doesn't look very good.  We should replace it with actual screen shots, and include some more examples.  https://github.com/sympy/sympy/wiki/Quick-examples might be a good place to start.

See also https://groups.google.com/d/topic/sympy/TzND30CwzBQ/discussion.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3471/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3471'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3471'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3471</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Documentation</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEEEQH47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3472</id><published>2012-10-31T13:07:17.000Z</published><updated>2012-11-08T05:30:01.000Z</updated><title>Remove @XFAIL decorator on passing tests</title><content type='html'>A test decorated with @XFAIL means that what we are testing has a known bug and it doesn't return the desired result. It is expected that the test fails even though in an ideal world, it should really pass. As development continues, it's possible for the test to become valid and pass without the programmer removing the @XFAIL decorator, perhaps because it wasn't noticed. One should investigate which XFAIL tests are really passing under all architecture, and remove the @XFAIL decorator on those tests.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3472/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3472'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3472'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:id>3472</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Testing</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInCategory-QA</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEEEQH47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3473</id><published>2012-10-31T13:10:12.000Z</published><updated>2012-11-08T05:30:01.000Z</updated><title>Remove "#doctest: +SKIP" comments on valid docstrings</title><content type='html'>In docstrings, we have examples from a python prompt, with input and output, e.g.

&amp;gt;&amp;gt;&amp;gt; x + x
2*x

The command bin/doctest is used to check that the output is consistent with the input. We sometimes have

&amp;gt;&amp;gt;&amp;gt; x + x  #doctest: +SKIP
3*x

Such a comment means that the docstring tester is not required to check the consistency of input/output. It is expected that the test fails even though, quite often, in an ideal world, it should really pass. As development continues, it's possible for the test to become valid and pass without the programmer removing the &amp;quot;#doctest: +SKIP&amp;quot; comment, perhaps because it wasn't noticed. One should investigate which docstring with &amp;quot;#doctest: +SKIP&amp;quot; comments are really valid and passing docstrings under all architecture, and remove the &amp;quot;#doctest: +SKIP&amp;quot; comment in those docstrings.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3473/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3473'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3473'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:id>3473</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Testing</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInCategory-QA</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A0YBRX47eCl7ImA9WhNSFkU.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3474</id><published>2012-10-31T13:12:34.000Z</published><updated>2012-10-31T13:12:34.000Z</updated><title>Wrong result from re(x**2), im(x**2) and (x**2).as_real_imag()</title><content type='html'>In master:

&amp;gt;&amp;gt;&amp;gt; from sympy import re, im
&amp;gt;&amp;gt;&amp;gt; from sympy.abc import x     
&amp;gt;&amp;gt;&amp;gt; re(x)     # correct
re(x)
&amp;gt;&amp;gt;&amp;gt; re(x**2)  # incorrect
x**2
&amp;gt;&amp;gt;&amp;gt; im(x)     # correct
im(x)
&amp;gt;&amp;gt;&amp;gt; im(x**2)  # incorrect
0

We have no assumption on x besides that it is a complex number. x**2 should be (re(x) + I*im(x))**2 = re(x)**2 - im(x)**2 + 2*I*re(x)*im(x). Thus one might expect

&amp;gt;&amp;gt;&amp;gt; re(x**2)
re(x)**2 - im(x)**2
&amp;gt;&amp;gt;&amp;gt; im(x**2)
2*re(x)*im(x)

In any case the current result is wrong.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3474/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3474'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3474'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:id>3474</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Assumptions</issues:label><issues:label>WrongResult</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;D0EMQn47eCl7ImA9WhNSF0U.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3475</id><published>2012-10-31T13:13:38.000Z</published><updated>2012-11-01T16:01:23.000Z</updated><title>simplify the square of an addition</title><content type='html'>&amp;gt;&amp;gt;&amp;gt; x, y, z = symbols(&amp;quot;x y z&amp;quot;)
&amp;gt;&amp;gt;&amp;gt; simplify(x*y + x*z)
x*(y + z)
&amp;gt;&amp;gt;&amp;gt; simplify((x*y + x*z)**2)
(x*y + x*z)**2

It would be nice (and more consistent) to return x**2*(y + z)**2 on the last line.
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3475/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3475'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3475'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:id>3475</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Simplify</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A0UDRn47eCl7ImA9WhNSFkU.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3476</id><published>2012-10-31T13:14:37.000Z</published><updated>2012-10-31T13:14:37.000Z</updated><title>simplify and noncommutative symbol error</title><content type='html'>A = Symbol(&amp;quot;A&amp;quot;, commutative=False)
x, y = symbols(&amp;quot;x y&amp;quot;)
simplify(A/(1 + y/x))

gives &amp;quot;PolynomialError: non-commutative expressions are not supported&amp;quot;. It should try to simplify to x*A/(x + y) or at least return the expression unchanged without raising an error.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3476/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3476'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3476'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:id>3476</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Simplify</issues:label><issues:label>NonCommutative</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEEEQH47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3477</id><published>2012-10-31T13:16:04.000Z</published><updated>2012-11-08T05:30:01.000Z</updated><title>latex printing of Min(x, y)**2</title><content type='html'>The latex printing of Min(x, y)**2 misses the exponent.

&amp;gt;&amp;gt;&amp;gt; latex(Min(x, y))
'\\min\\left(x, y\\right)'
&amp;gt;&amp;gt;&amp;gt; latex(Min(x, y)**2)
'\\min\\left(x, y\\right)'

The same is true for Max(x, y)**2. Investigate if there are more Functions that forget to print the exponent (maybe also check the pretty printer) and fix them.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3477/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3477'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3477'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:id>3477</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Printing</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEEEQH47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3478</id><published>2012-10-31T13:17:53.000Z</published><updated>2012-11-08T05:30:01.000Z</updated><title>Implement rewrite as Piecewise for Abs(x) and others</title><content type='html'>Implement Abs(x).rewrite(Piecewise) so that it returns Piecewise((x, x &amp;gt;= 0), (-x, True)) for x real.

Implement Heaviside(x).rewrite(Piecewise) so that it returns Piecewise((1, x &amp;gt; 0), (S(1)/2, x == 0), (0, True)) for x real.

Implement sign(x).rewrite(Piecewise) so that it returns Piecewise((1, x &amp;gt; 0), (-1, x &amp;lt; 0), (0, True)) for x real.

And possibly others...
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3478/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3478'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3478'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:id>3478</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInMultiple</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEEEQH47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3479</id><published>2012-10-31T13:19:37.000Z</published><updated>2012-11-08T05:30:01.000Z</updated><title>KroneckerDelta should canonicalize</title><content type='html'>Currently,

&amp;gt;&amp;gt;&amp;gt; KroneckerDelta(n, m) == KroneckerDelta(m, n)
False

but this should be True. Basically, KroneckerDelta should sort its arguments or use a set (but then the printer should sort the arguments).</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3479/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3479'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3479'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:id>3479</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;D0cFSX47eCl7ImA9WhNSF0U.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3480</id><published>2012-10-31T13:20:37.000Z</published><updated>2012-11-01T15:50:18.000Z</updated><title>LeviCivita should canonicalize</title><content type='html'>Currently,

&amp;gt;&amp;gt;&amp;gt; LeviCivita(i, j, k) == LeviCivita(k, i, j)
False

but this should be True. Basically, LeviCivita should either move the argument with the smallest sorting key to the first position, or sort its arguments and multiply by a factor of -1 if necessary (if the new ordering corresponds to an uncyclic permutation of the original ordering).</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3480/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3480'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3480'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:id>3480</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;Dk4CQX47eCl7ImA9WhNSFkQ.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3481</id><published>2012-10-31T13:21:51.000Z</published><updated>2012-10-31T14:49:20.000Z</updated><title>Handle KroneckerDelta in Sum</title><content type='html'>SymPy should handle KroneckerDelta appearing in a Sum, e.g. Sum(KroneckerDelta(m, n), (n, 1, oo)).doit() should return 1 if m is a positive integer.

In general a simplified result in terms of a Piecewise can be obtained. An image explains it better.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3481/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3481'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3481'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:id>3481</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Concrete</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A0ADQH47eCl7ImA9WhNSFkU.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3482</id><published>2012-10-31T13:22:51.000Z</published><updated>2012-10-31T13:22:51.000Z</updated><title>Handle KroneckerDelta in Product</title><content type='html'>SymPy should handle KroneckerDelta appearing in a Product, e.g. Product(KroneckerDelta(m, n), (n, 1, oo)).doit() should return 0.

In general a simplified result in terms of a Piecewise can be obtained. An image explains it better.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3482/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3482'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3482'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:id>3482</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Concrete</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEEEQH47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3483</id><published>2012-10-31T13:23:35.000Z</published><updated>2012-11-08T05:30:01.000Z</updated><title>Empty Sum should give zero</title><content type='html'>Sum(n, (n, 3, 1)).doit() should return 0.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3483/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3483'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3483'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:id>3483</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Concrete</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEEEQH47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3484</id><published>2012-10-31T13:24:06.000Z</published><updated>2012-11-08T05:30:01.000Z</updated><title>Empty Product should give one</title><content type='html'>Product(n, (n, 3, 1)).doit() should return 1.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3484/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3484'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3484'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:id>3484</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Concrete</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEICRH47eCl7ImA9WhNSFkQ.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3485</id><published>2012-10-31T14:09:25.000Z</published><updated>2012-10-31T14:09:25.000Z</updated><title>Adjoint(Transpose(A)) problems</title><content type='html'>I expected this to be True:

&amp;gt;&amp;gt;&amp;gt; Adjoint(Transpose(A)) == Transpose(Adjoint(A))
False

instead we have:

&amp;gt;&amp;gt;&amp;gt; Adjoint(Transpose(A))
Adjoint(A')
&amp;gt;&amp;gt;&amp;gt; Transpose(Adjoint(A))
Adjoint(A)'

and the latex for either form is uncompilable:

&amp;gt;&amp;gt;&amp;gt; latex(Adjoint(Transpose(A)))
'A^T^\\dag'
&amp;gt;&amp;gt;&amp;gt; latex(Transpose(Adjoint(A)))
'A^\\dag^T'</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3485/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3485'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3485'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:cc><issues:uri>/u/109882876523836932473/</issues:uri><issues:username>MRock...@gmail.com</issues:username></issues:cc><issues:id>3485</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEEEQH47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3486</id><published>2012-10-31T14:11:10.000Z</published><updated>2012-11-08T05:30:01.000Z</updated><title>pretty printing of Adjoint(A) requires unicode</title><content type='html'>&amp;gt;&amp;gt;&amp;gt; from sympy import *
&amp;gt;&amp;gt;&amp;gt; A = MatrixSymbol('A', 3, 3)
&amp;gt;&amp;gt;&amp;gt; pprint(Adjoint(A), use_unicode=False)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;sympy/printing/pretty/pretty.py&amp;quot;, line 1638, in pretty_print
    print pretty(expr, **settings)
UnicodeEncodeError: 'latin-1' codec can't encode character u'\u2020' in position 1: ordinal not in range(256)
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3486/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3486'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3486'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:cc><issues:uri>/u/109882876523836932473/</issues:uri><issues:username>MRock...@gmail.com</issues:username></issues:cc><issues:id>3486</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:label>Printing</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CE4BR347eCl7ImA9WhNSFkQ.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3487</id><published>2012-10-31T14:15:56.000Z</published><updated>2012-10-31T14:15:56.000Z</updated><title>adjoint(A), conjugate(A), transpose(A) with A a MatrixSymbol</title><content type='html'>It should return the appropriate instance of Adjoint, Transpose, or both.

&amp;gt;&amp;gt;&amp;gt; from sympy import *
&amp;gt;&amp;gt;&amp;gt; A = MatrixSymbol('A', 3, 3)
&amp;gt;&amp;gt;&amp;gt; adjoint(A)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;sympy/core/cache.py&amp;quot;, line 92, in wrapper
    func_cache_it_cache[k] = r = func(*args, **kw_args)
  File &amp;quot;sympy/core/function.py&amp;quot;, line 281, in __new__
    result = super(Function, cls).__new__(cls, *args, **options)
  File &amp;quot;sympy/core/cache.py&amp;quot;, line 92, in wrapper
    func_cache_it_cache[k] = r = func(*args, **kw_args)
  File &amp;quot;sympy/core/function.py&amp;quot;, line 127, in __new__
    evaluated = cls.eval(*args)
  File &amp;quot;sympy/functions/elementary/complexes.py&amp;quot;, line 542, in eval
    obj = arg._eval_adjoint()
  File &amp;quot;sympy/matrices/expressions/matexpr.py&amp;quot;, line 124, in _eval_adjoint
    return self.T.conjugate()
  File &amp;quot;sympy/matrices/expressions/matexpr.py&amp;quot;, line 136, in conjugate
    &amp;quot;conjugate not implemented for %s&amp;quot; % self.__class__.__name__)
NotImplementedError: conjugate not implemented for Transpose
&amp;gt;&amp;gt;&amp;gt; conjugate(A)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;sympy/core/cache.py&amp;quot;, line 92, in wrapper
    func_cache_it_cache[k] = r = func(*args, **kw_args)
  File &amp;quot;sympy/core/function.py&amp;quot;, line 281, in __new__
    result = super(Function, cls).__new__(cls, *args, **options)
  File &amp;quot;sympy/core/cache.py&amp;quot;, line 92, in wrapper
    func_cache_it_cache[k] = r = func(*args, **kw_args)
  File &amp;quot;sympy/core/function.py&amp;quot;, line 127, in __new__
    evaluated = cls.eval(*args)
  File &amp;quot;sympy/functions/elementary/complexes.py&amp;quot;, line 487, in eval
    obj = arg._eval_conjugate()
AttributeError: 'MatrixSymbol' object has no attribute '_eval_conjugate'
&amp;gt;&amp;gt;&amp;gt; transpose(A)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;sympy/core/cache.py&amp;quot;, line 92, in wrapper
    func_cache_it_cache[k] = r = func(*args, **kw_args)
  File &amp;quot;sympy/core/function.py&amp;quot;, line 281, in __new__
    result = super(Function, cls).__new__(cls, *args, **options)
  File &amp;quot;sympy/core/cache.py&amp;quot;, line 92, in wrapper
    func_cache_it_cache[k] = r = func(*args, **kw_args)
  File &amp;quot;sympy/core/function.py&amp;quot;, line 127, in __new__
    evaluated = cls.eval(*args)
  File &amp;quot;sympy/functions/elementary/complexes.py&amp;quot;, line 519, in eval
    obj = arg._eval_transpose()
  File &amp;quot;sympy/matrices/expressions/matexpr.py&amp;quot;, line 112, in _eval_transpose
    raise NotImplementedError()
NotImplementedError</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3487/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3487'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3487'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:cc><issues:uri>/u/109882876523836932473/</issues:uri><issues:username>MRock...@gmail.com</issues:username></issues:cc><issues:id>3487</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A0YFQn47eCl7ImA9WhNREU8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3488</id><published>2012-10-31T14:22:46.000Z</published><updated>2012-11-05T15:25:13.000Z</updated><title>sqrt(A) with A a matrix</title><content type='html'>&amp;gt;&amp;gt;&amp;gt; from sympy import *
&amp;gt;&amp;gt;&amp;gt; A = ImmutableMatrix(2, 2, [1, I, 0, 2])
&amp;gt;&amp;gt;&amp;gt; sqrt(A)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;sympy/functions/elementary/miscellaneous.py&amp;quot;, line 108, in sqrt
    return C.Pow(arg, S.Half)
  File &amp;quot;sympy/core/cache.py&amp;quot;, line 92, in wrapper
    func_cache_it_cache[k] = r = func(*args, **kw_args)
  File &amp;quot;sympy/core/power.py&amp;quot;, line 99, in __new__
    obj = b._eval_power(e)
  File &amp;quot;sympy/matrices/matrices.py&amp;quot;, line 2834, in __getattr__
    &amp;quot;%s has no attribute %s.&amp;quot; % (self.__class__.__name__, attr))
AttributeError: ImmutableMatrix has no attribute _eval_power.
&amp;gt;&amp;gt;&amp;gt; A = MatrixSymbol(&amp;quot;A&amp;quot;, 2, 2)
&amp;gt;&amp;gt;&amp;gt; sqrt(A)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;sympy/functions/elementary/miscellaneous.py&amp;quot;, line 108, in sqrt
    return C.Pow(arg, S.Half)
  File &amp;quot;sympy/core/cache.py&amp;quot;, line 92, in wrapper
    func_cache_it_cache[k] = r = func(*args, **kw_args)
  File &amp;quot;sympy/core/power.py&amp;quot;, line 99, in __new__
    obj = b._eval_power(e)
AttributeError: 'MatrixSymbol' object has no attribute '_eval_power'


I started this at https://github.com/sympy/sympy/pull/1627
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3488/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3488'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3488'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:cc><issues:uri>/u/109882876523836932473/</issues:uri><issues:username>MRock...@gmail.com</issues:username></issues:cc><issues:closedDate>2012-11-05T15:25:13.000Z</issues:closedDate><issues:id>3488</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:owner><issues:uri>/u/102137482174297837682/</issues:uri><issues:username>julien.r...@gmail.com</issues:username></issues:owner><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;CEEEQH47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3489</id><published>2012-10-31T16:22:14.000Z</published><updated>2012-11-08T05:30:01.000Z</updated><title>Docstring formatting for section titles</title><content type='html'>Every occurrence of a section title inside a docstring should be followed by an empty line. This is to ensures that it looks good in html and pdf. A properly formatted section looks like this:

        Examples
        ========

        &amp;gt;&amp;gt;&amp;gt; from sympy import symbols, pi, exp
        &amp;gt;&amp;gt;&amp;gt; x, y, z = symbols('x y z')
        &amp;gt;&amp;gt;&amp;gt; (1 + x*y).xreplace({x: pi})
        pi*y + 1
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3489/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3489'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3489'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:id>3489</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Documentation</issues:label><issues:label>EasyToFix</issues:label><issues:label>CodeInCategory-Documentation</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DkECQH47eCl7ImA9WhNSF0U.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3491</id><published>2012-11-01T15:44:21.000Z</published><updated>2012-11-01T15:44:21.000Z</updated><title>simpler powsimp for products containing (-1)**(a/q)*n**(b/q)</title><content type='html'>&amp;gt;&amp;gt;&amp;gt; a
(-6)**(1/4)*I
&amp;gt;&amp;gt;&amp;gt; b
(-1)**(3/4)*6**(1/4)
&amp;gt;&amp;gt;&amp;gt; a.n(2),b.n(2)
(-1.1 + 1.1*I, -1.1 + 1.1*I)

Neither a nor b are changed by powsimp; it might be nice to have it recognized that either could be changed to the other.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3491/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3491'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3491'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:id>3491</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;DE4DRX47eCl7ImA9WhNREEQ.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3492</id><published>2012-11-03T18:45:39.000Z</published><updated>2012-11-05T06:29:34.000Z</updated><title>test_plot does not clean up after itself</title><content type='html'>I have noticed recently a large number of tmp*png images accumulating in my /tmp directory.  These appear to be images generated by test_plot, as part of testing development code.  I don't know if it's something specific to my system that's making them accumulate, or if this is a general issue.  

This is the disk-equivalent of a memory leak (does that have a name?) and there should be some sort of safe-guard to prevent the accumulation.  Perhaps a persistent naming convention (would help with debugging also) or automatically removed after test completion?</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3492/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3492'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3492'/><author><name>trel...@psu.edu</name><uri>/u/112862214195610862534/</uri></author><issues:id>3492</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Plotting</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>New</issues:status></entry><entry gd:etag='W/&quot;DUcFSX47eCl7ImA9WhNREU0.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3493</id><published>2012-11-05T02:45:05.000Z</published><updated>2012-11-05T09:16:58.000Z</updated><title>bad solution for system of linear equations</title><content type='html'>There is a list of linear equations. Sympy claims to solve it, giving a solution.
When I substitute the solution into the equations, I get a lot of non-zero results.
I regard this worse than having no solution at all.

See the attached screenlog for details.

SymPy 0.7.1.rc1 (Python 2.7.3-64-bit)</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3493/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3493'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3493'/><author><name>m4g...@gmail.com</name><uri>/u/116886680541145230052/</uri></author><issues:id>3493</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>WrongResult</issues:label><issues:label>Solvers</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;D0QFQ347eCl7ImA9WhNREEQ.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3494</id><published>2012-11-05T06:01:52.000Z</published><updated>2012-11-05T06:01:52.000Z</updated><title>plot_implicit fails for y - cos(pi/x)</title><content type='html'>In [4]: plot_implicit(y - cos(pi/x), (x, 0, 1))
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&amp;lt;ipython-input-4-239391b74ecd&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 plot_implicit(y - cos(pi/x), (x, 0, 1))

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/plotting/plot_implicit.pyc in plot_implicit(expr, *args, **kwargs)
    352     p = Plot(series_argument, **kwargs)
    353     if show:
--&amp;gt; 354         p.show()
    355     return p

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/plotting/plot.pyc in show(self)
    193             self._backend.close()
    194         self._backend = self.backend(self)
--&amp;gt; 195         self._backend.show()
    196 
    197     def save(self, path):

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/plotting/plot.pyc in show(self)
    941 
    942     def show(self):
--&amp;gt; 943         self.process_series()
    944         #TODO after fixing https://github.com/ipython/ipython/issues/1255
    945         # you can uncomment the next line and remove the pyplot.show() call

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/plotting/plot.pyc in process_series(self)
    854                 self.ax.spines['left'].set_smart_bounds(False)
    855                 self.ax.spines['bottom'].set_smart_bounds(False)
--&amp;gt; 856                 points = s.get_raster()
    857                 if len(points) == 2:
    858                     #interval math plotting

/Users/aaronmeurer/Documents/Python/sympy/sympy/sympy/plotting/plot_implicit.pyc in get_raster(self)
     75         yinterval = interval(self.start_y, self.end_y)
     76         try:
---&amp;gt; 77             temp = func(xinterval, yinterval)
     78         except AttributeError:
     79             if self.use_interval_math:

&amp;lt;string&amp;gt; in &amp;lt;lambda&amp;gt;(x, y)

TypeError: unsupported operand type(s) for /: 'Pi' and 'interval'</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3494/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3494'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3494'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:cc><issues:uri>/u/112791612514943977027/</issues:uri><issues:username>catchmrb...@gmail.com</issues:username></issues:cc><issues:id>3494</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Plotting</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A04ERX47eCl7ImA9WhNREU8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3495</id><published>2012-11-05T15:31:55.000Z</published><updated>2012-11-05T15:38:24.000Z</updated><title>Matrices .args and .shape should contain SymPy types</title><content type='html'>Matrices .args and .shape should be tuples whose members are SymPy types. Currently, .args seem to obey this, but there is at least one case where .shape does not:

&amp;gt;&amp;gt;&amp;gt; from sympy import *
&amp;gt;&amp;gt;&amp;gt; A = ImmutableMatrix(2, 2, [0, 1, 1, 0])
&amp;gt;&amp;gt;&amp;gt; AA = MatPow(A, 2)
&amp;gt;&amp;gt;&amp;gt; ImmutableMatrix(AA)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;sympy/matrices/immutable.py&amp;quot;, line 40, in __new__
    return cls._new(*args, **kwargs)
  File &amp;quot;sympy/matrices/immutable.py&amp;quot;, line 33, in _new
    *args, **kwargs)
  File &amp;quot;sympy/matrices/matrices.py&amp;quot;, line 137, in _handle_creation_inputs
    return args[0].rows, args[0].cols, args[0].as_explicit()._mat
  File &amp;quot;sympy/matrices/expressions/matexpr.py&amp;quot;, line 199, in as_explicit
    for i in range(self.rows)])
  File &amp;quot;sympy/matrices/expressions/matexpr.py&amp;quot;, line 168, in __getitem__
    return self._entry(i, j)
  File &amp;quot;sympy/matrices/expressions/matpow.py&amp;quot;, line 36, in _entry
    *[self.base for k in range(self.exp)])._entry(i, j)
  File &amp;quot;sympy/matrices/expressions/matmul.py&amp;quot;, line 51, in _entry
    if X.shape[1].is_Number:
AttributeError: 'int' object has no attribute 'is_Number'
&amp;gt;&amp;gt;&amp;gt; AA.shape
(2, 2)
&amp;gt;&amp;gt;&amp;gt; map(type, AA.shape)
[&amp;lt;type 'int'&amp;gt;, &amp;lt;type 'int'&amp;gt;]

This came up in the Hadamard PR at https://github.com/sympy/sympy/pull/1608 where the same error occurred in calculating the Hadamard product of two actual matrices with ImmutableMatrix(HadamardProduct(A, B)).</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3495/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3495'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3495'/><author><name>julien.r...@gmail.com</name><uri>/u/102137482174297837682/</uri></author><issues:cc><issues:uri>/u/109882876523836932473/</issues:uri><issues:username>MRock...@gmail.com</issues:username></issues:cc><issues:cc><issues:uri>/u/117933771799683895267/</issues:uri><issues:username>smi...@gmail.com</issues:username></issues:cc><issues:id>3495</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Matrices</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CUcCQn47eCl7ImA9WhNREkw.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3496</id><published>2012-11-06T14:44:23.000Z</published><updated>2012-11-06T14:44:23.000Z</updated><title>Assumptions known_facts only apply to atomic expressions</title><content type='html'>Assumptions has a mechanism to allow some predicates to imply others. 

known_facts = { ...
    Implies(Q.lower_triangular, Q.triangular),
    Implies(Q.upper_triangular, Q.triangular),
    ...} 

Which enables successful queries as follows

    In [4]: ask(Q.triangular(X), Q.lower_triangular(X))
    Out[4]: True

Unfortunately this implication does not propagate to larger queries like the following

    In [5]: ask(Q.triangular(X+Y), Q.lower_triangular(X) &amp;amp; Q.lower_triangular(Y))
    &amp;lt;returns None&amp;gt;

Despite the fact that the X+Y bit is handled in a handler

    In [3]: ask(Q.lower_triangular(X+Y), Q.lower_triangular(X) &amp;amp; Q.lower_triangular(Y))
    Out[3]: True
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3496/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3496'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3496'/><author><name>MRock...@gmail.com</name><uri>/u/109882876523836932473/</uri></author><issues:id>3496</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Assumptions</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;A0ICRH47eCl7ImA9WhNRE0g.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3497</id><published>2012-11-08T07:02:50.000Z</published><updated>2012-11-08T07:26:05.000Z</updated><title>Improve SymPy Live for iPad</title><content type='html'>Some things that could be done to make SymPy Live better on the iPad:

- Enable all the various things that are enabled on mobile.  The ones I can think of are making sure you don't ever have to use Shift-Enter (because it doesn't work), making the text box square, disable autocorrect and autocapitalize, and adding buttons for history navigation.

- Make the logo retina.

- Add a favicon (this isn't actually iPad, but it's important too).

- Make a nice icon too add the app to the homescreen (for iPhone too).  See https://groups.google.com/d/topic/sympy/Q7HHeEmFo0I/discussion for some suggestions.    Also, maybe add something like http://cubiq.org/add-to-home-screen to the site.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3497/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3497'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3497'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:id>3497</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Live</issues:label><issues:label>CodeInCategory-UI</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CUUAQn47eCl7ImA9WhJbEU0.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/705</id><published>2008-02-13T17:41:53.000Z</published><updated>2012-09-20T01:07:23.000Z</updated><title>write a function to convert trig. functions to radicals (if possible)</title><content type='html'>This article explains how:

http://en.wikipedia.org/wiki/Exact_trigonometric_constants</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/705/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=705'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/705'/><author><name>ondrej.c...@gmail.com</name><uri>/u/104039945248245758823/</uri></author><issues:closedDate>2012-09-20T01:07:23.000Z</issues:closedDate><issues:id>705</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Medium</issues:label><issues:mergedInto><issues:id>2949</issues:id><issues:project>sympy</issues:project></issues:mergedInto><issues:stars>0</issues:stars><issues:state>closed</issues:state><issues:status>Duplicate</issues:status></entry><entry gd:etag='W/&quot;D08GRn47eCl7ImA9WhNSFUg.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/1020</id><published>2008-08-18T15:06:53.000Z</published><updated>2012-10-30T00:10:27.000Z</updated><title>integrate(sqrt(y**2 - x**2)/x, x) can't do it</title><content type='html'>In [8]: integrate(sqrt(y**2 - x**2)/x, x)
Out[8]: 
⌠                
⎮    ⎽⎽⎽⎽⎽⎽⎽⎽⎽   
⎮   ╱  2    2    
⎮ ╲╱  y  - x     
⎮ ──────────── dx
⎮      x         
⌡                
 </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/1020/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=1020'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/1020'/><author><name>ondrej.c...@gmail.com</name><uri>/u/104039945248245758823/</uri></author><issues:blockedOn><issues:id>1393</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:closedDate>2012-10-29T23:51:56.000Z</issues:closedDate><issues:id>1020</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Medium</issues:label><issues:label>Integration</issues:label><issues:owner><issues:uri>/u/104039945248245758823/</issues:uri><issues:username>ondrej.c...@gmail.com</issues:username></issues:owner><issues:stars>0</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;DEACQX47eCl7ImA9WhNSFk8.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/182</id><published>2007-07-10T20:37:28.000Z</published><updated>2012-10-30T19:52:40.000Z</updated><title>Plot linear maps</title><content type='html'>It would be nice, if there was some support to visualize the effect of,
say, a 2x2 matrix on points of the real plane. I've used a small program
sometimes, where one could enter the matrix, and then just draw in the
plane in blue, while watching the image drawn in red. That way, a beginner
in linear algebra could easily understand scaling, rotations etc.

I once tried to do a similar thing in 3D with vtk, where one could enter a
3x3 matrix and could place some object, for example a colored cube in a 3D
render window, to see the image of the cube. It worked quite well, but I
didn't get interaction working (and all code is lost).

I don't know if someone has ideas on this, but it would be a nice learning
tool, if you could also display eigenvectors and kernels of the linear map,
for example.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/182/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=182'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/182'/><author><name>letha...@gmail.com</name><uri>/u/116277859734487035258/</uri></author><issues:id>182</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Low</issues:label><issues:label>Matrices</issues:label><issues:label>Plotting</issues:label><issues:label>CodeInCategory-Code</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:owner><issues:uri>/u/116277859734487035258/</issues:uri><issues:username>letha...@gmail.com</issues:username></issues:owner><issues:stars>4</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry><entry gd:etag='W/&quot;CEcBQX47eCl7ImA9WhNRE0k.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/2528</id><published>2011-06-29T04:36:26.000Z</published><updated>2012-11-08T02:34:10.000Z</updated><title>Update SymPy's Wikipedia article</title><content type='html'>I just noticed that http://en.wikipedia.org/wiki/SymPy is a little old with its information.  None of it is wrong, but I think the features list could be updated.  It seems to be roughly the same as the features listed at sympy.org and http://code.google.com/p/sympy/, so perhaps those should be updated too.

Also, SymPy's stuff at http://en.wikipedia.org/wiki/Comparison_of_computer_algebra_systems should be updated.  I did notice some of that is wrong.</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/2528/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=2528'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/2528'/><author><name>asmeurer@gmail.com</name><uri>/u/asmeurer@gmail.com/</uri></author><issues:blockedOn><issues:id>2770</issues:id><issues:project>sympy</issues:project></issues:blockedOn><issues:id>2528</issues:id><issues:label>Type-Enhancement</issues:label><issues:label>Priority-Low</issues:label><issues:label>Documentation</issues:label><issues:label>CodeInCategory-Outreach</issues:label><issues:label>CodeInImportedIntoGoogleDocs</issues:label><issues:stars>2</issues:stars><issues:state>open</issues:state><issues:status>Started</issues:status></entry><entry gd:etag='W/&quot;AkYEQH47eCl7ImA9WhNTEEU.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3288</id><published>2012-06-11T04:04:02.000Z</published><updated>2012-10-13T00:28:21.000Z</updated><title>str is not keeping factored Float separate</title><content type='html'>-3.0*z**2*(x**2 + y**2 + z**2)**(-2.5) + 3*(x**2 + y**2 + z**2)**(-1.5)
&amp;gt;&amp;gt;&amp;gt; eq=_

It doesn't look like anything get factored out...

&amp;gt;&amp;gt;&amp;gt; factor(eq)
-(3.0*z**2*(x**2 + y**2 + z**2)**(-2.5) - 3.0*(x**2 + y**2 + z**2)**(-1.5))


But pprint can see the factored Float:

&amp;gt;&amp;gt;&amp;gt; pprint(_)
     /                     -2.5                     -1.5\
     |     2 / 2    2    2\           / 2    2    2\    |
-3.0*\1.0*z *\x  + y  + z /     - 1.0*\x  + y  + z /    /
</content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3288/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3288'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3288'/><author><name>smi...@gmail.com</name><uri>/u/117933771799683895267/</uri></author><issues:closedDate>2012-10-13T00:28:21.000Z</issues:closedDate><issues:id>3288</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Low</issues:label><issues:label>NeedsReview</issues:label><issues:label>smichr</issues:label><issues:stars>1</issues:stars><issues:state>closed</issues:state><issues:status>Fixed</issues:status></entry><entry gd:etag='W/&quot;DkQCSH47eCl7ImA9WhNSEUk.&quot;'><id>http://code.google.com/feeds/issues/p/sympy/issues/full/3410</id><published>2012-09-29T14:19:31.000Z</published><updated>2012-10-25T05:52:49.000Z</updated><title>Make ImmutableMatrix default</title><content type='html'>Should we make the following change to SymPy in a future release?

Matrix = MutableMatrix
-&amp;gt; 
Matrix = ImmutableMatrix 

There are a lot of questions like &amp;quot;Why doesn't simplify work with Matrix?&amp;quot; that would go away. 

It would stop the following behavior however

M = ones(3, 3)
for i in range(3):
    for j in range(3):
        M[i,j] = i -j

Because we would no longer allow the `M[i,j] = ` syntax. 

Alternatively, M[i,j] could return a new ImmutableMatrix (this would be very slow) or could return a new MutableMatrix (this would be sneaky). 

I'm not pushing hard for this. I just think it would simplify a few things. </content><link rel='replies' type='application/atom+xml' href='http://code.google.com/feeds/issues/p/sympy/issues/3410/comments/full'/><link rel='alternate' type='text/html' href='http://code.google.com/p/sympy/issues/detail?id=3410'/><link rel='self' type='application/atom+xml' href='https://code.google.com/feeds/issues/p/sympy/issues/full/3410'/><author><name>MRock...@gmail.com</name><uri>/u/109882876523836932473/</uri></author><issues:id>3410</issues:id><issues:label>Type-Defect</issues:label><issues:label>Priority-Low</issues:label><issues:label>Matrices</issues:label><issues:stars>1</issues:stars><issues:state>open</issues:state><issues:status>Valid</issues:status></entry></feed>